<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: img | JavaScript Without Grammar]]></title>
  <link href="http://browniefed.com/blog/categories/img/atom.xml" rel="self"/>
  <link href="http://browniefed.com/"/>
  <updated>2016-01-31T13:31:13-08:00</updated>
  <id>http://browniefed.com/</id>
  <author>
    <name><![CDATA[Jason Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PhantomJS Creating &amp; Connecting to Server]]></title>
    <link href="http://browniefed.com/blog/2014/06/15/phantomjs-creating-and-connecting-to-server/"/>
    <updated>2014-06-15T16:37:00-07:00</updated>
    <id>http://browniefed.com/blog/2014/06/15/phantomjs-creating-and-connecting-to-server</id>
    <content type="html"><![CDATA[<p>At my work we are a Java shop. So spinning up a server is quite a process. Additionally our static front end files are spread out across the system and we use RequireJS (ugh) to wrangle everything. Then in order to test we were running a selenium test to hit the test_runner page and wait for mocha to run and the tests. This is so unbelievably slow and quite hectic when it comes to managing relative paths of our config.</p>

<p>So to make things simpler I decided it&rsquo;d be in my best interest to use PhatonmJS. I decided to spin up a server using <code>var server = require('webserver').create();</code> and manage the requests and just route and serve up all the correct files. I thought this would work however I ran into a snag. Here is some sample code below</p>

<!-- more -->


<p>```
var server = require(&lsquo;webserver&rsquo;).create();
var url = &lsquo;localhost:8000&rsquo;
server.listen(url, function(){</p>

<pre><code>console.log('someone connected');
</code></pre>

<p>})</p>

<p>page.open(url, function(status) {</p>

<pre><code>console.log(status);
</code></pre>

<p>});
<code>``
Well I thought this would work based upon the docs but I was wrong.</code>status` would be success but the log on the server would never trigger. So I started mixing it up, here are a few things I tried.</p>

<p><code>var url = '127.0.0.1:8000'</code></p>

<p>```</p>

<p>server.listen(8000);</p>

<p>page.open(&lsquo;127.0.0.1:8000&rsquo;);</p>

<p>```</p>

<p>```</p>

<p>server.listen(8000, {keepAlive: true});</p>

<p>```</p>

<p>After spending an hour debugging and attempting to not flip a table I figured it out. Apparently the solution was to add <code>http</code>. Example:</p>

<p>```</p>

<p>server.listen(8000, {keepAlive: true}, function() {</p>

<pre><code>console.log('sucess');  
</code></pre>

<p>});</p>

<p>page.open(&lsquo;<a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>&rsquo;);</p>

<p>```</p>

<p>So I got it working, I was sending the files down but on larger files I was continually getting PhantomJS throwing <code>Parser errors</code>. I was setting proper content types and with <code>keep alive</code> connections you have to send the content lengths. The solution? Get rid of <code>keepAlive:true</code>. I was under the assumption it was necessary, it was also in my code when I actually got a successful connection so I assumed it was necessary. In the end it was very simple and probably a result of some minor idiocy on my part and slight lack of documentation.</p>

<p>If you ever need to have your unit test server up CSS/JS/HTML, even mock Rest API end points, server up mocked data (there are better ways to do this) then here is your PhantomJS solution.</p>

<p>```</p>

<p>var PORT = 8000,</p>

<pre><code>url = 'http://127.0.0.1:' + PORT,
server = require('webserver').create(),
page = require('webpage').create(),
fs = require('fs'),
system = require('system'); // This was used to take in args to change what PORT to connect to but not necessary for most people
</code></pre>

<p>var contentTypes = {</p>

<pre><code>'css': 'text/css',
'html': 'text/html',
'js': 'application/javascript',
'png': 'image/png',
'gif': 'image/gif',
'jpg': 'image/jpeg',
'jpeg': 'image/jpeg'
</code></pre>

<p>};</p>

<pre><code>server.listen(PORT, function(req, res) {


    var filePath = fs.workingDirectory + fs.separator + req.url.split('/').join(fs.separator), // make it OS agnostic
        fileName = req.url.split('/').shift().split('?')[0], //remove any query string
        ext = fileName.split('.').shift(),
        fileContent = '';

    res.statusCode = 200;
    res.headers = {
        "Cache": "no-cache", 
        "Content-Type": contentTypes[ext] || 'text/html' //no content type?
    };


    if (fs.isReadable(filePath)) {
        fileContent = fs.readFile(filePath);
    } else {
        res.statusCode = 404;
        //maybe 501? Your error codes may vary
    }

    res.write(fileContent);
    res.close();

});


page.open(url, function(status) {

    if (status !== 'success') {
        phantom.exit(1);
    }


})
</code></pre>

<p>```</p>

<p>This is very basic and assumes your running in the root of your files you need to server. In my case I wasn&rsquo;t and had to do some additional parsing and mapping of the URL to get the correct filepath but it should be a decent start for you.</p>
]]></content>
  </entry>
  
</feed>
