<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flexbox | JavaScript Without Grammar]]></title>
  <link href="http://browniefed.com/blog/categories/flexbox/atom.xml" rel="self"/>
  <link href="http://browniefed.com/"/>
  <updated>2015-07-28T15:42:51-07:00</updated>
  <id>http://browniefed.com/</id>
  <author>
    <name><![CDATA[Jason Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React-Native layout examples]]></title>
    <link href="http://browniefed.com/blog/2015/06/07/react-native-layout-examples/"/>
    <updated>2015-06-07T21:37:00-07:00</updated>
    <id>http://browniefed.com/blog/2015/06/07/react-native-layout-examples</id>
    <content type="html"><![CDATA[<p>Flexbox layout takes a bit getting used to. It&rsquo;s surprisngly simple but after so many years of box model css layout it throws you for a loop.</p>

<p>Some examples</p>

<h2>Percentage height sections</h2>

<p>These are seemingly simple to do in CSS. Specify <code>height: 50%</code> and you get a magical 50% height. Yeah I&rsquo;m over simplifying it but in general that&rsquo;s what you get. In flex it&rsquo;s different.</p>

<p>This percentage based layout question was asked here <a href="https://github.com/facebook/react-native/issues/364">https://github.com/facebook/react-native/issues/364</a>.</p>

<p>Laying out login screens may require significant white space. To accomplish % based layout we can use the <code>flex</code> property along with <code>flexDirection</code>.</p>

<p>Say you want 3 sections. Top <code>50%</code>, then two <code>25%</code> sections.</p>

<p>Our code would look something like this</p>

<p>```
var SampleApp = React.createClass({
  render: function() {</p>

<pre><code>  return (
      &lt;View style={styles.container}&gt;
          &lt;View style={styles.halfHeight} /&gt;
          &lt;View style={styles.quarterHeight} /&gt;
          &lt;View style={[styles.quarterHeight, {backgroundColor: '#CCC'}]} /&gt;
      &lt;/View&gt;
  )
</code></pre>

<p>  }
});</p>

<p>var styles = StyleSheet.create({</p>

<pre><code>container: {
    flex: 1,
    flexDirection: 'column'
},
halfHeight: {
    flex: .5,
    backgroundColor: '#FF3366'
},
quarterHeight: {
    flex: .25,
    backgroundColor: '#000'
}
</code></pre>

<p>});</p>

<p>```</p>

<p>This makes it look like percentages, however what actually is happening is just ratios.</p>

<p>The ratios are easier to represent with non-decimals. Equivalent code to the above would look like.</p>

<p>```
var styles = StyleSheet.create({</p>

<pre><code>container: {
    flex: 1,
    flexDirection: 'column'
},
halfHeight: {
    flex: 2,
    backgroundColor: '#FF3366'
},
quarterHeight: {
    flex: 1,
    backgroundColor: '#000'
}
</code></pre>

<p>});</p>

<p>```</p>

<p>That&rsquo;s saying that the <code>halfHeight</code> container should take up twice as much space, and the <code>quarterHeight</code> should take up one amount of space.
The actual numbers depend on screen size, and/or also derived from parent containers. So we can&rsquo;t attach specific heights.</p>

<p>It just means &ldquo; <code>halfHeight</code> should take up 2 units of height where <code>quarterHeight</code> takes up 1 unit/half as much height as the <code>halfHeight</code> container&rdquo;.</p>

<p><img class="<a" src="href="http://i.imgur.com/k4RI8Og.png">http://i.imgur.com/k4RI8Og.png</a>" title="Percentage based layout" ></p>

<p>You can check out a live demo here <a href="https://rnplay.org/apps/MbQEbQ">https://rnplay.org/apps/MbQEbQ</a></p>

<h2>React-Native Example Screens</h2>

<p>Not being very good at flexbox I figured what better way than to create a bunch of layout examples to practice.
That&rsquo;s when I saw <a href="http://www.invisionapp.com/do">http://www.invisionapp.com/do</a>. It has a bunch of beautiful layouts, so I am attempting to recreate some.</p>

<p>You can check out the repo here <a href="https://github.com/browniefed/react-native-screens">https://github.com/browniefed/react-native-screens</a></p>

<p>I&rsquo;ve made them all runnable on <code>rnplay.org</code>.</p>

<h4>Example: Login1</h4>

<p><a href="https://rnplay.org/apps/x7HRCA">https://rnplay.org/apps/x7HRCA</a></p>

<p><img class="<a" src="href="https://i.imgur.com/ceB0t2Z.png">https://i.imgur.com/ceB0t2Z.png</a>" title="Login1 Example" ></p>

<p>If you like this, feel free to contribute and download the screens from <a href="http://www.invisionapp.com/do">http://www.invisionapp.com/do</a>. I found the Sketch ones were the easiest to handle and export individual assets from.</p>
]]></content>
  </entry>
  
</feed>
