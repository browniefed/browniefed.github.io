<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: css | JavaScript Without Grammar]]></title>
  <link href="http://browniefed.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://browniefed.com/"/>
  <updated>2017-06-02T15:53:09-07:00</updated>
  <id>http://browniefed.com/</id>
  <author>
    <name><![CDATA[Jason Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS Modules, Webpack and Testing]]></title>
    <link href="http://browniefed.com/blog/css-modules-webpack-and-testing/"/>
    <updated>2016-01-31T12:58:00-08:00</updated>
    <id>http://browniefed.com/blog/css-modules-webpack-and-testing</id>
    <content type="html"><![CDATA[<h2>The Problem</h2>

<p>When getting into some basic React testing with CSS Modules I ran into one issue. How the hell do I test them?</p>

<p>You may see the issue that I faced requiring a <code>.css</code> file, if you don&rsquo;t let me show you.</p>

<p>```
import React from &ldquo;react&rdquo;;
import MyCss from &ldquo;./somecss.css&rdquo;;
import classnames from &ldquo;classnames&rdquo;;</p>

<p>const MyComponent = ({disabled}) => <div className={classnames(MyCss.container, {[MyCss.disabled]: disabled})} /></p>

<p>export default MyComponent;
```</p>

<p>So there isn&rsquo;t really much to test here, but lets say we wanted to make sure that a <code>div</code> had the disabled class when it was given a disabled prop.
We fire up our test, create it, babel compiles, but oh no, <code>MyCss</code> is undefined, or an empty object. Well duh, we&rsquo;re using Webpack to process our CSS.</p>

<p>For that matter we could use something to mock the import right? Yeah you could but lets introduce something even more awesome so we don&rsquo;t have to create custom mocks.</p>

<h2>Babel Plugin Webpack Loaders Awesomeness</h2>

<p><a href="https://github.com/istarkov/babel-plugin-webpack-loaders">Babel Plugin Webpack Loaders</a> allows us to run our tests and process all requires through our typical webpack loaders.</p>

<!-- more -->


<p>So when we&rsquo;re writing our tests to check out if <code>MyComponent</code> will have the disabled class we can just <code>import</code> the file into our test and know that it&rsquo;ll actually provide the processed CSS Modules!</p>

<p>```
//Test Imports of React, Addons for shallow rendering, teaspoon, maybe enzyme?</p>

<p>import MyCss from &ldquo;./somecss.css&rdquo;;</p>

<p>//Do some shallow rendering of <MyComponent disabled={true} /></p>

<p>expect(renderedOutput.className).toHaveClass(MyCss.disabled);
```</p>

<p>Yeah that&rsquo;s not actual code, but you get the point. Our <a href="https://github.com/istarkov/babel-plugin-webpack-loaders">Babel Plugin Webpack Loaders</a> processed all our imports for us and away we go.</p>

<p>What does the setup look like for that?</p>

<h2>Setup</h2>

<p>I created a new <code>runtime.webpack.config.js</code> file. They even provide you with a basic one, I realized that after the fact. <a href="https://raw.githubusercontent.com/istarkov/babel-plugin-webpack-loaders/master/examples_webpack_configs/run.webpack.config.js">runtime.webpack.config.js</a></p>

<p>```
module.exports = {
  output: {</p>

<pre><code>// YOU NEED TO SET libraryTarget: 'commonjs2'
libraryTarget: 'commonjs2',
</code></pre>

<p>  },
  module: {</p>

<pre><code>loaders: [
  {
    test: /\.css$/,
    loaders: [
      'style-loader',
      'css-loader?modules&amp;importLoaders=1&amp;localIdentName=[name]__[local]--[hash:base64:5]',
      'postcss-loader',
    ],
  },
],
</code></pre>

<p>  },
};
```</p>

<p>Created my <code>.babelrc</code> file and added in the plugin like so
```
{
  &ldquo;presets&rdquo;: [</p>

<pre><code>"es2015",
"react"
</code></pre>

<p>  ],
  &ldquo;plugins&rdquo;: [</p>

<pre><code>"transform-object-rest-spread"
</code></pre>

<p>  ],
  &ldquo;env&rdquo;: {</p>

<pre><code>"test": {
  "plugins": [
    [
      "babel-plugin-webpack-loaders",
      {
        "config": "./runtime.webpack.config.js",
        "verbose": false
      }
    ]
  ]
}
</code></pre>

<p>  }
}
```</p>

<p>You can see we only use this plugin when we set our node environment variable to <code>test</code>.</p>

<p>Then for our test running we&rsquo;ll use <code>mocha</code> so we&rsquo;ll need to set that up like so</p>

<p><code>
scripts: {
  test: "BABEL_DISABLE_CACHE=1 NODE_ENV=test mocha --compilers js:babel-register --recursive"
}
</code></p>

<p>Or however you have your testing setup. Moral of the story is set the <code>NODE_ENV</code> to <code>test</code>, do your <code>Babel</code> stuff for testing, and let the magic happen!</p>

<p>Of course this focuses on <code>css-modules</code> specifically but all your Webpack plugins will run so test at will!</p>

<p>Also check out <a href="https://github.com/nkbt/react-component-template">react-component-template</a> by <a href="https://github.com/nkbt">nkbt</a>. A great base for creating a custom react component, using tape for testing, as well as <code>babel-plugin-webpack-loaders</code> to process tests.</p>

<h2>Words of warning</h2>

<p>Just create a new Webpack config, or a configuration that outputs your app to <code>libraryTarget</code> correctly. I opted for a new Webpack config but mine is fairly simple at the moment.</p>

<p>Also if you ever get <code>ModuleBuildError: Module build failed: TypeError: Cannot read property 'toString' of undefined</code> that means you have some bad CSS. I should have read a little bit more, was getting issues with <code>parser</code> in PostCSS and had left off a closing <code>}</code>.</p>

<p>A CSS linter, and or a PostCSS linter probably would have caught this? I don&rsquo;t know, just know that I spent too much time being very confused when it was just human error causing the problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Shapes of React Native]]></title>
    <link href="http://browniefed.com/blog/the-shapes-of-react-native/"/>
    <updated>2015-09-10T08:21:00-07:00</updated>
    <id>http://browniefed.com/blog/the-shapes-of-react-native</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>After drawing a bit of inspiration from <a href="https://css-tricks.com/examples/ShapesOfCSS/">The Shapes of CSS</a> I decided to see if I could remake some of these shapes with a subset of css. If you haven&rsquo;t been on css-tricks check them out, <a href="http://chriscoyier.net/">Chris Coyier</a> is fantastic!</p>

<p>Of course we have access to <code>react-art</code> here so drawing shapes is pretty simple but my goal is to see if I can just use normal <code>Views</code> and all of the styles I have at my exposure to make as many shapes as I can off of the Shapes of CSS list.</p>

<p>Some of these are obvious and some of them get a little crazy but most of them are all hacks in the first place!</p>

<p>I&rsquo;m going on vacation for a month. So this shall be dubbed &ldquo;One of the more pointless blog posts on my blog written out of sheer tiredness&rdquo;.</p>

<p><img class="<a" src="href="http://i.imgur.com/cWR7FKh.gif">http://i.imgur.com/cWR7FKh.gif</a>" title="What am doing with my life" ></p>

<!-- more -->


<h2>Live Code <a href="https://rnplay.org/apps/58FEmw">https://rnplay.org/apps/58FEmw</a></h2>

<h1>Key Takeaways</h1>

<ul>
<li>I wish border-radius worked a little more like the web</li>
<li>Box Shadow would be nice to have as well.</li>
<li>Skew transform would be a nice to have.</li>
<li>Just use SVGs&hellip;</li>
</ul>


<h1>Shapes</h1>

<h3>Square</h3>

<p>Pretty simple&hellip;</p>

<p><img class="<a" src="href="http://i.imgur.com/yNqQt2q.png">http://i.imgur.com/yNqQt2q.png</a>" title="Yeah what were you expecting" ></p>

<p>```
var Square = React.createClass({</p>

<pre><code>render: function() {
    return (
        &lt;View style={styles.square} /&gt;
    )
}
</code></pre>

<p>});</p>

<p>square: {</p>

<pre><code>width: 100,
height: 100,
backgroundColor: 'red'
</code></pre>

<p>}</p>

<p>```</p>

<h3>Rectangle</h3>

<p>Nothing too crazy here either</p>

<p><img class="<a" src="href="http://i.imgur.com/Eiw8qTZ.png">http://i.imgur.com/Eiw8qTZ.png</a>" title="It is a longer square" ></p>

<p>```
var Rectangle = React.createClass({</p>

<pre><code>render: function() {
    return (
        &lt;View style={styles.rectangle} /&gt;
    )
}
</code></pre>

<p>});</p>

<p>rectangle: {</p>

<pre><code>width: 100 * 2,
height: 100,
backgroundColor: 'red'
</code></pre>

<p>}</p>

<p>```</p>

<h3>Circle</h3>

<p>One note to mention about border radius is that it doesn&rsquo;t work like the web. So if you go more than 50% you&rsquo;ll start forming a weird diamondy shape.</p>

<p><img class="<a" src="href="http://i.imgur.com/Monc4Mx.png">http://i.imgur.com/Monc4Mx.png</a>" title="The circle was invented in 1925" ></p>

<p>```
var Circle = React.createClass({</p>

<pre><code>render: function() {
    return (
        &lt;View style={styles.circle} /&gt;
    )
}
</code></pre>

<p>})</p>

<p>circle: {</p>

<pre><code>width: 100,
height: 100,
borderRadius: 100/2,
backgroundColor: 'red'
</code></pre>

<p>}</p>

<p>```</p>

<h3>Oval</h3>

<p>Border radius wasn&rsquo;t working, lets just do a circle and scale it&hellip;</p>

<p><img class="<a" src="href="http://i.imgur.com/pHxlyNn.png">http://i.imgur.com/pHxlyNn.png</a>" title="Not a circle" ></p>

<p>```</p>

<p>var Oval = React.createClass({</p>

<pre><code>render: function() {
    return (
        &lt;View style={styles.oval} /&gt;
    )
}
</code></pre>

<p>});</p>

<p>  oval: {</p>

<pre><code>width: 100,
height: 100,
borderRadius: 50,
backgroundColor: 'red',
transform: [
  {scaleX: 2}
]
</code></pre>

<p>  },
```</p>

<h3>Triangle Up</h3>

<p>CSS border triangles still work in React Native.</p>

<p><img class="<a" src="href="http://i.imgur.com/cejjWpe.png">http://i.imgur.com/cejjWpe.png</a>" title="Pyramid in 2d" ></p>

<p>```
var Triangle = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={[styles.triangle, this.props.style]} /&gt;
)
</code></pre>

<p>  }
})</p>

<p>  triangle: {</p>

<pre><code>width: 0,
height: 0,
backgroundColor: 'transparent',
borderStyle: 'solid',
borderLeftWidth: 50,
borderRightWidth: 50,
borderBottomWidth: 100,
borderLeftColor: 'transparent',
borderRightColor: 'transparent',
borderBottomColor: 'red'
</code></pre>

<p>  }</p>

<p>```</p>

<p>Here we get to cheat a bit. You could do this on the web too, but rather than adjust the borders we&rsquo;ll just rotate it.</p>

<h3>Triangle Down</h3>

<p><img class="<a" src="href="http://i.imgur.com/gwJ9EdU.png">http://i.imgur.com/gwJ9EdU.png</a>" title="Rotate" >
```
var TriangleDown = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;Triangle style={styles.triangleDown}/&gt;
)
</code></pre>

<p>  }</p>

<p>  triangleDown: {</p>

<pre><code>transform: [
  {rotate: '180deg'}
]
</code></pre>

<p>  }
```</p>

<h3>Triangle Left</h3>

<p><img class="<a" src="href="http://i.imgur.com/SlY2Bvf.png">http://i.imgur.com/SlY2Bvf.png</a>" title="Rotate" ></p>

<p>```
var TriangleLeft = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;Triangle style={styles.triangleLeft}/&gt;
)
</code></pre>

<p>  }
})</p>

<p>  triangleLeft: {</p>

<pre><code>transform: [
  {rotate: '-90deg'}
]
</code></pre>

<p>  }
```</p>

<h3>Triangle Right</h3>

<p><img class="<a" src="href="http://i.imgur.com/UTFvVL6.png">http://i.imgur.com/UTFvVL6.png</a>" title="Konami Code" ></p>

<p>```</p>

<p>var TriangleRight = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;Triangle style={styles.triangleRight}/&gt;
)
</code></pre>

<p>  }
})</p>

<p>  triangleRight: {</p>

<pre><code>transform: [
  {rotate: '90deg'}
]
</code></pre>

<p>  },</p>

<p>```</p>

<p>Again we&rsquo;ll cheat here and go for the rotation!</p>

<h3>Triangle Top Left</h3>

<p><img class="<a" src="href="http://i.imgur.com/aToWUAu.png">http://i.imgur.com/aToWUAu.png</a>" title="Pythagorean theory" >
```
var TriangleCorner = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={[styles.triangleCorner, this.props.style]} /&gt;
)
</code></pre>

<p>  }
});</p>

<p>  triangleCorner: {</p>

<pre><code>width: 0,
height: 0,
backgroundColor: 'transparent',
borderStyle: 'solid',
borderRightWidth: 100,
borderTopWidth: 100,
borderRightColor: 'transparent',
borderTopColor: 'red'
</code></pre>

<p>  },</p>

<p>```</p>

<h3>Triangle Top Right</h3>

<p><img class="<a" src="href="http://i.imgur.com/Ei1GaY4.png">http://i.imgur.com/Ei1GaY4.png</a>" title="sohcahtoa" ></p>

<p>```
var TriangleCornerTopRight = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;TriangleCorner style={styles.triangleCornerTopRight}/&gt;
)
</code></pre>

<p>  }
})</p>

<p>triangleCornerTopRight: {</p>

<pre><code>transform: [
  {rotate: '90deg'}
]
</code></pre>

<p>}</p>

<p>```</p>

<h3>Triangle Bottom Left</h3>

<p><img class="<a" src="href="http://i.imgur.com/tDtSN8B.png">http://i.imgur.com/tDtSN8B.png</a>" title="ninety degree angle" ></p>

<p>```
var TriangleCornerBottomLeft = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;TriangleCorner style={styles.triangleCornerBottomLeft}/&gt;
)
</code></pre>

<p>  }
})</p>

<p>  triangleCornerBottomLeft: {</p>

<pre><code>transform: [
  {rotate: '270deg'}
]
</code></pre>

<p>  },
```</p>

<h3>Triangle Bottom Right</h3>

<p><img class="<a" src="href="http://i.imgur.com/JbnkwkK.png">http://i.imgur.com/JbnkwkK.png</a>" title="sick ramp bro" ></p>

<p>```
var TriangleCornerBottomRight = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;TriangleCorner style={styles.triangleCornerBottomRight}/&gt;
)
</code></pre>

<p>  }
})</p>

<p>  triangleCornerBottomRight: {</p>

<pre><code>transform: [
  {rotate: '180deg'}
]
</code></pre>

<p>  }</p>

<p>```</p>

<h3>Curved Tail Arrow</h3>

<p>Well we don&rsquo;t have the ability to do pseudo elements but they were just hacks anyway so we&rsquo;ll just create a wrapping <code>View</code> with 2 elements and style them.
Now this is not exactly the same, and it&rsquo;s partially due to the way <code>border-radius</code> are managed in react-native vs the web but it&rsquo;s closeish.</p>

<p><img class="<a" src="href="http://i.imgur.com/Y2IEMxh.png">http://i.imgur.com/Y2IEMxh.png</a>" title="Just use an image" ></p>

<p>```</p>

<p>var CurvedTailArrow = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.curvedTailArrow}&gt;
    &lt;View style={styles.curvedTailArrowTail} /&gt;
    &lt;View style={styles.curvedTailArrowTriangle} /&gt;
  &lt;/View&gt;
)
</code></pre>

<p>  }
})</p>

<p>  curvedTailArrow: {</p>

<pre><code>backgroundColor: 'transparent',
overflow: 'visible',
width: 30,
height: 25
</code></pre>

<p>  },
  curvedTailArrowTriangle: {</p>

<pre><code>backgroundColor: 'transparent',
width: 0,
height: 0,
borderTopWidth: 9,
borderTopColor: 'transparent',
borderRightWidth: 9,
borderRightColor: 'red',
borderStyle: 'solid',
transform: [
  {rotate: '10deg'}
],
position: 'absolute',
bottom: 9,
right: 3,
overflow: 'visible'
</code></pre>

<p>  },
  curvedTailArrowTail: {</p>

<pre><code>backgroundColor: 'transparent',
position: 'absolute',
borderBottomColor: 'transparent',
borderLeftColor: 'transparent',
borderRightColor: 'transparent',
borderBottomWidth: 0,
borderLeftWidth: 0,
borderRightWidth: 0,
borderTopWidth: 3,
borderTopColor: 'red',
borderStyle: 'solid',
borderTopLeftRadius: 12,
top: 1,
left: 0,
width: 20,
height: 20,
transform: [
  {rotate: '45deg'}
]
</code></pre>

<p>  }
```</p>

<h3>Trapezoid</h3>

<p>The difference with this one is we had to double our width. Why? I don&rsquo;t know.</p>

<p><img class="<a" src="href="http://i.imgur.com/Mu3NLyN.png">http://i.imgur.com/Mu3NLyN.png</a>" title="Trapezoid" ></p>

<p>```
var Trapezoid = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.trapezoid} /&gt;
)
</code></pre>

<p>  }
})</p>

<p>  trapezoid: {</p>

<pre><code>width: 200,
height: 0,
borderBottomWidth: 100,
borderBottomColor: 'red',
borderLeftWidth: 50,
borderLeftColor: 'transparent',
borderRightWidth: 50,
borderRightColor: 'transparent',
borderStyle: 'solid'
</code></pre>

<p>  }
```</p>

<h3>Parallelogram</h3>

<p>If only we had skew. :(
Luckily we have the triangles we created earlier.</p>

<p><img class="<a" src="href="http://i.imgur.com/AtXb6rq.png">http://i.imgur.com/AtXb6rq.png</a>" title="Dont try this at home" ></p>

<p>```</p>

<p>var Parallelogram = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.parallelogram}&gt;
    &lt;TriangleUp style={styles.parallelogramRight} /&gt;
    &lt;View style={styles.parallelogramInner} /&gt;
    &lt;TriangleDown style={styles.parallelogramLeft} /&gt;
  &lt;/View&gt;
)
</code></pre>

<p>  }
})</p>

<p>  parallelogram: {</p>

<pre><code>width: 150,
height: 100
</code></pre>

<p>  },
  parallelogramInner: {</p>

<pre><code>position: 'absolute',
left: 0,
top: 0,
backgroundColor: 'red',
width: 150,
height: 100,
</code></pre>

<p>  },
  parallelogramRight: {</p>

<pre><code>top: 0,
right: -50,
position: 'absolute'
</code></pre>

<p>  },
  parallelogramLeft: {</p>

<pre><code>top: 0,
left: -50,
position: 'absolute'
</code></pre>

<p>  }</p>

<p>```</p>

<h3>Star (6-points)</h3>

<p>These Triangles sure are coming in handy.</p>

<p><img class="<a" src="href="http://i.imgur.com/XEPeWjV.png">http://i.imgur.com/XEPeWjV.png</a>" title="This is really ugly, someone should make it look better" ></p>

<p>```
var StarSix = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.starsix}&gt;
    &lt;TriangleUp style={styles.starSixUp} /&gt;
    &lt;TriangleDown style={styles.starSixDown} /&gt;
  &lt;/View&gt;
)
</code></pre>

<p>  }
})</p>

<p>  starsix: {</p>

<pre><code>width: 100,
height: 100
</code></pre>

<p>  },
  starSixUp: {</p>

<pre><code>position: 'absolute',
top: 0,
left: 0
</code></pre>

<p>  },
  starSixDown: {</p>

<pre><code>position: 'absolute',
top: 25,
left: 0
</code></pre>

<p>  }</p>

<p>```</p>

<h3>Star (5-points)</h3>

<p>Yaye <code>TriangleUp</code> is killing it. This one is REALLY hacky with the placement, could use some fine tuning.</p>

<p><img class="<a" src="href="http://i.imgur.com/hUvOTUx.png">http://i.imgur.com/hUvOTUx.png</a>" title="Basically a starfish" ></p>

<p>```</p>

<p>var StarFive = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.starfive}&gt;
    &lt;TriangleUp style={styles.starfiveTop} /&gt;
    &lt;View style={styles.starfiveBefore} /&gt;
    &lt;View style={styles.starfiveAfter} /&gt;
  &lt;/View&gt;
)
</code></pre>

<p>  }
})</p>

<p>  starfive: {</p>

<pre><code>width: 150,
height: 150,
</code></pre>

<p>  },
  starfiveTop: {</p>

<pre><code>position: 'absolute',
top: -45,
left: 37
</code></pre>

<p>  },
  starfiveBefore: {</p>

<pre><code>backgroundColor: 'transparent',
position: 'absolute',
left: 0,
top: 0,
borderStyle: 'solid',
borderRightWidth: 100,
borderRightColor: 'transparent',
borderBottomWidth: 70,
borderBottomColor: 'red',
borderLeftWidth: 100,
borderLeftColor: 'transparent',
transform: [
  { rotate: '35deg'}
]
</code></pre>

<p>  },
  starfiveAfter: {</p>

<pre><code>backgroundColor: 'transparent',
position: 'absolute',
top: 0,
left: -25,
width: 0,
height: 0,
borderStyle: 'solid',
borderRightWidth: 100,
borderRightColor: 'transparent',
borderBottomWidth: 70,
borderBottomColor: 'red',
borderLeftWidth: 100,
borderLeftColor: 'transparent',
transform: [
  { rotate: '-35deg'}
]
</code></pre>

<p>  }
```</p>

<h3>Pentagon</h3>

<p>No <code>TriangleUp</code> here but we could have used a Corner Triangle with rotate.</p>

<p><img class="<a" src="href="http://i.imgur.com/LEDmb24.png">http://i.imgur.com/LEDmb24.png</a>" title="I hate geometry" ></p>

<p>```
var Pentagon = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.pentagon}&gt;
    &lt;View style={styles.pentagonInner} /&gt;
    &lt;View style={styles.pentagonBefore} /&gt;
  &lt;/View&gt;
)
</code></pre>

<p>  }
})</p>

<p>  pentagon: {</p>

<pre><code>backgroundColor: 'transparent'
</code></pre>

<p>  },
  pentagonInner: {</p>

<pre><code>width: 90,
borderBottomColor: 'red',
borderBottomWidth: 0,
borderLeftColor: 'transparent',
borderLeftWidth: 18,
borderRightColor: 'transparent',
borderRightWidth: 18,
borderTopColor: 'red',
borderTopWidth: 50
</code></pre>

<p>  },
  pentagonBefore: {</p>

<pre><code>position: 'absolute',
height: 0,
width: 0,
top: -35,
left: 0,
borderStyle: 'solid',
borderBottomColor: 'red',
borderBottomWidth: 35,
borderLeftColor: 'transparent',
borderLeftWidth: 45,
borderRightColor: 'transparent',
borderRightWidth: 45,
borderTopWidth: 0,
borderTopColor: 'transparent',
</code></pre>

<p>  }
```</p>

<h3>Hexagon</h3>

<p>2 Triangles and a square. Everything is just shapes.</p>

<p><img class="<a" src="href="http://i.imgur.com/djNMGNg.png">http://i.imgur.com/djNMGNg.png</a>" title="Honeycomb" ></p>

<p>```</p>

<p>var Hexagon = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.hexagon}&gt;
    &lt;View style={styles.hexagonInner} /&gt;
    &lt;View style={styles.hexagonBefore} /&gt;
    &lt;View style={styles.hexagonAfter} /&gt;
  &lt;/View&gt;
)
</code></pre>

<p>  }
})</p>

<p>  hexagon: {</p>

<pre><code>width: 100,
height: 55
</code></pre>

<p>  },
  hexagonInner: {</p>

<pre><code>width: 100,
height: 55,
backgroundColor: 'red'
</code></pre>

<p>  },
  hexagonAfter: {</p>

<pre><code>position: 'absolute',
bottom: -25,
left: 0,
width: 0,
height: 0,
borderStyle: 'solid',
borderLeftWidth: 50,
borderLeftColor: 'transparent',
borderRightWidth: 50,
borderRightColor: 'transparent',
borderTopWidth: 25,
borderTopColor: 'red'
</code></pre>

<p>  },
  hexagonBefore: {</p>

<pre><code>position: 'absolute',
top: -25,
left: 0,
width: 0,
height: 0,
borderStyle: 'solid',
borderLeftWidth: 50,
borderLeftColor: 'transparent',
borderRightWidth: 50,
borderRightColor: 'transparent',
borderBottomWidth: 25,
borderBottomColor: 'red'
</code></pre>

<p>  }</p>

<p>```</p>

<h3>Octagon</h3>

<p>I attempted copied the css on this one but it required setting a background color, so I did 4 bars and just rotated them. Slightly more markup but this is just for fun.</p>

<p><img class="<a" src="href="http://i.imgur.com/i5drMtB.png">http://i.imgur.com/i5drMtB.png</a>" title="Stop!" ></p>

<p>```
var Octagon = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.octagon}&gt;
    &lt;View style={[styles.octagonUp, styles.octagonBar]} /&gt;
    &lt;View style={[styles.octagonFlat, styles.octagonBar]} /&gt;
    &lt;View style={[styles.octagonLeft, styles.octagonBar]} /&gt;
    &lt;View style={[styles.octagonRight, styles.octagonBar]} /&gt;
  &lt;/View&gt;
)
</code></pre>

<p>  }
})</p>

<p>  octagon: {},
  octagonBar: {</p>

<pre><code>width: 42,  
height: 100,
backgroundColor: 'red'
</code></pre>

<p>  },
  octagonUp: {},
  octagonFlat: {</p>

<pre><code>position: 'absolute',
top: 0,
left: 0,
transform: [
  {rotate: '90deg'}
]
</code></pre>

<p>  },
  octagonLeft: {</p>

<pre><code>position: 'absolute',
top: 0,
left: 0,
transform: [
  {rotate: '-45deg'}
]
</code></pre>

<p>  },
  octagonRight: {</p>

<pre><code>position: 'absolute',
top: 0,
left: 0,
transform: [
  {rotate: '45deg'}
]
</code></pre>

<p>  }
```</p>

<h3>Heart</h3>

<p>This one is easy since well I already had it done for my previous tutorial.</p>

<p><img class="<a" src="href="http://i.imgur.com/uBAv2eJ.png">http://i.imgur.com/uBAv2eJ.png</a>" title="in the name of love" ></p>

<p>```
var Heart = React.createClass({</p>

<pre><code>render: function() {
    return (
        &lt;View {...this.props} style={[styles.heart, this.props.style]}&gt;
            &lt;View style={styles.leftHeart} /&gt;
            &lt;View style={styles.rightHeart} /&gt;
        &lt;/View&gt;
    )
}
</code></pre>

<p>})</p>

<p>  heart: {</p>

<pre><code>width: 50,
height: 50
</code></pre>

<p>  },
  heartShape: {</p>

<pre><code>width: 30,
height: 45,
position: 'absolute',
top: 0,
borderTopLeftRadius: 15,
borderTopRightRadius: 15,
backgroundColor: '#6427d1',
</code></pre>

<p>  },
  leftHeart: {</p>

<pre><code>transform: [
    {rotate: '-45deg'}
],
left: 5
</code></pre>

<p>  },
  rightHeart: {</p>

<pre><code>transform: [
    {rotate: '45deg'}
],
right: 5
</code></pre>

<p>  }
```</p>

<h3>Infinity</h3>

<p>Width and border radius all work oddly together. So baby infinity? Scale it up if you want it bigger.</p>

<p><img class="<a" src="href="http://i.imgur.com/7Ykpa06.png">http://i.imgur.com/7Ykpa06.png</a>" title="This could be animated and you would have no idea" ></p>

<p>```
var Infinity = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.infinity}&gt;
    &lt;View style={styles.infinityBefore} /&gt;
    &lt;View style={styles.infinityAfter} /&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})</p>

<p>  infinity: {</p>

<pre><code>width: 80,
height: 100,
</code></pre>

<p>  },
  infinityBefore: {</p>

<pre><code>position: 'absolute',
top: 0,
left: 0,
width: 0,
height: 0,
borderWidth: 20,
borderColor: 'red',
borderStyle: 'solid',
borderTopLeftRadius: 50,
borderTopRightRadius: 50,
borderBottomRightRadius: 50,
borderBottomLeftRadius: 0,
transform: [
  {rotate: '-135deg'}
]
</code></pre>

<p>  },
  infinityAfter: {</p>

<pre><code>position: 'absolute',
top: 0,
right: 0,
width: 0,
height: 0,
borderWidth: 20,
borderColor: 'red',
borderStyle: 'solid',
borderTopLeftRadius: 50,
borderTopRightRadius: 0,
borderBottomRightRadius: 50,
borderBottomLeftRadius: 50,
transform: [
  {rotate: '-135deg'}
]
</code></pre>

<p>  }
```</p>

<h3>Diamond Square</h3>

<p>This was more than just a rotated square. Am I missing something?</p>

<p><img class="<a" src="href="http://i.imgur.com/gAL9dfq.png">http://i.imgur.com/gAL9dfq.png</a>" title="Not a blood diamond" ></p>

<p>```</p>

<p>var Diamond = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.diamond} /&gt;
)
</code></pre>

<p>  }
})</p>

<p>  diamond:{</p>

<pre><code>width: 50,
height: 50,
backgroundColor: 'red',
transform: [
  {rotate: '45deg'}
]    
</code></pre>

<p>  }</p>

<p>```</p>

<h3>Diamond Shield</h3>

<p>Just 2 triangles, thought this one was going to be harder.</p>

<p><img class="<a" src="href="http://i.imgur.com/4S6FDMo.png">http://i.imgur.com/4S6FDMo.png</a>" title="also just a kite" ></p>

<p>```</p>

<p>var DiamondShield = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.diamondShield}&gt;
    &lt;View style={styles.diamondShieldTop} /&gt;
    &lt;View style={styles.diamondShieldBottom} /&gt;
  &lt;/View&gt;
)
</code></pre>

<p>  }
})</p>

<p>  diamondShield: {</p>

<pre><code>width: 100,
height: 100
</code></pre>

<p>  },
  diamondShieldTop: {</p>

<pre><code>width: 0,
height: 0,
borderTopWidth: 50,
borderTopColor: 'transparent',
borderLeftColor: 'transparent',
borderLeftWidth: 50,
borderRightColor: 'transparent',
borderRightWidth: 50,
borderBottomColor: 'red',
borderBottomWidth: 20,
</code></pre>

<p>  },
  diamondShieldBottom: {</p>

<pre><code>width: 0,
height: 0,
borderTopWidth: 70,
borderTopColor: 'red',
borderLeftColor: 'transparent',
borderLeftWidth: 50,
borderRightColor: 'transparent',
borderRightWidth: 50,
borderBottomColor: 'transparent',
borderBottomWidth: 50,
</code></pre>

<p>  }
```</p>

<h3>Diamond Narrow</h3>

<p>Another 2 triangles that could have been the same and rotated. This way works too.</p>

<p><img class="<a" src="href="http://i.imgur.com/cRwI61S.png">http://i.imgur.com/cRwI61S.png</a>" title="Diamond on a diet" ></p>

<p>```
var DiamondNarrow = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.diamondNarrow}&gt;
    &lt;View style={styles.diamondNarrowTop} /&gt;
    &lt;View style={styles.diamondNarrowBottom} /&gt;
  &lt;/View&gt;
)
</code></pre>

<p>  }
})</p>

<p>  diamondNarrow: {</p>

<pre><code>width: 100,
height: 100
</code></pre>

<p>  },
  diamondNarrowTop: {</p>

<pre><code>width: 0,
height: 0,
borderTopWidth: 50,
borderTopColor: 'transparent',
borderLeftColor: 'transparent',
borderLeftWidth: 50,
borderRightColor: 'transparent',
borderRightWidth: 50,
borderBottomColor: 'red',
borderBottomWidth: 70,  
</code></pre>

<p>  },
  diamondNarrowBottom: {</p>

<pre><code>width: 0,
height: 0,
borderTopWidth: 70,
borderTopColor: 'red',
borderLeftColor: 'transparent',
borderLeftWidth: 50,
borderRightColor: 'transparent',
borderRightWidth: 50,
borderBottomColor: 'transparent',
borderBottomWidth: 50, 
</code></pre>

<p>  }</p>

<p>```</p>

<h3>Cut Diamond</h3>

<p>The top could have been used for the octagon, I chose a different way though.</p>

<p><img class="<a" src="href="http://i.imgur.com/yZNHZP0.png">http://i.imgur.com/yZNHZP0.png</a>" title="Now that is a diamond" ></p>

<p>```</p>

<p>var CutDiamond = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.cutDiamond}&gt;
    &lt;View style={styles.cutDiamondTop} /&gt;
    &lt;View style={styles.cutDiamondBottom} /&gt;
  &lt;/View&gt;
)
</code></pre>

<p>  }
})</p>

<p>  cutDiamond: {</p>

<pre><code>width: 100,
height: 100,
</code></pre>

<p>  },
  cutDiamondTop: {</p>

<pre><code>width: 100,
height: 0,
borderTopWidth: 0,
borderTopColor: 'transparent',
borderLeftColor: 'transparent',
borderLeftWidth: 25,
borderRightColor: 'transparent',
borderRightWidth: 25,
borderBottomColor: 'red',
borderBottomWidth: 25, 
</code></pre>

<p>  },
  cutDiamondBottom: {</p>

<pre><code>width: 0,
height: 0,
borderTopWidth: 70,
borderTopColor: 'red',
borderLeftColor: 'transparent',
borderLeftWidth: 50,
borderRightColor: 'transparent',
borderRightWidth: 50,
borderBottomColor: 'transparent',
borderBottomWidth: 0, 
</code></pre>

<p>  }
```</p>

<h3>Egg</h3>

<p>Circular things are hard to do in RN. This is eggish.</p>

<p><img class="<a" src="href="http://i.imgur.com/0v5tH4x.png">http://i.imgur.com/0v5tH4x.png</a>" title="Her?" ></p>

<p><img class="<a" src="href="http://i.imgur.com/27Rbo3x.gif">http://i.imgur.com/27Rbo3x.gif</a>" title="Egg?" ></p>

<p>```
var Egg = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.egg} /&gt;
)
</code></pre>

<p>  }
})</p>

<p>  egg: {</p>

<pre><code>width: 126,
height: 180,
backgroundColor: 'red',
borderTopLeftRadius: 108,
borderTopRightRadius: 108,
borderBottomLeftRadius: 95,
borderBottomRightRadius: 95
</code></pre>

<p>  }
```</p>

<h3>Pac-Man</h3>

<p>This one is so simple but always so fun.</p>

<p><img class="<a" src="href="http://i.imgur.com/TZHjuxw.png">http://i.imgur.com/TZHjuxw.png</a>" title="Pixels was a teribel movie" ></p>

<p>```
var PacMan = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.pacman}/&gt;
)
</code></pre>

<p>  }
})</p>

<p>  pacman: {</p>

<pre><code>width: 0,
height: 0,
borderTopWidth: 60,
borderTopColor: 'red',
borderLeftColor: 'red',
borderLeftWidth: 60,
borderRightColor: 'transparent',
borderRightWidth: 60,
borderBottomColor: 'red',
borderBottomWidth: 60, 
borderTopLeftRadius: 60,
borderTopRightRadius: 60,
borderBottomRightRadius: 60,
borderBottomLeftRadius: 60
</code></pre>

<p>  }
```</p>

<h3>Talk Bubble</h3>

<p>This one is also simple, triangle and a rounded square.</p>

<p><img class="<a" src="href="http://i.imgur.com/1LIwGEQ.png">http://i.imgur.com/1LIwGEQ.png</a>" title="Perfect for your billion dollar slack clone" ></p>

<p>```
var TalkBubble = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.talkBubble}&gt;
    &lt;View style={styles.talkBubbleSquare} /&gt;
    &lt;View style={styles.talkBubbleTriangle} /&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})</p>

<p>  talkBubble: {</p>

<pre><code>backgroundColor: 'transparent'
</code></pre>

<p>  },
  talkBubbleSquare: {</p>

<pre><code>width: 120,
height: 80,
backgroundColor: 'red',
borderRadius: 10
</code></pre>

<p>  },
  talkBubbleTriangle: {</p>

<pre><code>position: 'absolute',
left: -26,
top: 26,
width: 0,
height: 0,
borderTopColor: 'transparent',
borderTopWidth: 13,
borderRightWidth: 26,
borderRightColor: 'red',
borderBottomWidth: 13,
borderBottomColor: 'transparent'
</code></pre>

<p>  }
```</p>

<h3>12 Point Burst</h3>

<p>I will admit this one confused be a little bit, then I realized it&rsquo;s just a couple of rotated squares.</p>

<p><img class="<a" src="href="http://i.imgur.com/FHx0WVH.png">http://i.imgur.com/FHx0WVH.png</a>" title="NOW 90% OFF!!" ></p>

<p>```
var TwelvePointBurst = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.twelvePointBurst}&gt;
    &lt;View style={styles.twelvePointBurstMain} /&gt;
    &lt;View style={styles.twelvePointBurst30} /&gt;
    &lt;View style={styles.twelvePointBurst60} /&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})</p>

<p> twelvePointBurst: {},
  twelvePointBurstMain: {</p>

<pre><code>width: 80,
height: 80,
backgroundColor: 'red'
</code></pre>

<p>  },
  twelvePointBurst30: {</p>

<pre><code>width: 80, 
height: 80,
position: 'absolute',
backgroundColor: 'red',
top: 0,
right: 0,
transform: [
  {rotate: '30deg'}
]
</code></pre>

<p>  },
  twelvePointBurst60: {</p>

<pre><code>width: 80, 
height: 80,
position: 'absolute',
backgroundColor: 'red',
top: 0,
right: 0,
transform: [
  {rotate: '60deg'}
]
</code></pre>

<p>  },</p>

<p>```</p>

<h3>8 Point Burst</h3>

<p>Just like the 12, but one less square and different rotations. Only thing here is because the pseudo element was positionined relative to the first 20 degree rotation and ours isn&rsquo;t we&rsquo;ll just bump it up to 155.</p>

<p><img class="<a" src="href="http://i.imgur.com/IITGOMB.png">http://i.imgur.com/IITGOMB.png</a>" title="Sun" ></p>

<p>```
var EightPointBurst = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.eightPointBurst}&gt;
    &lt;View style={styles.eightPointBurst20} /&gt;
    &lt;View style={styles.eightPointBurst155} /&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})</p>

<p>  eightPointBurst: {},
  eightPointBurst20: {</p>

<pre><code>width: 80, 
height: 80,
backgroundColor: 'red',
transform: [
  {rotate: '20deg'}
]
</code></pre>

<p>  },
  eightPointBurst155: {</p>

<pre><code>width: 80, 
height: 80,
position: 'absolute',
backgroundColor: 'red',
top: 0,
left: 0,
transform: [
  {rotate: '155deg'}
]
</code></pre>

<p>  },</p>

<p>```</p>

<h3>Yin Yang</h3>

<p>This one I don&rsquo;t like because you can&rsquo;t accomplish it without setting a background. Ohwell.
Also weird border issue causing outlines.</p>

<p><img class="<a" src="href="http://i.imgur.com/z9cUqaz.png">http://i.imgur.com/z9cUqaz.png</a>" title="Yin and Yang and see through background borders" ></p>

<p>```</p>

<p>var YinYang = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.yinyang}&gt;
    &lt;View style={styles.yinyangMain} /&gt;
    &lt;View style={styles.yinyangBefore} /&gt;
    &lt;View style={styles.yinyangAfter} /&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})</p>

<p>  yinyang: {</p>

<p>  },
  yinyangMain: {</p>

<pre><code>width: 100,
height: 100,
borderColor: 'red',
borderTopWidth: 2,
borderLeftWidth: 2,
borderBottomWidth: 50,
borderRightWidth: 2,
borderRadius: 50
</code></pre>

<p>  },
  yinyangBefore: {</p>

<pre><code>position: 'absolute',
top: 24,
left: 0,
borderColor: 'red',
borderWidth: 24,
borderRadius: 30,
</code></pre>

<p>  },
  yinyangAfter: {</p>

<pre><code>position: 'absolute',
top: 24,
right: 2,
backgroundColor: 'red',
borderColor: 'white',
borderWidth: 25,
borderRadius: 30,
</code></pre>

<p>  }
```</p>

<h3>Badge Ribbon</h3>

<p>Remember, always add <code>backgroundColor: 'transparent'</code> when you are overlapping things.</p>

<p><img class="<a" src="href="http://i.imgur.com/3V4K2B3.png">http://i.imgur.com/3V4K2B3.png</a>" title="Well I did get first place" ></p>

<p>```
var BadgeRibbon = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.badgeRibbon}&gt;
    &lt;View style={styles.badgeRibbonCircle} /&gt;
    &lt;View style={styles.badgeRibbonNeg140} /&gt;
    &lt;View style={styles.badgeRibbon140} /&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})
  badgeRibbonCircle: {</p>

<pre><code>width: 100,
height: 100,
backgroundColor: 'red',
borderRadius: 50
</code></pre>

<p>  },
  badgeRibbon140: {</p>

<pre><code>backgroundColor:'transparent',
borderBottomWidth: 70,
borderBottomColor: 'red',
borderLeftWidth: 40,
borderLeftColor: 'transparent',
borderRightWidth: 40,
borderRightColor: 'transparent',
position: 'absolute',
top: 70,
right: -10,
transform: [
  {rotate: '140deg'}
]
</code></pre>

<p>  },
  badgeRibbonNeg140: {</p>

<pre><code>backgroundColor:'transparent',
borderBottomWidth: 70,
borderBottomColor: 'red',
borderLeftWidth: 40,
borderLeftColor: 'transparent',
borderRightWidth: 40,
borderRightColor: 'transparent',
position: 'absolute',
top: 70,
left: -10,
transform: [
  {rotate: '-140deg'}
]
</code></pre>

<p>  }
```</p>

<h3>Space Invader</h3>

<p> <code>WUTTTTTTTTTTT</code></p>

<h3>TV Screen</h3>

<p>Stupid border radius making this one hard. We&rsquo;ll just use a bunch of ovals.</p>

<p><img class="<a" src="href="http://i.imgur.com/ffJdfqM.png">http://i.imgur.com/ffJdfqM.png</a>" title="CRT" ></p>

<p>```
var TvScreen = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.tvscreen}&gt;
    &lt;View style={styles.tvscreenMain} /&gt;
    &lt;View style={styles.tvscreenTop} /&gt;
    &lt;View style={styles.tvscreenBottom} /&gt;
    &lt;View style={styles.tvscreenLeft} /&gt;
    &lt;View style={styles.tvscreenRight} /&gt;

  &lt;/View&gt;   
)
</code></pre>

<p>  }
})</p>

<p>  tvscreen: {},
  tvscreenMain: {</p>

<pre><code>width: 150,
height: 75,
backgroundColor: 'red',
borderTopLeftRadius: 15,
borderTopRightRadius: 15,
borderBottomRightRadius: 15,
borderBottomLeftRadius: 15,
</code></pre>

<p>  },
  tvscreenTop: {</p>

<pre><code>width: 73,
height: 70,
backgroundColor: 'red',
position: 'absolute',
top: -26,
left: 39,
borderRadius: 35,
transform: [
  {scaleX: 2},
  {scaleY: .5}
]
</code></pre>

<p>  },
  tvscreenBottom: {</p>

<pre><code>width: 73,
height: 70,
backgroundColor: 'red',
position: 'absolute',
bottom: -26,
left: 39,
borderRadius: 35,
transform: [
  {scaleX: 2},
  {scaleY: .5}
]
</code></pre>

<p>  },
  tvscreenLeft: {</p>

<pre><code>width: 20,
height: 38,
backgroundColor: 'red',
position: 'absolute',
left: -7,
top: 18,
borderRadius: 35,
transform: [
  {scaleX: .5},
  {scaleY: 2},
]
</code></pre>

<p>  },
  tvscreenRight: {</p>

<pre><code>width: 20,
height: 38,
backgroundColor: 'red',
position: 'absolute',
right: -7,
top: 18,
borderRadius: 35,
transform: [
  {scaleX: .5},
  {scaleY: 2},
]
</code></pre>

<p>  },
```</p>

<h3>Chevron</h3>

<p>Once again we don&rsquo;t have skew, but we&rsquo;ll use triangles. Also magical negative scale to flip stuff around!</p>

<p><img class="<a" src="href="http://i.imgur.com/HEfbLbS.png">http://i.imgur.com/HEfbLbS.png</a>" title="get techron with chevron" ></p>

<p>```</p>

<p>var Chevron = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.chevron}&gt;
    &lt;View style={styles.chevronMain} /&gt;
    &lt;View style={[styles.chevronTriangle, styles.chevronTopLeft]} /&gt;
    &lt;View style={[styles.chevronTriangle, styles.chevronTopRight]} /&gt;
    &lt;View style={[styles.chevronTriangle, styles.chevronBottomLeft]} /&gt;
    &lt;View style={[styles.chevronTriangle, styles.chevronBottomRight]} /&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})</p>

<p>  chevron: {</p>

<pre><code>width: 150,
height: 50
</code></pre>

<p>  },
  chevronMain: {</p>

<pre><code>width: 150,
height: 50,
backgroundColor: 'red'
</code></pre>

<p>  },
  chevronTriangle: {</p>

<pre><code>backgroundColor: 'transparent',
borderTopWidth: 20,
borderRightWidth: 0,
borderBottomWidth: 0,
borderLeftWidth: 75,
borderTopColor: 'transparent',
borderBottomColor: 'transparent',
borderRightColor: 'transparent',
borderLeftColor: 'red',
</code></pre>

<p>  },
  chevronTopLeft: {</p>

<pre><code>position: 'absolute',
top: -20,
left: 0
</code></pre>

<p>  },
  chevronTopRight: {</p>

<pre><code>position: 'absolute',
top: -20,
right: 0,
transform: [
  {scaleX: -1}
]
</code></pre>

<p>  },
  chevronBottomLeft: {</p>

<pre><code>position: 'absolute',
bottom: -20,
left: 0,
transform: [
  {scale: -1 }
]
</code></pre>

<p>  },   <br/>
  chevronBottomRight: {</p>

<pre><code>position: 'absolute',
bottom: -20,
right: 0,
transform: [
  {scaleY: -1}
]
</code></pre>

<p>  }
```</p>

<h3>Magnifying Glass</h3>

<p>Border around a circle with a stick. Nothing to it.</p>

<p><img class="<a" src="href="http://i.imgur.com/1aCNZLk.png">http://i.imgur.com/1aCNZLk.png</a>" title="Blow bubbles" ></p>

<p>```
var MagnifyingGlass = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.magnifyingGlass}&gt;
    &lt;View style={styles.magnifyingGlassCircle} /&gt;
    &lt;View style={styles.magnifyingGlassStick} /&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})</p>

<p>  magnifyingGlass: {</p>

<p>  },
  magnifyingGlassCircle: {</p>

<pre><code>width: 100,
height: 100,
borderRadius: 50,
borderWidth: 15,
borderColor: 'red'
</code></pre>

<p>  },
  magnifyingGlassStick: {</p>

<pre><code>position: 'absolute',
right: -20,
bottom: -10,
backgroundColor: 'red',
width: 50,
height: 10,
transform: [
  {rotate: '45deg'}
]
</code></pre>

<p>```</p>

<h3>Facebook Icon</h3>

<p>This one seems appropriate but couldn&rsquo;t get it to work well. I attempted it and failed.</p>

<p><img class="<a" src="href="http://i.imgur.com/Y9lyxN7.png">http://i.imgur.com/Y9lyxN7.png</a>" title="React Native brought to you by" ></p>

<p>```
var Facebook = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.facebook}&gt;
    &lt;View style={styles.facebookMain}&gt;          
      &lt;View style={styles.facebookCurve} /&gt;
      &lt;View style={styles.facebookBefore} /&gt;
      &lt;View style={styles.facebookAfter} /&gt;
      &lt;View style={styles.facebookRedCover} /&gt;
    &lt;/View&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})</p>

<p>  facebook: {</p>

<pre><code>width: 100,
height: 110,
</code></pre>

<p>  },
  facebookMain: {</p>

<pre><code>backgroundColor: 'red',
width: 100,
height: 110,
borderRadius: 5,
borderColor: 'red',
borderTopWidth: 15,
borderLeftWidth: 15,
borderRightWidth: 15,
borderBottomWidth: 0,
overflow: 'hidden'
</code></pre>

<p>  },
  facebookRedCover: {</p>

<pre><code>width: 10,
height: 20,
backgroundColor: 'red',
position: 'absolute',
right: 0,
top: 5
</code></pre>

<p>  },
  facebookCurve: {</p>

<pre><code>width: 50,
borderWidth: 20,
borderTopWidth: 20,
borderTopColor: 'white',
borderBottomColor: 'transparent',
borderLeftColor: 'white',
borderRightColor: 'transparent',
borderRadius: 20,
position: 'absolute',
right: -8,
top: 5
</code></pre>

<p>  },
  facebookBefore: {</p>

<pre><code>position: 'absolute',
backgroundColor: 'white',
width: 20,
height: 70,
bottom: 0,
right: 22,
</code></pre>

<p>  },
  facebookAfter: {</p>

<pre><code>position: 'absolute',
width: 55,
top: 50,
height: 20,
backgroundColor: 'white',
right: 5
</code></pre>

<p>  }
```</p>

<h3>Moon</h3>

<p>Box shadow&hellip;</p>

<h3>Flag</h3>

<p>The one on css-tricks inferred a background, we&rsquo;ll just flip it around and say the center is transparent and the outer triangles are red.</p>

<p><img class="<a" src="href="http://i.imgur.com/7AMJ3sj.png">http://i.imgur.com/7AMJ3sj.png</a>" title="Have they ever seen a flag?" ></p>

<p>```</p>

<p>var Flag = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.flag}&gt;
    &lt;View style={styles.flagTop} /&gt;
    &lt;View style={styles.flagBottom} /&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})</p>

<p>  flag: {},
  flagTop: {</p>

<pre><code>width: 110,
height: 56,
backgroundColor: 'red',
</code></pre>

<p>  },
  flagBottom: {</p>

<pre><code>position: 'absolute',
left: 0,
bottom: 0,
width: 0,
height: 0,
borderBottomWidth: 13,
borderBottomColor: 'transparent',
borderLeftWidth: 55,
borderLeftColor: 'red',
borderRightWidth: 55,
borderRightColor: 'red'
</code></pre>

<p>  }
```</p>

<h3>Cone</h3>

<p>Had to modify the css on this one a bit to get the same look, 70 => 55.</p>

<p><img class="<a" src="href="http://i.imgur.com/04f26Kl.png">http://i.imgur.com/04f26Kl.png</a>" title="needs more icecream" ></p>

<p>```
var Cone = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.cone} /&gt;
)
</code></pre>

<p>  }
})</p>

<p>  cone: {</p>

<pre><code>width: 0,
height: 0,
borderLeftWidth: 55,
borderLeftColor: 'transparent',
borderRightWidth: 55,
borderRightColor: 'transparent',
borderTopWidth: 100,
borderTopColor: 'red',
borderRadius: 55
</code></pre>

<p>  }
```</p>

<h3>Cross</h3>

<p>More of a plus then a cross.</p>

<p><img class="<a" src="href="http://i.imgur.com/0IerLuP.png">http://i.imgur.com/0IerLuP.png</a>" title="across from where?" ></p>

<p><img class="<a" src="href="http://i.imgur.com/zfWtpTN.gif">http://i.imgur.com/zfWtpTN.gif</a>" title="heh" ></p>

<p>```
var Cross = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.cross}&gt;
    &lt;View style={styles.crossUp} /&gt;
    &lt;View style={styles.crossFlat} /&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})</p>

<p>  cross: {</p>

<p>  },
  crossUp: {</p>

<pre><code>backgroundColor: 'red',
height: 100,
width: 20
</code></pre>

<p>  },
  crossFlat: {</p>

<pre><code>backgroundColor: 'red',
height: 20,
width: 100,
position: 'absolute',
left: -40,
top: 40
</code></pre>

<p>  }
```</p>

<h3>Base</h3>

<p>Base&hellip; Home .. Home Base, whichever all the same.</p>

<p><img class="<a" src="href="http://i.imgur.com/LGQEIvS.png">http://i.imgur.com/LGQEIvS.png</a>" title="that&rsquo;s all folks" ></p>

<p>```
var Base = React.createClass({
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.base}&gt;
    &lt;View style={styles.baseTop} /&gt;
    &lt;View style={styles.baseBottom} /&gt;
  &lt;/View&gt;   
)
</code></pre>

<p>  }
})
  base: {</p>

<p>  },
  baseTop: {</p>

<pre><code>borderBottomWidth: 35,
borderBottomColor: 'red',
borderLeftWidth: 50,
borderLeftColor: 'transparent',
borderRightWidth: 50,
borderRightColor: 'transparent',
height: 0,
width: 0,
left: 0,
top: -35,
position: 'absolute',
</code></pre>

<p>  },
  baseBottom: {</p>

<pre><code>backgroundColor: 'red',
height: 55,
width: 100
</code></pre>

<p>  }
```</p>

<h1>Final</h1>

<p>Wow what a fun waste of time. Modeling React Native after the web spec is of course a great idea, I just wish it conformed a little nicer on border radius.</p>

<p>Also I hate geometry now.</p>

<h2>Live Code <a href="https://rnplay.org/apps/58FEmw">https://rnplay.org/apps/58FEmw</a></h2>

<p>I&rsquo;m not posting the full code here because it&rsquo;s just too long.</p>

<p><img class="<a" src="href="http://i.imgur.com/cWR7FKh.gif">http://i.imgur.com/cWR7FKh.gif</a>" title="Stay in school kids" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhantomJS Creating &amp; Connecting to Server]]></title>
    <link href="http://browniefed.com/blog/phantomjs-creating-and-connecting-to-server/"/>
    <updated>2014-06-15T16:37:00-07:00</updated>
    <id>http://browniefed.com/blog/phantomjs-creating-and-connecting-to-server</id>
    <content type="html"><![CDATA[<p>At my work we are a Java shop. So spinning up a server is quite a process. Additionally our static front end files are spread out across the system and we use RequireJS (ugh) to wrangle everything. Then in order to test we were running a selenium test to hit the test_runner page and wait for mocha to run and the tests. This is so unbelievably slow and quite hectic when it comes to managing relative paths of our config.</p>

<p>So to make things simpler I decided it&rsquo;d be in my best interest to use PhatonmJS. I decided to spin up a server using <code>var server = require('webserver').create();</code> and manage the requests and just route and serve up all the correct files. I thought this would work however I ran into a snag. Here is some sample code below</p>

<!-- more -->


<p>```
var server = require(&lsquo;webserver&rsquo;).create();
var url = &lsquo;localhost:8000&rsquo;
server.listen(url, function(){</p>

<pre><code>console.log('someone connected');
</code></pre>

<p>})</p>

<p>page.open(url, function(status) {</p>

<pre><code>console.log(status);
</code></pre>

<p>});
<code>``
Well I thought this would work based upon the docs but I was wrong.</code>status` would be success but the log on the server would never trigger. So I started mixing it up, here are a few things I tried.</p>

<p><code>var url = '127.0.0.1:8000'</code></p>

<p>```</p>

<p>server.listen(8000);</p>

<p>page.open(&lsquo;127.0.0.1:8000&rsquo;);</p>

<p>```</p>

<p>```</p>

<p>server.listen(8000, {keepAlive: true});</p>

<p>```</p>

<p>After spending an hour debugging and attempting to not flip a table I figured it out. Apparently the solution was to add <code>http</code>. Example:</p>

<p>```</p>

<p>server.listen(8000, {keepAlive: true}, function() {</p>

<pre><code>console.log('sucess');  
</code></pre>

<p>});</p>

<p>page.open(&lsquo;<a href="http://127.0.0.1:8000">http://127.0.0.1:8000</a>&rsquo;);</p>

<p>```</p>

<p>So I got it working, I was sending the files down but on larger files I was continually getting PhantomJS throwing <code>Parser errors</code>. I was setting proper content types and with <code>keep alive</code> connections you have to send the content lengths. The solution? Get rid of <code>keepAlive:true</code>. I was under the assumption it was necessary, it was also in my code when I actually got a successful connection so I assumed it was necessary. In the end it was very simple and probably a result of some minor idiocy on my part and slight lack of documentation.</p>

<p>If you ever need to have your unit test server up CSS/JS/HTML, even mock Rest API end points, server up mocked data (there are better ways to do this) then here is your PhantomJS solution.</p>

<p>```</p>

<p>var PORT = 8000,</p>

<pre><code>url = 'http://127.0.0.1:' + PORT,
server = require('webserver').create(),
page = require('webpage').create(),
fs = require('fs'),
system = require('system'); // This was used to take in args to change what PORT to connect to but not necessary for most people
</code></pre>

<p>var contentTypes = {</p>

<pre><code>'css': 'text/css',
'html': 'text/html',
'js': 'application/javascript',
'png': 'image/png',
'gif': 'image/gif',
'jpg': 'image/jpeg',
'jpeg': 'image/jpeg'
</code></pre>

<p>};</p>

<pre><code>server.listen(PORT, function(req, res) {


    var filePath = fs.workingDirectory + fs.separator + req.url.split('/').join(fs.separator), // make it OS agnostic
        fileName = req.url.split('/').shift().split('?')[0], //remove any query string
        ext = fileName.split('.').shift(),
        fileContent = '';

    res.statusCode = 200;
    res.headers = {
        "Cache": "no-cache", 
        "Content-Type": contentTypes[ext] || 'text/html' //no content type?
    };


    if (fs.isReadable(filePath)) {
        fileContent = fs.readFile(filePath);
    } else {
        res.statusCode = 404;
        //maybe 501? Your error codes may vary
    }

    res.write(fileContent);
    res.close();

});


page.open(url, function(status) {

    if (status !== 'success') {
        phantom.exit(1);
    }


})
</code></pre>

<p>```</p>

<p>This is very basic and assumes your running in the root of your files you need to server. In my case I wasn&rsquo;t and had to do some additional parsing and mapping of the URL to get the correct filepath but it should be a decent start for you.</p>
]]></content>
  </entry>
  
</feed>
