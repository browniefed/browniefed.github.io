<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react | JavaScript Without Grammar]]></title>
  <link href="http://browniefed.com/blog/categories/react/atom.xml" rel="self"/>
  <link href="http://browniefed.com/"/>
  <updated>2015-08-23T11:51:19-07:00</updated>
  <id>http://browniefed.com/</id>
  <author>
    <name><![CDATA[Jason Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React-native press and hold button actions]]></title>
    <link href="http://browniefed.com/blog/2015/08/22/react-native-press-and-hold-button-actions/"/>
    <updated>2015-08-22T11:55:00-07:00</updated>
    <id>http://browniefed.com/blog/2015/08/22/react-native-press-and-hold-button-actions</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Another common interaction is the press and hold to fire an action. Sometimes it&rsquo;s delete, sometimes it&rsquo;s save, but whatever it is you want to provide feedback to your user. React Native ships with a few Touchable components like <code>TouchableOpacity</code>, <code>TouchableHighlight</code> and also <code>TouchableBounce</code> that provide feedback to users but we&rsquo;ll build a button that fills up over a set period of time then triggers an action.</p>

<p><img class="<a" src="href="http://i.imgur.com/aVeaXMc.gif">http://i.imgur.com/aVeaXMc.gif</a>" title="Final Press And Hold" ></p>

<!-- more -->


<h1>Setup</h1>

<p>Lets do some code setup.</p>

<p>```
var React = require(&lsquo;react-native&rsquo;);</p>

<p>var {
  AppRegistry,
  StyleSheet,
  Animated,
  View,
  Text,
  TouchableWithoutFeedback
} = React;</p>

<p>var ACTION_TIMER = 400;
var COLORS = [&lsquo;rgb(255,255,255)&rsquo;, &lsquo;rgb(111,235,62)&rsquo;];
```</p>

<p>We&rsquo;ll pull in the normal components from React Native and additionally setup some variables to use later. <code>ACTION_TIMER</code> will be how long the animation will take before it fires the action, the <code>COLORS</code> will be the start and end colors. This animtion will transition from white to a brightish green. Remember that animated interpolations do not work with hex.</p>

<h1>Base Component With StyleSheet</h1>

<p>```
var AnimatedButtonPress = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {
    textComplete: ''
};
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
   &lt;View style={styles.container}&gt;
        &lt;TouchableWithoutFeedback&gt;
            &lt;View style={styles.button} &gt;
                &lt;Animated.View style={styles.bgFill} /&gt;
                &lt;Text style={styles.text}&gt;Press And Hold Me&lt;/Text&gt;
            &lt;/View&gt;
        &lt;/TouchableWithoutFeedback&gt;
        &lt;View&gt;
            &lt;Text&gt;{this.state.textComplete}&lt;/Text&gt;
        &lt;/View&gt;
   &lt;/View&gt;
);
</code></pre>

<p>  }
});</p>

<p>var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1,
flexDirection: 'column',
alignItems: 'center',
justifyContent: 'center'
</code></pre>

<p>  },
  button: {</p>

<pre><code>padding: 10,
borderWidth: 3,
borderColor: '#111'
</code></pre>

<p>  },
  text: {</p>

<pre><code>backgroundColor: 'transparent',
color: '#111'
</code></pre>

<p>  },
  bgFill: {</p>

<pre><code>position: 'absolute',
top: 0,
left: 0
</code></pre>

<p>  }
});
```</p>

<p>To start out, for this to work we obviously don&rsquo;t need the <code>textComplete</code> but that&rsquo;s just going to be our visual feedback to let us know when the action completes.</p>

<p>We setup a <code>TouchableWithoutFeedback</code> so we can get access to a few press handlers without directly using the <code>PanResponder</code>. Next we create a wrapping button view, add some text, and most importantly we create an <code>Animated.View</code>.</p>

<p>We set it to be position absolute so it doesn&rsquo;t effect layout and sits behind the text, and set it to the <code>top: 0</code> and <code>left: 0</code> so it is position at the furthest top and left of the component. I&rsquo;ll explain later why we don&rsquo;t set <code>bottom:0</code> here as well.</p>

<h1>Create The Animated</h1>

<p>```
  getInitialState: function() {</p>

<pre><code>return {
    pressAction: new Animated.Value(0),
    textComplete: ''
};
</code></pre>

<p>  },
```</p>

<h1>Handle The Presses</h1>

<p>```
handlePressIn: function() {</p>

<pre><code>Animated.timing(this.state.pressAction, {
    duration: ACTION_TIMER,
    toValue: 1
}).start(this.animationActionComplete);
</code></pre>

<p>},
handlePressOut: function() {</p>

<pre><code>Animated.timing(this.state.pressAction, {
    duration: this.state.pressAction.getAnimatedValue() * ACTION_TIMER,
    toValue: 0
}).start();
</code></pre>

<p>},
animationActionComplete: function() {</p>

<pre><code>var message = '';
if (this.state.pressAction.getAnimatedValue() === 1) {
    message = 'You held it long enough to fire the action!';
}
this.setState({
    textComplete: message
});
</code></pre>

<p>},
render: function() {</p>

<pre><code>return (
   &lt;View style={styles.container}&gt;
        &lt;TouchableWithoutFeedback 
            onPressIn={this.handlePressIn} 
            onPressOut={this.handlePressOut}
        &gt;
            &lt;View style={styles.button} &gt;
                &lt;Animated.View style={styles.bgFill} /&gt;
                &lt;Text style={styles.text}&gt;Press And Hold Me&lt;/Text&gt;
            &lt;/View&gt;
        &lt;/TouchableWithoutFeedback&gt;
        &lt;View&gt;
            &lt;Text&gt;{this.state.textComplete}&lt;/Text&gt;
        &lt;/View&gt;
   &lt;/View&gt;
);
</code></pre>

<p>  }
```</p>

<p>Here we use the <code>onPressIn</code> and <code>onPressOut</code> callbacks. These will trigger timed animations. We&rsquo;ll use the <code>ACTION_TIMER</code> variable we setup at the top, and <code>onPressIn</code> we&rsquo;ll animate our <code>pressAction</code> animated value to <code>1</code> over <code>400ms</code>.</p>

<p><code>onPressOut</code> we&rsquo;ll animate it from <code>1</code> back down to <code>0</code>. However if a user lifts their finger before the <code>400ms</code> threshold is reached then it will animated down from that value. For example holding it down for <code>200ms</code> would mean our <code>pressAction</code> animated value was at <code>.5</code> so it would then animated down from <code>.5</code> to <code>0</code> over <code>400ms</code>.</p>

<p>Animating down over the full <code>400ms</code> is not ideal, so what we&rsquo;ll do is get the current animated value with <code>this.state.pressAction.getAnimatedValue()</code> and multiply it times the full <code>ACTION_TIMER</code> which means out <code>.5</code> animated value would yield us the correct <code>200ms</code> to transition back to <code>0</code>.</p>

<p>Finally we pass in a callback to our <code>start</code> of <code>handlePressIn</code> which if our <code>pressAction</code> animated value gets to <code>1</code> aka being compelte then we will tell the user their action happened.</p>

<h1>Measure the button</h1>

<p>Due to absolute layout we&rsquo;ll need to use specific widths and heights. That means we&rsquo;ll have to get the layout of the button so we know how much to fill.</p>

<p>```
  getInitialState: function() {</p>

<pre><code>return {
    pressAction: new Animated.Value(0),
    textComplete: '',
    buttonWidth: 0,
    buttonHeight: 0
};
</code></pre>

<p>  },
```</p>

<p>We&rsquo;ll setup the <code>buttonWidth</code> and <code>buttonHeight</code> on our initial state.</p>

<p>```
  getButtonWidthLayout: function(e) {</p>

<pre><code>this.setState({
    buttonWidth: e.nativeEvent.layout.width - 6,
    buttonHeight: e.nativeEvent.layout.height - 6
});
</code></pre>

<p>  },</p>

<p>  render: function() {</p>

<pre><code>return (
   &lt;View style={styles.container}&gt;
        &lt;TouchableWithoutFeedback 
            onPressIn={this.handlePressIn} 
            onPressOut={this.handlePressOut}
        &gt;
            &lt;View style={styles.button} onLayout={this.getButtonWidthLayout}&gt;
                &lt;Animated.View style={styles.bgFill} /&gt;
                &lt;Text style={styles.text}&gt;Press And Hold Me&lt;/Text&gt;
            &lt;/View&gt;
        &lt;/TouchableWithoutFeedback&gt;
        &lt;View&gt;
            &lt;Text&gt;{this.state.textComplete}&lt;/Text&gt;
        &lt;/View&gt;
   &lt;/View&gt;
);
</code></pre>

<p>  }
```</p>

<p>We&rsquo;ll use the <code>onLayout</code> callback for views and set the state of our buttons width and height. Why can&rsquo;t we use <code>bottom: 0</code>? Well because of the padding we set on the button it would only show the animated background where the text ends, so we&rsquo;ll explicitily set the height.</p>

<p>Why the <code>-6</code>? Well the same things happens for <code>top: 0</code> and <code>left: 0</code>. It will sit inside the border, so if we animated to the full width and set the full height then it would extend the progress bar past the borders which we don&rsquo;t want.</p>

<h1>Aniamte The Background and Width of our Fill</h1>

<p>```
  getProgressStyles: function() {</p>

<pre><code>var width = this.state.pressAction.interpolate({
    inputRange: [0, 1],
    outputRange: [0, this.state.buttonWidth]
});
var bgColor = this.state.pressAction.interpolate({
    inputRange: [0, 1],
    outputRange: COLORS
})
return {
    width: width,
    height: this.state.buttonHeight,
    backgroundColor: bgColor
}
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
   &lt;View style={styles.container}&gt;
        &lt;TouchableWithoutFeedback 
            onPressIn={this.handlePressIn} 
            onPressOut={this.handlePressOut}
        &gt;
            &lt;View style={styles.button} onLayout={this.getButtonWidthLayout}&gt;
                &lt;Animated.View style={[styles.bgFill, this.getProgressStyles()]} /&gt;
                &lt;Text style={styles.text}&gt;Press And Hold Me&lt;/Text&gt;
            &lt;/View&gt;
        &lt;/TouchableWithoutFeedback&gt;
        &lt;View&gt;
            &lt;Text&gt;{this.state.textComplete}&lt;/Text&gt;
        &lt;/View&gt;
   &lt;/View&gt;
);
</code></pre>

<p>  }
<code>``
We use the array syntax for style to combine our pre-set styles and our generated styles. We call</code>getProgressStyles<code>to return a new object with our dynamic styling. In our</code>getProgressStyles<code>we'll use the</code>interpolate<code>function on our</code>pressAction` animated value to setup animated values.</p>

<p>So for the width we&rsquo;ll take an input of <code>[0,1]</code> and it will interpolate from <code>0</code> to the width of our button that we set in the <code>getButtonWidthLayout</code>.</p>

<p>Same thing goes for the <code>bgColor</code> interpolation. It takes the same <code>[0,1]</code> inputRange and interpolates to the <code>rgb</code> colors we setup in the top.</p>

<p>Finally we return our new style object with our animated values, and also the heigth of the button (minus the 6 border pixels).</p>

<h1>Final</h1>

<p>And just like that you have the ability to press and hold a button and execute an action when it&rsquo;s done, all while providing feedback to the user.</p>

<p>As always checkout the live code <a href="https://rnplay.org/apps/umzv6g">https://rnplay.org/apps/umzv6g</a>.</p>

<p><img class="<a" src="href="http://i.imgur.com/aVeaXMc.gif">http://i.imgur.com/aVeaXMc.gif</a>" title="Final Press And Hold" ></p>

<h1>Final Code</h1>

<p>```
var React = require(&lsquo;react-native&rsquo;);</p>

<p>var {
  AppRegistry,
  StyleSheet,
  Animated,
  View,
  Text,
  TouchableWithoutFeedback
} = React;</p>

<p>var ACTION_TIMER = 400;
var COLORS = [&lsquo;rgb(255,255,255)&rsquo;, &lsquo;rgb(111,235,62)&rsquo;];</p>

<p>var AnimatedButtonPress = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {
    pressAction: new Animated.Value(0),
    textComplete: '',
    buttonWidth: 0,
    buttonHeight: 0
};
</code></pre>

<p>  },
  handlePressIn: function() {</p>

<pre><code>Animated.timing(this.state.pressAction, {
    duration: ACTION_TIMER,
    toValue: 1
}).start(this.animationActionComplete);
</code></pre>

<p>  },
  handlePressOut: function() {</p>

<pre><code>Animated.timing(this.state.pressAction, {
        duration: this.state.pressAction.getAnimatedValue() * ACTION_TIMER,
        toValue: 0
}).start();
</code></pre>

<p>  },
  animationActionComplete: function() {</p>

<pre><code>var message = '';
if (this.state.pressAction.getAnimatedValue() === 1) {
    message = 'You held it long enough to fire the action!';
}
this.setState({
    textComplete: message
});
</code></pre>

<p>  },
  getButtonWidthLayout: function(e) {</p>

<pre><code>this.setState({
    buttonWidth: e.nativeEvent.layout.width - 6,
    buttonHeight: e.nativeEvent.layout.height - 6
});
</code></pre>

<p>  },
  getProgressStyles: function() {</p>

<pre><code>var width = this.state.pressAction.interpolate({
    inputRange: [0, 1],
    outputRange: [0, this.state.buttonWidth]
});
var bgColor = this.state.pressAction.interpolate({
    inputRange: [0, 1],
    outputRange: COLORS
})
return {
    width: width,
    height: this.state.buttonHeight,
    backgroundColor: bgColor
}
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
   &lt;View style={styles.container}&gt;
        &lt;TouchableWithoutFeedback 
            onPressIn={this.handlePressIn} 
            onPressOut={this.handlePressOut}
        &gt;
            &lt;View style={styles.button} onLayout={this.getButtonWidthLayout}&gt;
                &lt;Animated.View style={[styles.bgFill, this.getProgressStyles()]} /&gt;
                &lt;Text style={styles.text}&gt;Press And Hold Me&lt;/Text&gt;
            &lt;/View&gt;
        &lt;/TouchableWithoutFeedback&gt;
        &lt;View&gt;
            &lt;Text&gt;{this.state.textComplete}&lt;/Text&gt;
        &lt;/View&gt;
   &lt;/View&gt;
);
</code></pre>

<p>  }
});</p>

<p>var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1,
flexDirection: 'column',
alignItems: 'center',
justifyContent: 'center'
</code></pre>

<p>  },
  button: {</p>

<pre><code>padding: 10,
borderWidth: 3,
borderColor: '#111'
</code></pre>

<p>  },
  text: {</p>

<pre><code>backgroundColor: 'transparent',
color: '#111'
</code></pre>

<p>  },
  bgFill: {</p>

<pre><code>position: 'absolute',
top: 0,
left: 0
</code></pre>

<p>  }
});</p>

<p>AppRegistry.registerComponent(&lsquo;AnimatedButtonPress&rsquo;, () => AnimatedButtonPress);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React-native Animated API with PanResponder]]></title>
    <link href="http://browniefed.com/blog/2015/08/15/react-native-animated-api-with-panresponder/"/>
    <updated>2015-08-15T14:17:00-07:00</updated>
    <id>http://browniefed.com/blog/2015/08/15/react-native-animated-api-with-panresponder</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>The previous example was a very basic one, just moving a box around the screen. But you&rsquo;ll likely want to do something by touch. Dragging, dropping, flicking, all those good mobile interactions. I previously covered how to make Tinder cards but I didn&rsquo;t add any true animations in. With the new Animated API you can make an even better Tinder card demo. And that&rsquo;s what <a href="https://twitter.com/notbrent">Brent</a> did.</p>

<p>This blog post was inspired by <a href="https://github.com/brentvatne/react-native-animated-demo-tinder">https://github.com/brentvatne/react-native-animated-demo-tinder</a>. I decide to break it apart, simplify it and explain the bits as we re-build it.</p>

<p>We will not fully reimplement it since you can learn the full ins and outs by checking out the code.</p>

<p><img class="<a" src="href="http://i.imgur.com/b5K2fcx.gif">http://i.imgur.com/b5K2fcx.gif</a>" title="Final with rotation and opacity" ></p>

<!-- more -->


<h1>Setup</h1>

<p>Just like before we&rsquo;ll get a pretty basic setup going</p>

<p>Imports/Variables</p>

<p>```
var React = require(&lsquo;react-native&rsquo;);</p>

<p>var {
  AppRegistry,
  StyleSheet,
  View,
  Animated,
  PanResponder
} = React;</p>

<p>var SQUARE_DIMENSIONS = 100;</p>

<p>```</p>

<p>Styles</p>

<p>```
var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1,
alignItems: 'center',
justifyContent: 'center'
</code></pre>

<p>  },
  square: {</p>

<pre><code>width: SQUARE_DIMENSIONS,
height: SQUARE_DIMENSIONS,
backgroundColor: 'blue'
</code></pre>

<p>  }
});</p>

<p>```</p>

<p>Main Code</p>

<p>```
var AnimatedFlick = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {
    pan: new Animated.ValueXY()
};
</code></pre>

<p>  },
  getStyle: function() {</p>

<pre><code>return [
          styles.square, 
          {
            transform: this.state.pan.getTranslateTransform()
          }
        ];
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
    &lt;Animated.View style={this.getStyle()} /&gt;
  &lt;/View&gt;
);
</code></pre>

<p>  }
});
```</p>

<h1>Pan Responder</h1>

<p>The <code>PanResponder</code> is our touch handler. The great thing about the <code>PanResponder</code> and <code>Animated</code> API were that they were made to work together.</p>

<p>We need to create our PanResponder</p>

<p>```
  componentWillMount: function() {</p>

<pre><code>    this._panResponder = PanResponder.create({
      onMoveShouldSetResponderCapture: () =&gt; true, //Tell iOS that we are allowing the movement
      onMoveShouldSetPanResponderCapture: () =&gt; true, // Same here, tell iOS that we allow dragging
      onPanResponderGrant: (e, gestureState) =&gt; {
        this.state.pan.setOffset({x: this.state.pan.x.getAnimatedValue(), y: this.state.pan.y.getAnimatedValue()});
        this.state.pan.setValue({x: 0, y: 0}); //Initial value
      },
      onPanResponderMove: Animated.event([
        null, {dx: this.state.pan.x, dy: this.state.pan.y}
      ]), // Creates a function to handle the movement and set offsets
      onPanResponderRelease: () =&gt; {
        this.state.pan.flattenOffset(); // Flatten the offset so it resets the default positioning
      }
    });
</code></pre>

<p>  },</p>

<p><code>``
We need</code>onMoveShouldSetResponderCapture<code>and</code>onMoveShouldSetPanResponderCapture` to always return true. This tells iOS that we are allowing the user to make movements and we&rsquo;re going to track them.</p>

<p>The function <code>onPanResponderGrant</code> is called once when we approve the animation. This gives us all of our initial values. We set the start value, and then also the offset which is our current pan values. Then we set our animation start values to <code>0,0</code>. This basically resets our movement changes so our delta <code>x,y</code> will be applied from a 0 point. Hopefully that makes sense.</p>

<p>We give our <code>onPanResponderMove</code> an <code>Animated.event</code>. This creates a function that will automatically take the gestureState which has 2 keys on it <code>dx</code> and <code>dy</code> and put those changes on our <code>this.state.pan.x</code> and our <code>this.state.pan.y</code> respectively.</p>

<p>Finally <code>onPanResponderRelease</code> we call <code>flattenOffset</code>. This takes the current <code>x,y</code> and the current offset (aka how much you&rsquo;ve dragged it around). And combines them.</p>

<p>The internal code for flattenOffset looks like this</p>

<p>```
  flattenOffset(): void {</p>

<pre><code>this._value += this._offset;
this._offset = 0;
</code></pre>

<p>  }
```</p>

<p>```
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
    &lt;Animated.View 
      style={this.getStyle()} 
      {...this._panResponder.panHandlers}
    /&gt;
  &lt;/View&gt;
);
</code></pre>

<p>  }
<code>``
Here we spread the handlers onto the our</code>Animated.View` so it sets up all the calls correctly.</p>

<h1>We have a square that moves</h1>

<p>Great we have a square that moves and it stays where we left it, and also when we move it again it picks up from the same coordinates that we dropped it at.</p>

<p><img class="<a" src="href="http://i.imgur.com/vFYB4JY.gif">http://i.imgur.com/vFYB4JY.gif</a>" title="Moving Square" ></p>

<h1>Reset to 0 with a spring</h1>

<p>We just replace our <code>flattenOffset</code> call which would leave our square where we left it and instead create a spring that animates our <code>this.state.pan</code> back to 0. Which will correctly animate our <code>x,y</code> back to 0 and provide a nice little bounce.</p>

<p>Here is the code.</p>

<p>```
  onPanResponderRelease: () => {</p>

<pre><code>Animated.spring(this.state.pan, {
  toValue: 0
}).start();
</code></pre>

<p>  }
```
Yes it is really that simple.</p>

<p><img class="<a" src="href="http://i.imgur.com/PkNpyBH.gif">http://i.imgur.com/PkNpyBH.gif</a>" title="Springs back to center" ></p>

<h1>Opacity and rotation</h1>

<p>Because we want the opacity and the rotation to be tied to the movement position we can use the <code>interpolate</code> we created from <code>Animated.ValueXY</code> on <code>this.state.pan</code> .</p>

<p>We&rsquo;ll have to make some small adjustments but the only thing we need to change is our <code>getStyle</code> function.</p>

<p>```
  getStyle: function() {</p>

<pre><code>return [
          styles.square, 
          {
            transform: [
              {
                translateX: this.state.pan.x
              },
              {
                translateY: this.state.pan.y
              },
              {
                rotate: this.state.pan.x.interpolate({inputRange: [-200, 0, 200], outputRange: ["-30deg", "0deg", "30deg"]})
              }
            ]
          },
          {
            opacity: this.state.pan.x.interpolate({inputRange: [-200, 0, 200], outputRange: [0.5, 1, 0.5]})
          }
        ];
</code></pre>

<p>  },
<code>``
We create an interpolate that determines the correct value from an</code>inputRange<code>.
When our drag is</code>-200<code>or greater our rotate will be</code>-30 degrees<code>, at 0 it is 0, and if moved to the right at</code>200<code>or great then it's</code>30 degrees`.</p>

<p>Interpolate is smart enough to take an input range, and interpolate an inbetween degree. So as you slowly move the card the degrees will adjust, so an input value of <code>100</code> would translate to a <code>15 degree</code> rotation.</p>

<p>For opacity we want the same inputs, except our outputs will be <code>.5</code> for both sides and <code>1</code> at 0 movement.
The interpolation of the opacity operates the same as the degrees, as you rotate it&rsquo;ll adjust the opacity to a maximum/minimum of .5.</p>

<p><img class="<a" src="href="http://i.imgur.com/b5K2fcx.gif">http://i.imgur.com/b5K2fcx.gif</a>" title="Final with rotation and opacity" ></p>

<h1>Final</h1>

<p>This doesn&rsquo;t explain all the techniques used in the tinder card demo. One such thing is the flicking capabilities.
That uses <code>Animated.decay</code> and some physics (velocity,friction) to animate a value.</p>

<h3>Play with it here <a href="https://rnplay.org/apps/71CyoA">https://rnplay.org/apps/71CyoA</a>.</h3>

<h1>Full Code</h1>

<p>```
var React = require(&lsquo;react-native&rsquo;);</p>

<p>var {
  AppRegistry,
  StyleSheet,
  View,
  Animated,
  PanResponder
} = React;</p>

<p>var SQUARE_DIMENSIONS = 100;</p>

<p>var AnimatedFlick = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {
    pan: new Animated.ValueXY()
};
</code></pre>

<p>  },
  componentWillMount: function() {</p>

<pre><code>    this._panResponder = PanResponder.create({
      onMoveShouldSetResponderCapture: () =&gt; true,
      onMoveShouldSetPanResponderCapture: () =&gt; true,
      onPanResponderGrant: (e, gestureState) =&gt; {
        this.state.pan.setOffset({x: this.state.pan.x.getAnimatedValue(), y: this.state.pan.y.getAnimatedValue()});
        this.state.pan.setValue({x: 0, y: 0});
      },
      onPanResponderMove: Animated.event([
            null, {dx: this.state.pan.x, dy: this.state.pan.y},
      ]),
      onPanResponderRelease: () =&gt; {
        Animated.spring(this.state.pan, {
          toValue: 0
        }).start();
      }
    });
</code></pre>

<p>  },<br/>
  getStyle: function() {</p>

<pre><code>return [
          styles.square, 
          {
            transform: [
              {
                translateX: this.state.pan.x
              },
              {
                translateY: this.state.pan.y
              },
              {
                rotate: this.state.pan.x.interpolate({inputRange: [-200, 0, 200], outputRange: ["-30deg", "0deg", "30deg"]})
              }
            ]
          },
          {
            opacity: this.state.pan.x.interpolate({inputRange: [-200, 0, 200], outputRange: [0.5, 1, 0.5]})
          }
        ];
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
    &lt;Animated.View 
      style={this.getStyle()} 
      {...this._panResponder.panHandlers}
    /&gt;
  &lt;/View&gt;
);
</code></pre>

<p>  }
});</p>

<p>var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1,
alignItems: 'center',
justifyContent: 'center'
</code></pre>

<p>  },
  square: {</p>

<pre><code>width: SQUARE_DIMENSIONS,
height: SQUARE_DIMENSIONS,
backgroundColor: 'blue'
</code></pre>

<p>  }
});</p>

<p>AppRegistry.registerComponent(&lsquo;AnimatedFlick&rsquo;, () => AnimatedFlick);</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React-native Animated ScrollView Row Swipe Actions]]></title>
    <link href="http://browniefed.com/blog/2015/08/01/react-native-animated-listview-row-swipe/"/>
    <updated>2015-08-01T16:17:00-07:00</updated>
    <id>http://browniefed.com/blog/2015/08/01/react-native-animated-listview-row-swipe</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Have you ever wanted to swipe a row in a scroll view to take some sort of action. Swipe left to delete, swipe right to archive, swipe to do whatever. Well previously without the Animated API that wasn&rsquo;t necessarily hard it was just inefficient due to having to use <code>setState</code> causing a lot of diffs.</p>

<h1>What are we trying to accomplish</h1>

<p><img class="<a" src="href="http://i.imgur.com/z1tko0s.gif">http://i.imgur.com/z1tko0s.gif</a>" title="Swipe Action GIF from @dubert" ></p>

<p>This is not an orignal interaction I created, you can follow along with how I stumbled upon it and such here <a href="https://github.com/facebook/react-native/issues/2072">https://github.com/facebook/react-native/issues/2072</a>.</p>

<p>Swiping rows is also just a normal action in iOS. However there is an ongoing debate here about ListView/ScrollView being wrapped in a UITableView which would provide some of this interaction as default. You can read through it here <a href="https://github.com/facebook/react-native/issues/332">https://github.com/facebook/react-native/issues/332</a> but we&rsquo;ll forge ahead and implement it with what we have to work with.</p>

<!-- more -->


<h1>The Concept</h1>

<p>Previously I attempted, and successfully implemented this with the <code>PanResponder</code>. There is nothing particularly bad about that approach except you will run into issues being embedded in a <code>ScrollView</code>.</p>

<p>What issues? Well while swiping left/right the content direction locks won&rsquo;t be set, which means if you don&rsquo;t swipe perfectly left &lt;=> right and introduce some up/down your row will get stuck. That is not a good interaction.</p>

<p>So thanks to the solid recommendation by <a href="https://github.com/sahrens">sahrens</a> we will do a <code>ScrollView</code> with each row being a Horizontal <code>ScrollView</code>. This means iOS will negotiate content direction locks correctly. So when you scroll up and down the body content will scroll, left and right will cause each row to slide.</p>

<h1>Drawbacks</h1>

<p>There are some drawbacks.</p>

<ul>
<li>With the horizontal ScrollView you have to define the height (at least from what I could figure out).</li>
<li>The View in the horizontal ScrollView does not stretch completely regardless of what flex properties you add on it.</li>
<li>The PanResponder vs ContentOffset X values are opposites, so you have to multiply by -1.</li>
<li>The content offset is not as large as the PanResponder so I had to lower the RED threshold.</li>
</ul>


<p>Specifying the height is seemingly the largest drawback that I couldn&rsquo;t figure out. The width not auto-adjusting is also another drawback, however we have the dimensions to calculate the threshold so we could manually set the width if we wanted.</p>

<h1>Setup</h1>

<p>Variables we need</p>

<p>```
var React = require(&lsquo;react-native&rsquo;);
var Dimensions = require(&lsquo;Dimensions&rsquo;);</p>

<p>var {
  width,
  height
} = Dimensions.get(&lsquo;window&rsquo;);</p>

<p>var {
  AppRegistry,
  StyleSheet,
  ScrollView,
  View,
  Text,
  Animated
} = React;</p>

<p>var GREY = 0;
var GREEN = 1;
var RED = 2;</p>

<p>var values = [1,2,3,4];</p>

<p>var AnimatedScrollView = Animated.createAnimatedComponent(ScrollView);
```</p>

<p>We need the Device widths for calculating half the screen later for our events.
Also we setup color as integer steps, and then define arbitrary values for rows.</p>

<p>Finally we use the <code>createAnimatedComponent</code> supplied by <code>Animated</code> to create an Animated capable <code>ScrollView</code>.</p>

<p>What that means is that when you pass it interpolated values (like an interpolated background color) it&rsquo;ll correctly negotiate the values.</p>

<p>Styles</p>

<p>```</p>

<p>var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1,
flexDirection: 'column'
</code></pre>

<p>  },
  outerScroll: {</p>

<pre><code>flex: 1,
flexDirection: 'column'
</code></pre>

<p>  },
  row: {</p>

<pre><code>flex: 1
</code></pre>

<p>  }
});
```
Just some base styles, you&rsquo;ll see where they are used in a second.</p>

<h1>Basic ScrollView</h1>

<p>```
var AnimatedFlick = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {
    values: values
};
</code></pre>

<p>  },</p>

<p>  _renderRow: function(value, index) {</p>

<pre><code>return (
    &lt;View 
      style={styles.row}
      key={index}
    &gt;
      &lt;Text&gt;{value + "  &lt;----- Slide the row that way and release"}&lt;/Text&gt;
    &lt;/View&gt;
)
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
    &lt;ScrollView style={styles.outerScroll}&gt;
      {this.state.values.map(this._renderRow, this)}
    &lt;/ScrollView&gt;
  &lt;/View&gt;
);
</code></pre>

<p>  }
});
```</p>

<p>We setup some intial state the values we set in the setup section <code>var values = [1,2,3,4]</code>.
We map those values to the <code>_renderRow</code> function, which we just return a basic <code>View</code>, with some <code>Text</code>.</p>

<h1>ScrollView with Horizontal ScrollViews</h1>

<p>```
  _renderRow: function(value, index) {</p>

<pre><code>return (
    &lt;View 
      style={styles.row}
      key={index}
    &gt;
      &lt;ScrollView
        horizontal={true}
        directionalLockEnabled={true}
        style=
      &gt;
        &lt;View&gt;
          &lt;Text&gt;{value + "  &lt;----- Slide the row that way and release"}&lt;/Text&gt;
        &lt;/View&gt;
      &lt;/ScrollView&gt;
    &lt;/View&gt;
)
</code></pre>

<p>  }</p>

<p><code>``
We wrap our view content in</code>ScrollView<code>with</code>horizontal<code>true and</code>directionLockEnabeled`. This means when you start scroll one direction it will lock that direction and not let you scroll a different way. In our case once you start swiping left/right you can only swipe left/right.
Back to point 1, we have to set the height specifically here.</p>

<p>This is what we have now.</p>

<p><img class="<a" src="href="http://i.imgur.com/DTFHAvu.gif">http://i.imgur.com/DTFHAvu.gif</a>" title="Scroll In a Scroll" ></p>

<h1>Animate the Background Color</h1>

<p>```
  _renderRow: function(value, index) {</p>

<pre><code>var bgColor = this.state.colors[index].interpolate({
  inputRange: [
    GREY,
    GREEN,
    RED
  ],
  outputRange: [
    'rgb(180, 180, 180)', // GREY
    'rgb(63, 236, 35)', // GREEN
    'rgb(233, 19, 19)', // RED
  ],
});

return (
    &lt;View 
      style={styles.row}
      key={index}
    &gt;
      &lt;AnimatedScrollView
        horizontal={true}
        directionalLockEnabled={true}
        style={[{flex: 1, height: 100}, {backgroundColor: bgColor}]}
        onScroll={this._animateScroll.bind(this, index)}
        scrollEventThrottle={16}
      &gt;
        &lt;View style=&gt;
          &lt;Text&gt;{value + "  &lt;----- Slide the row that way and release"}&lt;/Text&gt;
        &lt;/View&gt;
      &lt;/AnimatedScrollView&gt;
    &lt;/View&gt;
)
</code></pre>

<p>  },
<code>``
We need to create an interpolation. How the interpolation works is given a value, in our case colors that are just an array of values</code>[0,1,2]<code>will return a new value which corresponds to the</code>outputRange<code>. So when the</code>this.state.colors[index]<code>value is</code>0<code>it will return</code>GREY<code>or</code>rgb(180, 180, 180)<code>, and so on and so forth. When it changes from</code>GREY<code>to</code>GREEN<code>it'll animate to the new color of</code>rgb(63, 236, 35)`.</p>

<p>This is where we use the <code>AnimatedScrollView</code> we created before. This will correctly take the animated value we pass in a grab the interpolatd background.</p>

<p>We pass in a function to onScroll and setup the <code>scrollEventThrottle</code> with the default value. This means our scroll event will be called every 16 millseconds.</p>

<p>```
  _animateScroll: function(index, e) {</p>

<pre><code>var threshold = width / 5;
var x = e.nativeEvent.contentOffset.x;
var target = null;

x = x * -1;

if (x &gt; -50 &amp;&amp; this._target != GREY) {
  target = GREY;
} else if (x &lt; -50 &amp;&amp; x &gt; -threshold &amp;&amp; this._target != GREEN) {
  target = GREEN;
} else if (x &lt; -threshold &amp;&amp; this._target != RED) {
  target = RED;
}

if (target !== null) {
  this._target = target;
  this._targetIndex = index;

  Animated.timing(this.state.colors[index], {
    toValue: target,
    duration: 180,
  }).start();
}
</code></pre>

<p>  },
```</p>

<p>We get the threshold of the <code>deviceWidth</code> we got at the creation of the app. We get the <code>x</code> offset of the scrollView. Finally depending on which direction you want users to swipes to take action we need to multiply ( or not ) by <code>-1</code>. The <code>-1</code> means swiping right to left will cause the actions to trigger.</p>

<p>We setup various thresholds to animate to. Start is <code>GREY</code>, middle threshold is <code>GREEN</code> and anything greater is <code>RED</code>.</p>

<p>Finally if target isn&rsquo;t null (aka someone did something), we trigger an <code>Animated.timing</code> on our color. This will say for the next 180 milliseconds transition to our target color. This will cause our color interpolation to kick in and transition the background.</p>

<p>Hopefully this all doesn&rsquo;t seem too complicated. We are essentially saying &ldquo;If someone swipes this far make the background color this one&rdquo;.</p>

<h1>Take an action</h1>

<p>```</p>

<pre><code>return (
    &lt;View 
      style={styles.row}
      key={index}
    &gt;
      &lt;AnimatedScrollView
        horizontal={true}
        directionalLockEnabled={true}
        style={[{flex: 1, height: 100}, {backgroundColor: bgColor}]}
        onScroll={this._animateScroll.bind(this, index)}
        scrollEventThrottle={16}
        onMomentumScrollBegin={this.takeAction}
      &gt;
        &lt;View style=&gt;
          &lt;Text&gt;{value + "  &lt;----- Slide the row that way and release"}&lt;/Text&gt;
        &lt;/View&gt;
      &lt;/AnimatedScrollView&gt;
    &lt;/View&gt;
)
</code></pre>

<p>  },
```</p>

<p>We do have to dig through the internal code a bit but a seemingly undocumented action of the <code>ScrollResponder</code> is the <code>onMomentumScrollBegin</code>. From the code comments this function is called when <code>When releasing the view starts bouncing back</code>. So the user has released, and the row is about to scroll back into the 0 position.</p>

<p>Why this action? Well we setup things to operate on the scroll actions. Any other event would cause the actions the user want to take to be wrong since the <code>onScroll</code> events will be fired when the user releases.</p>

<p>We should add some protection code and such, but you can implement that.</p>

<p>```
  takeAction: function() {</p>

<pre><code>this.setState({
  action: true
});
</code></pre>

<p>  },
```
Here we just are causing a re-render so our app updates with the state below. However in this particular method you would actually take an action based upon the offset the person swiped to.</p>

<p>```
  getActionText: function() {</p>

<pre><code>var actionText = '';

if (this.state.action) {
  if (this._target == GREEN) {
    actionText = 'Save Action';
  } else if (this._target == RED) {
    actionText = 'Delete Action'
  } else {
    actionText = 'No Action';
  }

  return 'You took "' + actionText + '" on the ' + this._targetIndex + ' row';
}

return 'You have not taken an action yet';
</code></pre>

<p>  },
```
Just determing text to show to the user.</p>

<h1>Final code</h1>

<p>This is a pretty nice technique, and some what simple to implement but as mentioned it has some drawbacks.</p>

<p>Check it out here live <a href="https://rnplay.org/apps/LDI42g">https://rnplay.org/apps/LDI42g</a>.</p>

<p>```
var React = require(&lsquo;react-native&rsquo;);
var Dimensions = require(&lsquo;Dimensions&rsquo;);</p>

<p>var {
  width,
  height
} = Dimensions.get(&lsquo;window&rsquo;);</p>

<p>var {
  AppRegistry,
  StyleSheet,
  ScrollView,
  ListView,
  View,
  Text,
  Animated
} = React;</p>

<p>var GREY = 0;
var GREEN = 1;
var RED = 2;</p>

<p>var values = [1,2,3,4];</p>

<p>var AnimatedScrollView = Animated.createAnimatedComponent(ScrollView);</p>

<p>var AnimatedFlick = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {
    values: values,
    colors: values.map( () =&gt; new Animated.Value(GREY) )
};
</code></pre>

<p>  },
  _animateScroll: function(index, e) {</p>

<pre><code>var threshold = width / 5;
var x = e.nativeEvent.contentOffset.x;
var target = null;

x = x * -1;

if (x &gt; -50 &amp;&amp; this._target != GREY) {
  target = GREY;
} else if (x &lt; -50 &amp;&amp; x &gt; -threshold &amp;&amp; this._target != GREEN) {
  target = GREEN;
} else if (x &lt; -threshold &amp;&amp; this._target != RED) {
  target = RED;
}

if (target !== null) {
  this._target = target;
  this._targetIndex = index;

  Animated.timing(this.state.colors[index], {
    toValue: target,
    duration: 180,
  }).start();
}
</code></pre>

<p>  },
  takeAction: function() {</p>

<pre><code>this.setState({
  action: true
});
</code></pre>

<p>  },
  getActionText: function() {</p>

<pre><code>var actionText = '';

if (this.state.action) {
  if (this._target == GREEN) {
    actionText = 'Save Action';
  } else if (this._target == RED) {
    actionText = 'Delete Action'
  } else {
    actionText = 'No Action';
  }

  return 'You took "' + actionText + '" on the ' + this._targetIndex + ' row';
}

return 'You have not taken an action yet';
</code></pre>

<p>  },
  _renderRow: function(value, index) {</p>

<pre><code>var bgColor = this.state.colors[index].interpolate({
  inputRange: [
    GREY,
    GREEN,
    RED
  ],
  outputRange: [
    'rgb(180, 180, 180)',
    'rgb(63, 236, 35)',
    'rgb(233, 19, 19)',
  ],
});

return (
    &lt;View 
      style={styles.row}
      key={index}
    &gt;
      &lt;AnimatedScrollView
        horizontal={true}
        directionalLockEnabled={true}
        style={[{flex: 1, height: 100}, {backgroundColor: bgColor}]}
        onScroll={this._animateScroll.bind(this, index)}
        scrollEventThrottle={16}
        onMomentumScrollBegin={this.takeAction}
      &gt;
        &lt;View style=&gt;
          &lt;Text&gt;{value + "  &lt;----- Slide the row that way and release"}&lt;/Text&gt;
        &lt;/View&gt;
      &lt;/AnimatedScrollView&gt;
    &lt;/View&gt;
)
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
    &lt;ScrollView style={styles.outerScroll}&gt;
      {this.state.values.map(this._renderRow, this)}
    &lt;/ScrollView&gt;
    &lt;Text&gt;{this.getActionText()}&lt;/Text&gt;
  &lt;/View&gt;
);
</code></pre>

<p>  }
});</p>

<p>var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1,
flexDirection: 'column'
</code></pre>

<p>  },
  outerScroll: {</p>

<pre><code>flex: 1,
flexDirection: 'column'
</code></pre>

<p>  },
  row: {</p>

<pre><code>flex: 1
</code></pre>

<p>  }
});</p>

<p>AppRegistry.registerComponent(&lsquo;AnimatedFlick&rsquo;, () => AnimatedFlick);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React-native Animated API Basic Example]]></title>
    <link href="http://browniefed.com/blog/2015/07/26/react-native-animated-api-basic-example/"/>
    <updated>2015-07-26T11:51:00-07:00</updated>
    <id>http://browniefed.com/blog/2015/07/26/react-native-animated-api-basic-example</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Animations are finally solved in React? That&rsquo;s a bold claim, but lets explore the new Animated API in <code>react-native</code>. This won&rsquo;t apply to React for the web, however there is also <a href="https://github.com/chenglou/react-motion">react-motion</a> also released at <code>react-europe</code>.</p>

<p><img class="<a" src="href="http://i.imgur.com/JlX4nV0.gif">http://i.imgur.com/JlX4nV0.gif</a>" title="Final Animation Result" ></p>

<!-- more -->


<h1>Resources</h1>

<ul>
<li><a href="https://www.youtube.com/watch?v=1tavDv5hXpo">Cheng Lou &ndash; The State of Animation in React at react-europe 2015</a></li>
<li><a href="https://github.com/chenglou/react-motion">react-motion &ndash; Github</a></li>
<li><a href="https://facebook.github.io/react-native/docs/animations.html#content">React Native Animation API</a></li>
<li><a href="https://www.youtube.com/watch?v=xDlfrcM6YBk">Spencer Ahrens &ndash; React Native: Building Fluid User Experiences at react-europe 2015</a></li>
</ul>


<h1>How It Works</h1>

<p>The Animated API does not depend on calling <code>setState</code>, it is accomplished by calling <code>setNativeProps</code>. The Animated API exports a few components <code>Animated.View</code>, <code>Animated.Text</code>, and <code>Animated.Image</code>. The Animated API will adjust the components in the native Objective-C world. This will bypass the diff and reconciliation in the JS world so you get fluent, and performance animatons. Ultimately all you need to know is that it will interpolate numbers and update the native view components.</p>

<h1>Cool Examples</h1>

<ul>
<li><a href="https://github.com/brentvatne/react-native-animated-demo-tinder">https://github.com/brentvatne/react-native-animated-demo-tinder</a></li>
<li><a href="https://github.com/facebook/react-native/tree/master/Examples/UIExplorer/AnimationExample">UIExplorer Animated example</a></li>
</ul>


<h1>Simple Move Around the Screen Example</h1>

<p>We are just going to move a square around the edges of the screen.</p>

<p><code>
&lt;--&lt;           
|  |          
V--^         
</code></p>

<h1>Setup</h1>

<p>Dependencies</p>

<p>```
var React = require(&lsquo;react-native&rsquo;);
var Dimensions = require(&lsquo;Dimensions&rsquo;);</p>

<p>var {
  width,
  height
} = Dimensions.get(&lsquo;window&rsquo;);</p>

<p>var {
  AppRegistry,
  StyleSheet,
  View,
  Animated
} = React;</p>

<p>var SQUARE_DIMENSIONS = 30;</p>

<p>```</p>

<p>Styles</p>

<p>```
var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1
</code></pre>

<p>  },
  square: {</p>

<pre><code>width: SQUARE_DIMENSIONS,
height: SQUARE_DIMENSIONS,
backgroundColor: 'blue'
</code></pre>

<p>  }
});
```</p>

<p>Basic Code</p>

<p>```</p>

<p>var AnimatedSquare = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {
    pan: new Animated.ValueXY()
};
</code></pre>

<p>  },
  getStyle: function() {</p>

<pre><code>return [
          styles.square, 
          {
            transform: this.state.pan.getTranslateTransform()
          }
        ];
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
    &lt;Animated.View style={this.getStyle()} /&gt;
  &lt;/View&gt;
);
</code></pre>

<p>  }
});
```</p>

<p>Few things to call out here.</p>

<p>Notice our state that is created is an instantiation of <code>Animated.ValueXY</code>. This will save us some code, and let the <code>Animated</code> API take care of interpolating both our X, and Y values.</p>

<p>Our <code>getStyle</code> will return an array, our base <code>square</code> class and a <code>transform</code>. Once again we&rsquo;ll use a the <code>getTranslateTransform</code> helper from the <code>Animated</code> API to return the appropriate structure for the transform style.</p>

<p>It returns <code>[{ translateX: xValue}, {translateY: yValue}]</code>, where <code>xValue</code> and <code>yValue</code> are the interpolated values from the <code>Animated.ValueXY</code> we set on our <code>pan</code> state variable.</p>

<p>Finally we will use the <code>Animated.View</code> which is a convenience element to say &ldquo;Hey React this is going to be an animated thing&rdquo;.</p>

<h1>Move It</h1>

<p>We&rsquo;re now going to move it from the top corner. <code>x = 0, y = 0</code> to the bottom left corner <code>x = 0, y = (phoneHeight - square Height)</code>.</p>

<p>```
var SPRING_CONFIG = {tension: 2, friction: 3}; //Soft spring</p>

<p>//&hellip;
  componentDidMount: function() {</p>

<pre><code>Animated.spring(this.state.pan, {
      ...SPRING_CONFIG,
      toValue: {x: 0, y: height - SQUARE_DIMENSIONS}                        // return to start
}).start();
</code></pre>

<p>  },
```</p>

<p>So on mount we&rsquo;ll start a spring. This will animate the <code>this.state.pan</code> to the bottom left corner like we want it to.</p>

<p>We&rsquo;ll also setup the <code>SPRING_CONFIG</code> with a soft spring, not much tension or friction. So it&rsquo;ll get to the corner and just bounce a little bit and stay there.</p>

<h1>Move It, Move It, and Move It again</h1>

<p>We can queue up sequences of animations. These will happen one after the other.
The <code>sequence</code> call is one of the means of composing animations. There is also <code>parallel</code> which allows for declaration of animations to happen at the same time.</p>

<p>```
  componentDidMount: function() {</p>

<pre><code>Animated.sequence([
  Animated.spring(this.state.pan, {
        ...SPRING_CONFIG,
        toValue: {x: 0, y: height - SQUARE_DIMENSIONS} //animate to bottom left
  }),
  Animated.spring(this.state.pan, {
      ...SPRING_CONFIG,
      toValue: {x: width - SQUARE_DIMENSIONS, y: height - SQUARE_DIMENSIONS} // animated to bottom right
  }),
  Animated.spring(this.state.pan, {
        ...SPRING_CONFIG,
        toValue: {x: width - SQUARE_DIMENSIONS, y: 0} //animate to top right
  }),
  Animated.spring(this.state.pan, {
      ...SPRING_CONFIG,
      toValue: {x: 0, y: 0} // return to start
  })
]).start();
</code></pre>

<p>  }
```</p>

<p>We define 4 spring configrations like discussed before. The comments in the code explain each movement.</p>

<h1>Move and Repeat</h1>

<p>The call to <code>start</code> takes a callback. This callback will be invoked once the animation is completed. In our case the animation is complete once we get back to the start. We can then restart the animation.</p>

<p>```
  componentDidMount: function() {</p>

<pre><code>this.startAndRepeat();
</code></pre>

<p>  },
  startAndRepeat: function() {</p>

<pre><code>this.triggerAnimation(this.startAndRepeat);
</code></pre>

<p>  },
  triggerAnimation: function(cb) {</p>

<pre><code>Animated.sequence([
  Animated.spring(this.state.pan, {
        ...SPRING_CONFIG,
        toValue: {x: 0, y: height - SQUARE_DIMENSIONS} //animate to bottom left
  }),
  Animated.spring(this.state.pan, {
      ...SPRING_CONFIG,
      toValue: {x: width - SQUARE_DIMENSIONS, y: height - SQUARE_DIMENSIONS} // animated to bottom right
  }),
  Animated.spring(this.state.pan, {
        ...SPRING_CONFIG,
        toValue: {x: width - SQUARE_DIMENSIONS, y: 0} //animate to top right
  }),
  Animated.spring(this.state.pan, {
      ...SPRING_CONFIG,
      toValue: {x: 0, y: 0} // return to start
  })
]).start(cb);
</code></pre>

<p>  }
```</p>

<p>We just make a call that triggers the animation and calls itself on complete.</p>

<h1>Full/Live Code</h1>

<h2><a href="https://rnplay.org/apps/QlPJ2Q">https://rnplay.org/apps/QlPJ2Q</a></h2>

<p>```
var React = require(&lsquo;react-native&rsquo;);
var Dimensions = require(&lsquo;Dimensions&rsquo;);</p>

<p>var {
  width,
  height
} = Dimensions.get(&lsquo;window&rsquo;);</p>

<p>var {
  AppRegistry,
  StyleSheet,
  View,
  Animated
} = React;</p>

<p>var SQUARE_DIMENSIONS = 30;
var SPRING_CONFIG = {tension: 2, friction: 3}; //Soft spring</p>

<p>var AnimatedSquare = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {
    pan: new Animated.ValueXY()
};
</code></pre>

<p>  },
  componentDidMount: function() {</p>

<pre><code>this.startAndRepeat();
</code></pre>

<p>  },
  startAndRepeat: function() {</p>

<pre><code>this.triggerAnimation(this.startAndRepeat);
</code></pre>

<p>  },
  triggerAnimation: function(cb) {</p>

<pre><code>Animated.sequence([
  Animated.spring(this.state.pan, {
        ...SPRING_CONFIG,
        toValue: {x: 0, y: height - SQUARE_DIMENSIONS} //animate to bottom left
  }),
  Animated.spring(this.state.pan, {
      ...SPRING_CONFIG,
      toValue: {x: width - SQUARE_DIMENSIONS, y: height - SQUARE_DIMENSIONS} // animated to bottom right
  }),
  Animated.spring(this.state.pan, {
        ...SPRING_CONFIG,
        toValue: {x: width - SQUARE_DIMENSIONS, y: 0} //animate to top right
  }),
  Animated.spring(this.state.pan, {
      ...SPRING_CONFIG,
      toValue: {x: 0, y: 0} // return to start
  })
]).start(cb);
</code></pre>

<p>  },
  getStyle: function() {</p>

<pre><code>return [
          styles.square, 
          {
            transform: this.state.pan.getTranslateTransform()
          }
        ];
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
    &lt;Animated.View style={this.getStyle()} /&gt;
  &lt;/View&gt;
);
</code></pre>

<p>  }
});</p>

<p>var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1
</code></pre>

<p>  },
  square: {</p>

<pre><code>width: SQUARE_DIMENSIONS,
height: SQUARE_DIMENSIONS,
backgroundColor: 'blue'
</code></pre>

<p>  }
});</p>

<p>AppRegistry.registerComponent(&lsquo;AnimatedSquare&rsquo;, () => AnimatedSquare);</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React-Native Tinder like cards]]></title>
    <link href="http://browniefed.com/blog/2015/06/06/react-native-tinder-like-cards/"/>
    <updated>2015-06-06T19:33:00-07:00</updated>
    <id>http://browniefed.com/blog/2015/06/06/react-native-tinder-like-cards</id>
    <content type="html"><![CDATA[<h1>CHECK OUT ====> <a href="https://github.com/brentvatne/react-native-animated-demo-tinder">https://github.com/brentvatne/react-native-animated-demo-tinder</a> for a better demo with the new Animated API!!!</h1>

<h2>Intro</h2>

<p>The test of all good frameworks is how easy it is to implement Tinder right? Well with <code>react-native</code> we do get the benefits of flex box as well as some transforms which we&rsquo;ll take advantage of.</p>

<p>We don&rsquo;t have access to an easy physics, even though they were added in IOS7. If you&rsquo;d like physics you can use some JavaScript libraries like <code>rebound</code> <a href="https://github.com/facebook/rebound-js">https://github.com/facebook/rebound-js</a> from Facebook, or any others that don&rsquo;t require a DOM.</p>

<p>What we&rsquo;ll make</p>

<p><img class="<a" src="href="http://i.imgur.com/tTcT7xJ.png">http://i.imgur.com/tTcT7xJ.png</a>" title="End Result" ></p>

<!-- more -->


<h2>Concept</h2>

<p>We&rsquo;ll create a card. On touch press/grant we&rsquo;ll figure out the offset of the card to the touch and start generating the transform to move/rotate the card.</p>

<p>Well use the <code>style</code> <code>transform</code> property which we can find documentation here <a href="https://facebook.github.io/react-native/docs/transforms.html#proptypes">https://facebook.github.io/react-native/docs/transforms.html#proptypes</a>. However documentation is a little skimpy.</p>

<p>It&rsquo;s mostly straight forward once you dive in though.</p>

<h2>What we won&rsquo;t do.</h2>

<p>Physics. You can implement a bouncy spring system, but we&rsquo;ll keep it simple with a drag concept.</p>

<h2>Create a basic card</h2>

<p>We&rsquo;ll create a basic wrapper container and then create a card View.
We&rsquo;ll center everyting inside of our container using <code>alignItems</code> and <code>justifyContent</code> both <code>center</code>
Our card will just be <code>300</code> by <code>300</code>, with a little padding, and border.</p>

<p>```
render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
      &lt;View
        style={styles.card}
      &gt;
      &lt;/View&gt;
  &lt;/View&gt;
);
</code></pre>

<p>}</p>

<p>var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1,
alignItems: 'center',
justifyContent: 'center'
</code></pre>

<p>  },
  card: {</p>

<pre><code>borderWidth: 3,
borderRadius: 3,
borderColor: '#000',
width: 300,
height: 300,
padding: 10
</code></pre>

<p>  }
  });</p>

<p>```</p>

<p>Now that we have a generic card we can make it look a little nicer with an image, and some text.</p>

<h2>Add an Image/Text to card</h2>

<p>We&rsquo;ll add an image and set to a particular height. There is a current issue in <code>react-native</code> that doesn&rsquo;t maintain aspect ratio but that will be taken care of eventually.</p>

<p>We wrap our <code>Text</code> elements in <code>View</code> and position each <code>Text</code> item on the left and right.
There is a way to do this with flexbox but positioning like this is a little more explicit.</p>

<p>```
render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
      &lt;View
        style={styles.card}
      &gt;
        &lt;Image source= style={styles.cardImage} /&gt;
        &lt;View&gt;
          &lt;Text style={styles.textLeft}&gt;Rabbit, 10&lt;/Text&gt;
          &lt;Text style={styles.textRight}&gt;1 Connection&lt;/Text&gt;
        &lt;/View&gt;
      &lt;/View&gt;
  &lt;/View&gt;
);
</code></pre>

<p>}</p>

<p>var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1,
alignItems: 'center',
justifyContent: 'center'
</code></pre>

<p>  },
  card: {</p>

<pre><code>borderWidth: 3,
borderRadius: 3,
borderColor: '#000',
width: 300,
height: 300,
padding: 10
</code></pre>

<p>  },
  cardImage: {</p>

<pre><code>height: 260,
</code></pre>

<p>  },
  textLeft: {</p>

<pre><code>position: 'absolute',
left:0,
top:0
</code></pre>

<p>  },
  textRight: {</p>

<pre><code>position: 'absolute',
right: 0,
top: 0
</code></pre>

<p>  }
});</p>

<p>```</p>

<h2>Things to know about style</h2>

<p>Alright so there seems to be a lack of documentation around style in general. But <code>style</code> actually can receive an array.</p>

<p>You are capable of specifying a default layout, however doing overrides. For example take our card layout.</p>

<p>```
  card: {</p>

<pre><code>borderWidth: 3,
borderRadius: 3,
borderColor: '#000',
width: 300,
height: 300,
padding: 10
</code></pre>

<p>  }</p>

<p>```</p>

<p>This gets applied, but what if at some point in time we wanted to change the <code>borderColor</code> based on <code>state</code>.
Well we just override it on the style attribute like so</p>

<p>```</p>

<pre><code>&lt;View style={[styles.card, {borderColor: '#CCC'}]} /&gt;
</code></pre>

<p>```
So now the borderColor has a default but can be changed by just passing in an object.</p>

<p>This goes for <code>transform</code> as well which will set us up for the next challenge, actually dragging.</p>

<h2>Add in Drag</h2>

<p>We&rsquo;ll use the gesture responder system. The robustness is great, however I was expecting a little more information like deltas over the course of each drag update. We aren&rsquo;t given that to my knowledge so we&rsquo;ll computer it ourselves.</p>

<p>How the gesture system works is it must ask each element that has a gesture responder if it should be allowed to drag or not. In our case we have one element and minimal logic so we&rsquo;ll just return true. However at any point you can cancel a gesture by returning false.</p>

<p>In our case you need to respond <code>true</code> to <code>onStartShouldSetResponder</code> and then each subsequent move <code>onMoveShouldSetResponder</code>. If those return true then it will call <code>onResponderMove</code> each time with the new event.</p>

<p>We&rsquo;ll use <code>_onStartShouldSetResponder</code> function to setup our initial drag. Each subsequent move we subtract and get the delta of the move.</p>

<p>```
  getInitialState: function() {</p>

<pre><code>return {
  x: 0,
  y: 0
}
</code></pre>

<p>  },
  setPosition: function(e) {</p>

<pre><code>//Update our state with the deltaX/deltaY of the movement
this.setState({
  x: this.state.x + (e.nativeEvent.pageX - this.drag.x),
  y: this.state.y + (e.nativeEvent.pageY - this.drag.y)
});
//Set our drag to be the new position so our delta can be calculated next time correctly
this.drag.x = e.nativeEvent.pageX;
this.drag.y = e.nativeEvent.pageY;
</code></pre>

<p>  },
  resetPosition: function(e) {</p>

<pre><code>this.dragging = false;
//Reset on release
this.setState({
  x: 0,
  y: 0,
})
</code></pre>

<p>  },
  _onStartShouldSetResponder: function(e) {</p>

<pre><code>this.dragging = true;
//Setup initial drag coordinates
this.drag = {
  x: e.nativeEvent.pageX,
  y: e.nativeEvent.pageY
}
return true;
</code></pre>

<p>  },
  _onMoveShouldSetResponder: function(e) {</p>

<pre><code>return true;
</code></pre>

<p>  },
  getCardStyle: function() {</p>

<pre><code>var transform = [{translateX: this.state.x}, {translateY: this.state.y}];
return {transform: transform};
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
      &lt;View
        onResponderMove={this.setPosition}
        onResponderRelease={this.resetPosition}
        onStartShouldSetResponder={this._onStartShouldSetResponder}
        onMoveShouldSetResponder={this._onMoveShouldSetResponder}
        style={[styles.card, this.getCardStyle()]}
      &gt;
        &lt;Image source= style={styles.cardImage} /&gt;
        &lt;View style={styles.cardTextContainer}&gt;
          &lt;Text style={styles.textLeft}&gt;Rabbit, 10&lt;/Text&gt;
          &lt;Text style={styles.textRight}&gt;1 Connection&lt;/Text&gt;
        &lt;/View&gt;
      &lt;/View&gt;
  &lt;/View&gt;
);
</code></pre>

<p>  }
});
```</p>

<p>So now when a user press down on our card and starts dragging it&rsquo;ll move around. On release it&rsquo;ll snap back to position <code>0,0</code>.</p>

<p>You can see we use the <code>translateX</code> and <code>translateY</code> transform properties. These will cause the ability for the card to be dragged around but not have to make it position absolute.</p>

<h2>Add in Rotate</h2>

<p>With Tinder and other card style systems as you drag the card left or right it will slightly rotate. It also rotates differently depending on the position you grab the card from (generally top or bottom).</p>

<p>The <code>transform</code> property on style also has a <code>rotate</code> option. This seems weird but it takes a string. That string can be something like <code>30deg</code> or <code>.05rad</code>. So it offers some flexibility. We&rsquo;ll use <code>degrees</code> since it&rsquo;s the easiest to comprehend.</p>

<p>We don&rsquo;t need to add anything to the view, just determine if we grabbed the card on the <code>top</code> or the <code>bottom</code>. Then depending on the offset drag make it rotate more as we move.</p>

<p>```
//Top of file
var Dimensions = require(&lsquo;Dimensions&rsquo;);
var windowSize = Dimensions.get(&lsquo;window&rsquo;);</p>

<p>//&hellip;
  _onStartShouldSetResponder: function(e) {</p>

<pre><code>this.dragging = true;

this.rotateTop = e.nativeEvent.locationY &lt;= 150;

this.drag = {
  x: e.nativeEvent.pageX,
  y: e.nativeEvent.pageY
}

return true;
</code></pre>

<p>  },
  getRotationDegree: function(rotateTop, x) {</p>

<pre><code>var rotation = ( (x/windowSize.width) * 100)/3;

var rotate = rotateTop ? 1 : -1,
    rotateString = (rotation * rotate) + 'deg';

return rotateString;
</code></pre>

<p>  },
  getCardStyle: function() {</p>

<pre><code>var transform = [{translateX: this.state.x}, {translateY: this.state.y}];

if (this.dragging) {
    transform.push({rotate: this.getRotationDegree(this.rotateTop, this.state.x)})
}

return {transform: transform};
</code></pre>

<p>  }
```</p>

<p>So we modify <code>_onStartShouldSetResponder</code> to determine wheter we grabbed top or bottom. We use the <code>locationY</code> property which is the point on the card that was touched. Since the card dimensions are <code>300x300</code> that means if the card was touched anywhere between <code>0 to 150</code> then it was touched on top.</p>

<p>Our <code>getCardStyle</code> will push a <code>rotate</code> object on if we are dragging.</p>

<p>We need to know how far around the screen you have dragged it from the center point.
So we get the screen dimensions, divide the width by the <code>pageX</code> coordinate which is just position of the element relative to the entire screen. To convert to degrees we multiply by <code>100</code> and divide by <code>3</code> to reduce the rotation.</p>

<p>If we touched on the bottom then we want to do a reverse rotation so we multiply by <code>-1</code>  and return a string that would return a value like <code>20.123deg</code> or <code>-20.123deg</code>.</p>

<h2>Add in Release Text</h2>

<p>Great we have dragging, we have rotating. Now how do we know which way they let go?
Well we can use those window dimensions and the <code>pageX</code> movement to determine if the card was released on the left or right.</p>

<p>```
  resetPosition: function(e) {</p>

<pre><code>this.dragging = false;
var left = e.nativeEvent.pageX &lt; (windowSize.width/2),
    displayText = left ? 'Released left' : 'Released right';

this.setState({
  x: 0,
  y: 0,
  lastDragDirectio: displayText
})
</code></pre>

<p>  },
```</p>

<h2>Final Code</h2>

<p>```
&lsquo;use strict&rsquo;;</p>

<p>var React = require(&lsquo;react-native&rsquo;);
var Dimensions = require(&lsquo;Dimensions&rsquo;);
var windowSize = Dimensions.get(&lsquo;window&rsquo;);</p>

<p>var {
  StyleSheet,
  AppRegistry,
  Text,
  View,
  ActivityIndicatorIOS,
  Image,
  Navigator,
  TouchableOpacity,
  Animation
} = React;</p>

<p>var Application = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {
  x: 0,
  y: 0,
  lastDragDirectio: 'Drag and Release'
}
</code></pre>

<p>  },
  setPosition: function(e) {</p>

<pre><code>this.setState({
  x: this.state.x + (e.nativeEvent.pageX - this.drag.x),
  y: this.state.y + (e.nativeEvent.pageY - this.drag.y)
});
this.drag.x = e.nativeEvent.pageX;
this.drag.y = e.nativeEvent.pageY;
</code></pre>

<p>  },
  resetPosition: function(e) {</p>

<pre><code>this.dragging = false;
var left = e.nativeEvent.pageX &lt; (windowSize.width/2),
    displayText = left ? 'Released left' : 'Released right';

this.setState({
  x: 0,
  y: 0,
  lastDragDirectio: displayText
})
</code></pre>

<p>  },
  getRotationDegree: function(rotateTop, x) {</p>

<pre><code>var rotation = ( (x/windowSize.width) * 100)/3;

var rotate = rotateTop ? 1 : -1,
    rotateString = (rotation * rotate) + 'deg';

return rotateString;
</code></pre>

<p>  },
  getCardStyle: function() {</p>

<pre><code>var transform = [{translateX: this.state.x}, {translateY: this.state.y}];

if (this.dragging) {
    transform.push({rotate: this.getRotationDegree(this.rotateTop, this.state.x)})
}

return {transform: transform};
</code></pre>

<p>  },
  _onStartShouldSetResponder: function(e) {</p>

<pre><code>this.dragging = true;

this.rotateTop = e.nativeEvent.locationY &lt;= 150;

this.drag = {
  x: e.nativeEvent.pageX,
  y: e.nativeEvent.pageY
}

return true;
</code></pre>

<p>  },
  _onMoveShouldSetResponder: function(e) {</p>

<pre><code>return true;
</code></pre>

<p>  },
  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
      &lt;View
        onResponderMove={this.setPosition}
        onResponderRelease={this.resetPosition}
        onStartShouldSetResponder={this._onStartShouldSetResponder}
        onMoveShouldSetResponder={this._onMoveShouldSetResponder}
        style={[styles.card, this.getCardStyle()]}
      &gt;
        &lt;Image source= style={styles.cardImage} /&gt;
        &lt;View style={styles.cardTextContainer}&gt;
          &lt;Text style={styles.textLeft}&gt;Rabbit, 10&lt;/Text&gt;
          &lt;Text style={styles.textRight}&gt;1 Connection&lt;/Text&gt;
        &lt;/View&gt;
      &lt;/View&gt;
      &lt;View style={styles.dragText}&gt;
        &lt;Text&gt;{this.state.lastDragDirectio}&lt;/Text&gt;
      &lt;/View&gt;
  &lt;/View&gt;
);
</code></pre>

<p>  }
});</p>

<p>var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1,
alignItems: 'center',
justifyContent: 'center'
</code></pre>

<p>  },
  dragText: {</p>

<pre><code>position: 'absolute',
bottom: 0,
left: 0
</code></pre>

<p>  },
  card: {</p>

<pre><code>borderWidth: 3,
borderRadius: 3,
borderColor: '#000',
width: 300,
height: 300,
padding: 10
</code></pre>

<p>  },
  cardImage: {</p>

<pre><code>height: 260,
</code></pre>

<p>  },
  textLeft: {</p>

<pre><code>position: 'absolute',
left:0,
top:0
</code></pre>

<p>  },
  textRight: {</p>

<pre><code>position: 'absolute',
right: 0,
top: 0
</code></pre>

<p>  }
});</p>

<p>module.exports = Application;
```</p>

<h2>Result</h2>

<p><img class="<a" src="href="http://i.imgur.com/q7siPyO.gif">http://i.imgur.com/q7siPyO.gif</a>" title="End Result" ></p>

<p>You can check out and play with the end result here.</p>

<h2>Preview Online!</h2>

<p>Thanks to React Native Playground you can play with this code live online.</p>

<p><a href="https://rnplay.org/apps/6uPJug">https://rnplay.org/apps/6uPJug</a></p>

<p>Your homework can be to add a bounce when the card is released.</p>
]]></content>
  </entry>
  
</feed>
