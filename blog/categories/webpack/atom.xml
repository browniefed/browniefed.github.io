<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webpack | JavaScript Without Grammar]]></title>
  <link href="http://browniefed.com/blog/categories/webpack/atom.xml" rel="self"/>
  <link href="http://browniefed.com/"/>
  <updated>2015-05-02T08:37:42-07:00</updated>
  <id>http://browniefed.com/</id>
  <author>
    <name><![CDATA[Jason Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Webpack and Compass]]></title>
    <link href="http://browniefed.com/blog/2014/12/24/webpack-and-compass/"/>
    <updated>2014-12-24T10:46:00-08:00</updated>
    <id>http://browniefed.com/blog/2014/12/24/webpack-and-compass</id>
    <content type="html"><![CDATA[<p>Webpack is the greatest and latest in build systems. Every time I encounter an issue or wish Webpack did something a little googling solves the problem.</p>

<p>One problem that I couldn&rsquo;t google and figure out was getting compass to work with <code>sass-loader</code>. Not just making it work but still allowing regular compass to compile on the command line.</p>

<p>Thankfully there is a mostly simple solution. The only thing (to my knowledge) that this won&rsquo;t work with is sprite generation. Sounds like we need another loader.</p>

<p>Lets get to it.</p>

<p>This is all assuming you have webpack installed with a basic config.
If that isn&rsquo;t the case we&rsquo;ll need <code>webpack</code>, <code>raw-loader</code>, <code>style-loader</code>, and <code>sass-loader</code> npm installed.</p>

<p>Your webpack config may look something along the lines of</p>

<p>```</p>

<pre><code>    module: {
        loaders: [
            { 
                test: /\.scss$/, 
                loader: "style-loader!raw-loader!sass-loader"
            }
        ]
    }
</code></pre>

<p>```</p>

<p>This is where you&rsquo;re running into your issue where <code>node-sass</code> can&rsquo;t find the compass import.</p>

<p>Thanks to igosuki, compass mixins has been ported to just a bunch of sass-mixins outside of the ruby gem. <a href="https://github.com/Igosuki/compass-mixins.">https://github.com/Igosuki/compass-mixins.</a></p>

<p>So now do a</p>

<p>```
npm install compass-mixins &mdash;save</p>

<p>```</p>

<p>Now we just need to modify our loader config.</p>

<p>```</p>

<pre><code>    module: {
        loaders: [
            { 
                test: /\.scss$/, 
                loader: "style-loader!raw-loader!sass-loader?includePaths[]=" + path.resolve(__dirname, "./node_modules/compass-mixins/lib")
            }
        ]
    }
</code></pre>

<p>```</p>

<p>Now <code>node-sass</code> should be all setup to to look in our <code>compass-mixins/lib</code> to resolve compass mixins.
If you are running your build script from a different location you&rsquo;ll have to adjust the <code>path.resolve</code> to resolve to wherever your <code>node_modules</code> is at.</p>

<p>Alternatively you can place this outside of <code>node_modules</code> or add additional <code>include_paths</code> for wherever your SASS mixins live.</p>

<p>```</p>

<pre><code>    module: {
        loaders: [
            { 
                test: /\.scss$/, 
                loader: "style-loader!raw-loader!sass-loader?includePaths[]=" + path.resolve(__dirname, "./node_modules/compass-mixins/lib") + "&amp;includePaths[]=" + path.resolve(__dirname, "./mixins/app_mixins")
            }
        ]
    }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
