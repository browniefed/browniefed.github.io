<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react-native | JavaScript Without Grammar]]></title>
  <link href="http://browniefed.com/blog/categories/react-native/atom.xml" rel="self"/>
  <link href="http://browniefed.com/"/>
  <updated>2015-05-30T22:11:10-07:00</updated>
  <id>http://browniefed.com/</id>
  <author>
    <name><![CDATA[Jason Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create a map with React-Art]]></title>
    <link href="http://browniefed.com/blog/2015/05/30/create-a-map-with-react-art/"/>
    <updated>2015-05-30T10:15:00-07:00</updated>
    <id>http://browniefed.com/blog/2015/05/30/create-a-map-with-react-art</id>
    <content type="html"><![CDATA[<h3>Intro</h3>

<p>Just Like the title states, we&rsquo;re going to make a map with <code>react-art</code>. When you think of maps many people jump straight to <code>leaflet</code>, <code>google maps</code>, or <code>mapbox</code>. Well one of the key things they are doing is just plotting map tiles.</p>

<p>Map tiles are just images that can be stitched together and form a map. That is why whenever you drag on a map portions of it pop in in squares.</p>

<p>Don&rsquo;t worry, I won&rsquo;t get deep into mapping terminology because I don&rsquo;t know it. If you want to learn checkout this post <a href="http://www.macwright.org/2012/05/15/how-web-maps-work.html">http://www.macwright.org/2012/05/15/how-web-maps-work.html</a></p>

<p>All you&rsquo;ll need to know is <code>Latitude</code>, <code>Longitude</code>, and <code>Tile</code> aka (an image of a piece of a map).</p>

<p>Our tilemap source will be the fabulous <a href="https://www.openstreetmap.org/">OpenStreetMap</a>. It&rsquo;s a community driven mapping solution. Check it out and contribute if you can!</p>

<p>This was going to be a blog post about creating a map but I ended up turning it into a library.</p>

<h3>What I Built</h3>

<p>I ended up writing up a library to show it off.</p>

<p>Checkout <a href="https://github.com/browniefed/react-art-map">https://github.com/browniefed/react-art-map</a> for the library and examples.</p>

<p>We use <a href="https://github.com/zacbarton/node-googlemaps-utils">https://github.com/zacbarton/node-googlemaps-utils</a> and
<a href="https://github.com/gagan-bansal/map-the-tiles">https://github.com/gagan-bansal/map-the-tiles</a>.</p>

<p>These 2 libraries are helper libraries.</p>

<p><code>googlemaps-utils</code> takes a <code>width/height</code> and a central <code>lat/long</code> and gives us a bounding box which is just the <code>top/left</code> coordinate and the <code>bottom/right</code> coordinate.</p>

<p>We then take that bounding box and convert it to meter points so we can generate a <a href="http://en.wikipedia.org/wiki/Mercator_projection">mercator projection</a>.</p>

<p>The <code>map-the-tiles</code> takes those meter points and returns <code>x,y,z</code> points;</p>

<p>Those <code>x,y,z</code> points get fed into the OSM url <code>http://{s}.tile.osm.org/{z}/{x}/{y}.png</code> and we get our tile images.</p>

<p>We can then render them at their given <code>top/left</code> points w/ <code>react-art</code>.</p>

<p>Ultimately this library was built with A LOT of googling and assembling some tools people already constructed.</p>

<h3>Some Internals</h3>

<p>Most of the logic is just in the <code>TileUtil</code>. There are likely much more efficient ways to do this however this is my first stab at it with my limited geo knowledge.</p>

<p>Converts <code>lat/long</code> to meter points
```</p>

<pre><code>degrees2meters(lon,lat) {
    var x = lon * 20037508.34 / 180;
    var y = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);
    y = y * 20037508.34 / 180;
    return [x, y]
}
</code></pre>

<p>```</p>

<p>Converts meters to coordinates
```</p>

<pre><code>meters2degress(x,y) {
    var lon = x *  180 / 20037508.34 ;
    var lat = Number(180 / Math.PI * (2 * Math.atan(Math.exp(y * Math.PI / 180)) - Math.PI / 2));
    return [lon, lat]
}
</code></pre>

<p>```</p>

<p>The main layout generator.</p>

<p>```</p>

<pre><code>getTileLayout(options) {
    var layout = [];
    var bounds = gmu.calcBounds(options.center[1], options.center[0], options.zoom, options.width, options.height); // GET COORDINATE BOUNDS

    var topLeftMeters = TileUtil.degrees2meters(bounds.left, bounds.top),
        bottomRightMeters = TileUtil.degrees2meters(bounds.right, bounds.bottom);

    //Conver the coordinates each to meters

    var tiler = new MapTheTiles(null, options.tileWidth); // Create a generic tiler based on our tile width

    var layoutForBounds = {
        top: topLeftMeters[1],
        left: topLeftMeters[0],
        right: bottomRightMeters[0],
        bottom: bottomRightMeters[1]
    };
    //Pass in the meters for each point

    var tiles = tiler.getTiles(layoutForBounds, options.zoom) // Get the x,y,z points for our zoom level

    tiles.forEach(function(tile) {
        var coordPoint = {
            x: tile.X,
            y: tile.Y,
            z: tile.Z
        },
        coord = {
            x: tile.left,
            y: tile.top,
            img: TileUtil.getTileUrl(options.tileSource, coordPoint, options.subdomains) //Just format the OSM tile resource
        };

        layout.push(coord);
    }, this);

    return layout;
}
</code></pre>

<p>```</p>

<p>This is how we render each tile.
We have the <code>x/y</code> coordinates thanks to our tiler.</p>

<p>We use <code>Paths.js</code> to create a generic rectangular path.
This is so we can support <code>react-native</code> in the future since the shapes have yet to be created.</p>

<p>Then we create a new fill with the tile image and set it to the width/height of the generic tile at <code>0,0</code> of the shape.</p>

<p>This technically is a pattern for the background but because we set it to the exact <code>width/height</code> of the image it just renders the image once.</p>

<p>```
var rectanglePath = Rectangle({
  top: 0,
  left: 0,
  right: 256,
  bottom: 256
}).path.print();
///UP ABOVE</p>

<pre><code>    return layout.map(function(tile) {
        return (
            &lt;Shape
                d={rectanglePath}
                x={tile.x}
                y={tile.y}
                fill={new Pattern(tile.img, this.props.tileWidth , this.props.tileWidth, 0, 0)}
            /&gt;
        )
    }, this);
</code></pre>

<p>```</p>

<h3>The Code</h3>

<p>```
var React = require(&lsquo;react&rsquo;);
var ReactMap = require(&lsquo;react-art-map&rsquo;);
var ReactArt = require(&lsquo;react-art&rsquo;),</p>

<pre><code>Circle = require('react-art/shapes/circle');
</code></pre>

<p>var Map = ReactMap.Map;</p>

<p>var viewportWidth = function() {</p>

<pre><code>return  window.innerWidth - 100;
</code></pre>

<p>}
var viewportHeight = function() {</p>

<pre><code>return window.innerHeight - 100;
</code></pre>

<p>}</p>

<p>var center = [</p>

<pre><code>-122.668197,45.525292
</code></pre>

<p>],
offset = 3;</p>

<p>var Demo = React.createClass({
  getInitialState: function() {</p>

<pre><code>return {
  center: center,
  zoom: 15,
  x: 100
}
</code></pre>

<p>  },
  componentDidMount: function() {</p>

<pre><code>requestAnimationFrame(this.updateCircle);
</code></pre>

<p>  },
  updateCircle: function() {</p>

<pre><code>if (this.state.x &gt;= viewportWidth()) {
    offset = -3;
} else if ( this.state.x &lt;= 99) {
    offset = 3;
}

this.state.x += offset;
this.setState(this.state, function() {
    requestAnimationFrame(this.updateCircle);
});
</code></pre>

<p>  },
  handleDrag: function(newCenter) {</p>

<pre><code>this.setState({
  center: newCenter
});
</code></pre>

<p>  },
  render: function () {</p>

<pre><code>return (
  &lt;div&gt;
    &lt;Map
        width={viewportWidth()}
        height={viewportHeight()}
        center={this.state.center}
        zoom={this.state.zoom}
        tileSource="http://{s}.tile.osm.org/{z}/{x}/{y}.png"
        onDrag={this.handleDrag}
    &gt;
        &lt;Circle 
            x={this.state.x}
            y={100}
            radius={30}
            stroke="#000"
            strokeWidth={5}
        /&gt;
    &lt;/Map&gt;
  &lt;/div&gt;
);
</code></pre>

<p>  }
});</p>

<p>module.exports = Demo;
```</p>

<h3>React Native?!?!?!</h3>

<p>React Native has a map implementation but it doesn&rsquo;t allow for much flexibility. You can render pins but that is about it.</p>

<p>With this library once the Pattern fill gets implemented you can render any map tile based service + any cool visualiztions on the map that you want.</p>

<p>I&rsquo;ve logged an issue here <a href="https://github.com/facebook/react-native/issues/1462">https://github.com/facebook/react-native/issues/1462</a> so follow along for when it gets implemented.</p>

<h3>Results</h3>

<p data-height="624" data-theme-id="0" data-slug-hash="PqWRvz" data-default-tab="result" data-user="browniefed" class='codepen'>See the Pen <a href='http://codepen.io/browniefed/pen/PqWRvz/'>PqWRvz</a> by Jason Brown (<a href='http://codepen.io/browniefed'>@browniefed</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://browniefed.com//assets.codepen.io/assets/embed/ei.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting react-art running on react-native]]></title>
    <link href="http://browniefed.com/blog/2015/05/03/getting-react-art-running-on-react-native/"/>
    <updated>2015-05-03T20:33:00-07:00</updated>
    <id>http://browniefed.com/blog/2015/05/03/getting-react-art-running-on-react-native</id>
    <content type="html"><![CDATA[<p>I hadn&rsquo;t realized that the react-art native rendering stuff had landed in into the react-native core.
So I figured I&rsquo;d try and get in running. I am an XCode noob so I&rsquo;ll be sure and be descriptive.</p>

<p>First off lets set up a react-native project. (Assuming you have react-native cli installed);</p>

<p><code>react-native init react_art_demo</code></p>

<p>The current released version of <code>react-native</code> doesn&rsquo;t have the ART libs in it so in our <code>node_modules</code> folder we can delete the <code>react-native</code> in there and do a git clone of master <code>git clone https://github.com/facebook/react-native.git</code></p>

<p>We will also need the <code>art</code> lib itself installed. So <code>cd</code> to the root of <code>react_art_demo</code>.
Then run <code>npm install art</code></p>

<p>Once we have the master repo of <code>react-native</code>, and <code>art</code> installed we can open up our <code>react_art_demo</code> project in XCode.</p>

<p>We will need to do 2 things.</p>

<ul>
<li>Add the <code>ART.xcodeproj</code> to XCode</li>
<li>Link the binary</li>
</ul>


<p>To add ART.xcodeproj find the file located in <code>react-native/Libraries/ART/ART.xcodeproj</code> and just drag it over to the <code>Libraries</code> section in XCode.
That should look like so</p>

<p><img class="<a" src="href="http://i.imgur.com/TWeDUTa.png">http://i.imgur.com/TWeDUTa.png</a>" title="Add ART.xcodeproj to Libraries" ></p>

<p>Next we&rsquo;ll link the binary.</p>

<p>With the root <code>react_art_demo</code> project selected on the left, select <code>Build Phases</code> from the center view.
There will be a section called &ldquo;Link Binary With Libraries&rdquo;, expand it, press the + and select <code>libART.a</code></p>

<p>Like so</p>

<p><img class="<a" src="href="http://i.imgur.com/lIMZkfh.png">http://i.imgur.com/lIMZkfh.png</a>" title="Link binary" ></p>

<p>Just as a warning, I didn&rsquo;t link the binary and got a few &ldquo;No manager class found for view with module name&rdquo; errors.</p>

<p>Now go forth and write your <code>react-art</code>. I always like to get the <code>vector-widget</code> example running so to do that here is the code.</p>

<p><code>index.ios.js</code></p>

<p>```
/<em>*
 * Sample React Native App
 * <a href="https://github.com/facebook/react-native">https://github.com/facebook/react-native</a>
 </em>/
&lsquo;use strict&rsquo;;</p>

<p>var React = require(&lsquo;react-native&rsquo;);
var {
  AppRegistry,
  StyleSheet,
  Text,
  View,
} = React;</p>

<p>var VectorWidget = require(&lsquo;./VectorWidget&rsquo;);</p>

<p>var react_art_demo = React.createClass({</p>

<p>  render: function() {</p>

<pre><code>return (
  &lt;View style={styles.container}&gt;
    &lt;VectorWidget style={styles.vector}/&gt;
  &lt;/View&gt;
);
</code></pre>

<p>  }
});</p>

<p>var styles = StyleSheet.create({
  container: {</p>

<pre><code>flex: 1,
alignItems: 'center',
backgroundColor: '#FFF',
</code></pre>

<p>  },
  vector: {</p>

<pre><code>width: 100,
height: 100
</code></pre>

<p>  },
  welcome: {</p>

<pre><code>fontSize: 20,
textAlign: 'center',
margin: 10,
</code></pre>

<p>  },
  instructions: {</p>

<pre><code>color: '#333333',
marginBottom: 5,
marginTop: 100
</code></pre>

<p>  },
});</p>

<p>AppRegistry.registerComponent(&lsquo;react_art_demo&rsquo;, () => react_art_demo);
```</p>

<p>And your <code>VectorWidget.js</code> file</p>

<p>```
/<em>*
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 </em>/
&ldquo;use strict&rdquo;;</p>

<p>var React = require(&lsquo;react-native&rsquo;);
var ReactArt = require(&lsquo;./node_modules/react-native/Libraries/ART/ReactIOSART&rsquo;);
var {</p>

<pre><code>Art,
TouchableWithoutFeedback
</code></pre>

<p>} = React;</p>

<p>var {</p>

<pre><code>Group,
Shape,
Surface,
Transform
</code></pre>

<p>} = ReactArt;</p>

<p>var MOUSE_UP_DRAG = 0.978;
var MOUSE_DOWN_DRAG = 0.9;
var MAX_VEL = 11;
var CLICK_ACCEL = 3;
var BASE_VEL = 0.15;</p>

<p>/<strong>
 * An animated SVG component.
 */
var VectorWidget = React.createClass({
  /</strong>
   * Initialize state members.
   */
  getInitialState: function() {</p>

<pre><code>return {degrees: 0, velocity: 0, drag: MOUSE_UP_DRAG};
</code></pre>

<p>  },</p>

<p>  /<em>*
   * When the component is mounted into the document &ndash; this is similar to a
   * constructor, but invoked when the instance is actually mounted into the
   * document. Here&rsquo;s, we&rsquo;ll just set up an animation loop that invokes our
   * method. Binding of <code>this.onTick</code> is not needed because all React methods
   * are automatically bound before being mounted.
   </em>/
  componentDidMount: function() {</p>

<pre><code>this._interval = window.setInterval(this.onTick, 20);
</code></pre>

<p>  },</p>

<p>  componentWillUnmount: function() {</p>

<pre><code>window.clearInterval(this._interval);
</code></pre>

<p>  },</p>

<p>  onTick: function() {</p>

<pre><code>var nextDegrees = this.state.degrees + BASE_VEL + this.state.velocity;
var nextVelocity = this.state.velocity * this.state.drag;
this.setState({degrees: nextDegrees, velocity: nextVelocity});
</code></pre>

<p>  },</p>

<p>  /<em><em>
   * This is the &ldquo;main&rdquo; method for any component. The React API allows you to
   * describe the structure of your UI component at </em>any</em> point in time.
   */
  render: function() {</p>

<pre><code>return (
  &lt;Surface
    width={700}
    height={700}
    {this.renderGraphic(this.state.degrees)}
  &lt;/Surface&gt;
);
</code></pre>

<p>  },</p>

<p>  /<em>*
   * Better SVG support for React coming soon.
   </em>/
  renderGraphic: function(rotation) {</p>

<pre><code>return (
  &lt;Group
  &gt;
    &lt;Group x={210} y={135}&gt;
      &lt;Shape fill="rgba(0,0,0,0.1)" d={BORDER_PATH} /&gt;
      &lt;Shape fill="#7BC7BA" d={BG_PATH} /&gt;
      &lt;Shape fill="#DCDCDC" d={BAR_PATH} /&gt;
      &lt;Shape fill="#D97B76" d={RED_DOT_PATH} /&gt;
      &lt;Shape fill="#DBBB79" d={YELLOW_DOT_PATH} /&gt;
      &lt;Shape fill="#A6BD8A" d={GREEN_DOT_PATH} /&gt;
      &lt;Group x={55} y={29}&gt;
        &lt;Group rotation={rotation} originX={84} originY={89}&gt;
          &lt;Shape fill="#FFFFFF" d={CENTER_DOT_PATH} /&gt;
          &lt;Group&gt;
            &lt;Shape d={RING_ONE_PATH} stroke="#FFFFFF" strokeWidth={8} /&gt;
            &lt;Shape d={RING_TWO_PATH} transform={RING_TWO_ROTATE} stroke="#FFFFFF" strokeWidth={8} /&gt;
            &lt;Shape d={RING_THREE_PATH} transform={RING_THREE_ROTATE} stroke="#FFFFFF" strokeWidth={8} /&gt;
          &lt;/Group&gt;
        &lt;/Group&gt;
      &lt;/Group&gt;
    &lt;/Group&gt;
  &lt;/Group&gt;
);
</code></pre>

<p>  }
});</p>

<p>var BORDER_PATH = &ldquo;M3.00191459,4 C1.34400294,4 0,5.34785514 0,7.00550479 L0,220.994495 C0,222.65439 1.34239483,224 3.00191459,224 L276.998085,224 C278.655997,224 280,222.652145 280,220.994495 L280,7.00550479 C280,5.34561033 278.657605,4 276.998085,4 L3.00191459,4 Z M3.00191459,4&rdquo;;
var BG_PATH = &ldquo;M3.00191459,1 C1.34400294,1 0,2.34785514 0,4.00550479 L0,217.994495 C0,219.65439 1.34239483,221 3.00191459,221 L276.998085,221 C278.655997,221 280,219.652145 280,217.994495 L280,4.00550479 C280,2.34561033 278.657605,1 276.998085,1 L3.00191459,1 Z M3.00191459,1&rdquo;;
var BAR_PATH = &ldquo;M3.00191459,0 C1.34400294,0 0,1.34559019 0,3.00878799 L0,21 C0,21 0,21 0,21 L280,21 C280,21 280,21 280,21 L280,3.00878799 C280,1.34708027 278.657605,0 276.998085,0 L3.00191459,0 Z M3.00191459,0&rdquo;;
var RED_DOT_PATH = &ldquo;M12.5,17 C16.0898511,17 19,14.0898511 19,10.5 C19,6.91014895 16.0898511,4 12.5,4 C8.91014895,4 6,6.91014895 6,10.5 C6,14.0898511 8.91014895,17 12.5,17 Z M12.5,17&rdquo;;
var YELLOW_DOT_PATH = &ldquo;M31.5,17 C35.0898511,17 38,14.0898511 38,10.5 C38,6.91014895 35.0898511,4 31.5,4 C27.9101489,4 25,6.91014895 25,10.5 C25,14.0898511 27.9101489,17 31.5,17 Z M31.5,17&rdquo;;
var GREEN_DOT_PATH = &ldquo;M50.5,17 C54.0898511,17 57,14.0898511 57,10.5 C57,6.91014895 54.0898511,4 50.5,4 C46.9101489,4 44,6.91014895 44,10.5 C44,14.0898511 46.9101489,17 50.5,17 Z M50.5,17&rdquo;;
var CENTER_DOT_PATH = &ldquo;M84,105 C92.8365564,105 100,97.8365564 100,89 C100,80.1634436 92.8365564,73 84,73 C75.1634436,73 68,80.1634436 68,89 C68,97.8365564 75.1634436,105 84,105 Z M84,105&rdquo;;
var RING_ONE_PATH = &ldquo;M84,121 C130.391921,121 168,106.673113 168,89 C168,71.3268871 130.391921,57 84,57 C37.6080787,57 0,71.3268871 0,89 C0,106.673113 37.6080787,121 84,121 Z M84,121&rdquo;;
var RING_TWO_PATH = &ldquo;M84,121 C130.391921,121 168,106.673113 168,89 C168,71.3268871 130.391921,57 84,57 C37.6080787,57 0,71.3268871 0,89 C0,106.673113 37.6080787,121 84,121 Z M84,121&rdquo;;
var RING_THREE_PATH = &ldquo;M84,121 C130.391921,121 168,106.673113 168,89 C168,71.3268871 130.391921,57 84,57 C37.6080787,57 0,71.3268871 0,89 C0,106.673113 37.6080787,121 84,121 Z M84,121&rdquo;;
var RING_TWO_ROTATE = new Transform().translate(84.000000, 89.000000).rotate(-240.000000).translate(-84.000000, -89.000000);
var RING_THREE_ROTATE = new Transform().translate(84.000000, 89.000000).rotate(-300.000000).translate(-84.000000, -89.000000);</p>

<p>module.exports = VectorWidget;
```</p>

<p>You may notice that I removed the <code>mouseDown/mouseUp</code> stuff.
I tried getting it work very briefly with <code>onPress</code> and <code>TouchableWithoutFeedback</code> but I couldn&rsquo;t get it working.
If you get it figured out let me know.</p>

<h2>Conclusion</h2>

<p>That&rsquo;s it, you can now render your react-art code natively. Enjoy</p>

<p><img class="<a" src="href="http://i.imgur.com/AXbsaTB.png">http://i.imgur.com/AXbsaTB.png</a>" title="Final result" ></p>
]]></content>
  </entry>
  
</feed>
