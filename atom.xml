<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title><![CDATA[JavaScript Without Grammar]]></title>
	<link href="http://browniefed.com/atom.xml" rel="self"/>
	<link href="http://browniefed.com/"/>
	<updated>2015-08-02T08:10:21-07:00</updated>
	<id>http://browniefed.com/</id>
	<author>
		<name><![CDATA[Jason Brown]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
	<entry>
		
			<title type="html"><![CDATA[React-native Animated ScrollView Row Swipe Actions]]></title>
		
		<link href="http://browniefed.com/blog/2015/08/01/react-native-animated-listview-row-swipe/"/>
		<updated>2015-08-01T16:17:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/08/01/react-native-animated-listview-row-swipe</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h1>Introduction</h1>

<p>Have you ever wanted to swipe a row in a scroll view to take some sort of action. Swipe left to delete, swipe right to archive, swipe to do whatever. Well previously without the Animated API that wasn&rsquo;t necessarily hard it was just inefficient due to having to use <code>setState</code> causing a lot of diffs.</p>

<h1>What are we trying to accomplish</h1>

<p><img src="http://i.imgur.com/z1tko0s.gif" title="Swipe Action GIF from @dubert" ></p>

<p>This is not an orignal interaction I created, you can follow along with how I stumbled upon it and such here <a href="https://github.com/facebook/react-native/issues/2072">https://github.com/facebook/react-native/issues/2072</a>.</p>

<p>Swiping rows is also just a normal action in iOS. However there is an ongoing debate here about ListView/ScrollView being wrapped in a UITableView which would provide some of this interaction as default. You can read through it here <a href="https://github.com/facebook/react-native/issues/332">https://github.com/facebook/react-native/issues/332</a> but we&rsquo;ll forge ahead and implement it with what we have to work with.</p>

<!-- more -->


<h1>The Concept</h1>

<p>Previously I attempted, and successfully implemented this with the <code>PanResponder</code>. There is nothing particularly bad about that approach except you will run into issues being embedded in a <code>ScrollView</code>.</p>

<p>What issues? Well while swiping left/right the content direction locks won&rsquo;t be set, which means if you don&rsquo;t swipe perfectly left &lt;=> right and introduce some up/down your row will get stuck. That is not a good interaction.</p>

<p>So thanks to the solid recommendation by <a href="https://github.com/sahrens">sahrens</a> we will do a <code>ScrollView</code> with each row being a Horizontal <code>ScrollView</code>. This means iOS will negotiate content direction locks correctly. So when you scroll up and down the body content will scroll, left and right will cause each row to slide.</p>

<h1>Drawbacks</h1>

<p>There are some drawbacks.</p>

<ul>
<li>With the horizontal ScrollView you have to define the height (at least from what I could figure out).</li>
<li>The View in the horizontal ScrollView does not stretch completely regardless of what flex properties you add on it.</li>
<li>The PanResponder vs ContentOffset X values are opposites, so you have to multiply by -1.</li>
<li>The content offset is not as large as the PanResponder so I had to lower the RED threshold.</li>
</ul>


<p>Specifying the height is seemingly the largest drawback that I couldn&rsquo;t figure out. The width not auto-adjusting is also another drawback, however we have the dimensions to calculate the threshold so we could manually set the width if we wanted.</p>

<h1>Setup</h1>

<p>Variables we need</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width,
</span><span class='line'>  height
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  ScrollView,
</span><span class='line'>  View,
</span><span class='line'>  Text,
</span><span class='line'>  Animated
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var GREY = 0;
</span><span class='line'>var GREEN = 1;
</span><span class='line'>var RED = 2;
</span><span class='line'>
</span><span class='line'>var values = [1,2,3,4];
</span><span class='line'>
</span><span class='line'>var AnimatedScrollView = Animated.createAnimatedComponent(ScrollView);</span></code></pre></td></tr></table></div></figure>


<p>We need the Device widths for calculating half the screen later for our events.
Also we setup color as integer steps, and then define arbitrary values for rows.</p>

<p>Finally we use the <code>createAnimatedComponent</code> supplied by <code>Animated</code> to create an Animated capable <code>ScrollView</code>.</p>

<p>What that means is that when you pass it interpolated values (like an interpolated background color) it&rsquo;ll correctly negotiate the values.</p>

<p>Styles</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    flexDirection: 'column'
</span><span class='line'>  },
</span><span class='line'>  outerScroll: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    flexDirection: 'column'
</span><span class='line'>  },
</span><span class='line'>  row: {
</span><span class='line'>    flex: 1
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Just some base styles, you&rsquo;ll see where they are used in a second.</p>

<h1>Basic ScrollView</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var AnimatedFlick = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>        values: values
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  _renderRow: function(value, index) {
</span><span class='line'>    return (
</span><span class='line'>        &lt;View 
</span><span class='line'>          style={styles.row}
</span><span class='line'>          key={index}
</span><span class='line'>        &gt;
</span><span class='line'>          &lt;Text&gt;{value + "  &lt;----- Slide the row that way and release"}&lt;/Text&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;ScrollView style={styles.outerScroll}&gt;
</span><span class='line'>          {this.state.values.map(this._renderRow, this)}
</span><span class='line'>        &lt;/ScrollView&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>We setup some intial state the values we set in the setup section <code>var values = [1,2,3,4]</code>.
We map those values to the <code>_renderRow</code> function, which we just return a basic <code>View</code>, with some <code>Text</code>.</p>

<h1>ScrollView with Horizontal ScrollViews</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  _renderRow: function(value, index) {
</span><span class='line'>    return (
</span><span class='line'>        &lt;View 
</span><span class='line'>          style={styles.row}
</span><span class='line'>          key={index}
</span><span class='line'>        &gt;
</span><span class='line'>          &lt;ScrollView
</span><span class='line'>            horizontal={true}
</span><span class='line'>            directionalLockEnabled={true}
</span><span class='line'>            style=
</span><span class='line'>          &gt;
</span><span class='line'>            &lt;View&gt;
</span><span class='line'>              &lt;Text&gt;{value + "  &lt;----- Slide the row that way and release"}&lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>          &lt;/ScrollView&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<p>We wrap our view content in <code>ScrollView</code> with <code>horizontal</code> true and <code>directionLockEnabeled</code>. This means when you start scroll one direction it will lock that direction and not let you scroll a different way. In our case once you start swiping left/right you can only swipe left/right.
Back to point 1, we have to set the height specifically here.</p>

<p>This is what we have now.</p>

<p><img src="http://i.imgur.com/DTFHAvu.gif" title="Scroll In a Scroll" ></p>

<h1>Animate the Background Color</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  _renderRow: function(value, index) {
</span><span class='line'>
</span><span class='line'>    var bgColor = this.state.colors[index].interpolate({
</span><span class='line'>      inputRange: [
</span><span class='line'>        GREY,
</span><span class='line'>        GREEN,
</span><span class='line'>        RED
</span><span class='line'>      ],
</span><span class='line'>      outputRange: [
</span><span class='line'>        'rgb(180, 180, 180)', // GREY
</span><span class='line'>        'rgb(63, 236, 35)', // GREEN
</span><span class='line'>        'rgb(233, 19, 19)', // RED
</span><span class='line'>      ],
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    return (
</span><span class='line'>        &lt;View 
</span><span class='line'>          style={styles.row}
</span><span class='line'>          key={index}
</span><span class='line'>        &gt;
</span><span class='line'>          &lt;AnimatedScrollView
</span><span class='line'>            horizontal={true}
</span><span class='line'>            directionalLockEnabled={true}
</span><span class='line'>            style={[{flex: 1, height: 100}, {backgroundColor: bgColor}]}
</span><span class='line'>            onScroll={this._animateScroll.bind(this, index)}
</span><span class='line'>            scrollEventThrottle={16}
</span><span class='line'>          &gt;
</span><span class='line'>            &lt;View style=&gt;
</span><span class='line'>              &lt;Text&gt;{value + "  &lt;----- Slide the row that way and release"}&lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>          &lt;/AnimatedScrollView&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>We need to create an interpolation. How the interpolation works is given a value, in our case colors that are just an array of values <code>[0,1,2]</code> will return a new value which corresponds to the <code>outputRange</code>. So when the <code>this.state.colors[index]</code> value is <code>0</code> it will return <code>GREY</code> or <code>rgb(180, 180, 180)</code>, and so on and so forth. When it changes from <code>GREY</code> to <code>GREEN</code> it&rsquo;ll animate to the new color of <code>rgb(63, 236, 35)</code>.</p>

<p>This is where we use the <code>AnimatedScrollView</code> we created before. This will correctly take the animated value we pass in a grab the interpolatd background.</p>

<p>We pass in a function to onScroll and setup the <code>scrollEventThrottle</code> with the default value. This means our scroll event will be called every 16 millseconds.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  _animateScroll: function(index, e) {
</span><span class='line'>    var threshold = width / 5;
</span><span class='line'>    var x = e.nativeEvent.contentOffset.x;
</span><span class='line'>    var target = null;
</span><span class='line'>
</span><span class='line'>    x = x * -1;
</span><span class='line'>
</span><span class='line'>    if (x &gt; -50 && this._target != GREY) {
</span><span class='line'>      target = GREY;
</span><span class='line'>    } else if (x &lt; -50 && x &gt; -threshold && this._target != GREEN) {
</span><span class='line'>      target = GREEN;
</span><span class='line'>    } else if (x &lt; -threshold && this._target != RED) {
</span><span class='line'>      target = RED;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (target !== null) {
</span><span class='line'>      this._target = target;
</span><span class='line'>      this._targetIndex = index;
</span><span class='line'>
</span><span class='line'>      Animated.timing(this.state.colors[index], {
</span><span class='line'>        toValue: target,
</span><span class='line'>        duration: 180,
</span><span class='line'>      }).start();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>We get the threshold of the <code>deviceWidth</code> we got at the creation of the app. We get the <code>x</code> offset of the scrollView. Finally depending on which direction you want users to swipes to take action we need to multiply ( or not ) by <code>-1</code>. The <code>-1</code> means swiping right to left will cause the actions to trigger.</p>

<p>We setup various thresholds to animate to. Start is <code>GREY</code>, middle threshold is <code>GREEN</code> and anything greater is <code>RED</code>.</p>

<p>Finally if target isn&rsquo;t null (aka someone did something), we trigger an <code>Animated.timing</code> on our color. This will say for the next 180 milliseconds transition to our target color. This will cause our color interpolation to kick in and transition the background.</p>

<p>Hopefully this all doesn&rsquo;t seem too complicated. We are essentially saying &ldquo;If someone swipes this far make the background color this one&rdquo;.</p>

<h1>Take an action</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>return (
</span><span class='line'>    &lt;View 
</span><span class='line'>      style={styles.row}
</span><span class='line'>      key={index}
</span><span class='line'>    &gt;
</span><span class='line'>      &lt;AnimatedScrollView
</span><span class='line'>        horizontal={true}
</span><span class='line'>        directionalLockEnabled={true}
</span><span class='line'>        style={[{flex: 1, height: 100}, {backgroundColor: bgColor}]}
</span><span class='line'>        onScroll={this._animateScroll.bind(this, index)}
</span><span class='line'>        scrollEventThrottle={16}
</span><span class='line'>        onMomentumScrollBegin={this.takeAction}
</span><span class='line'>      &gt;
</span><span class='line'>        &lt;View style=&gt;
</span><span class='line'>          &lt;Text&gt;{value + "  &lt;----- Slide the row that way and release"}&lt;/Text&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>      &lt;/AnimatedScrollView&gt;
</span><span class='line'>    &lt;/View&gt;
</span><span class='line'>)
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>We do have to dig through the internal code a bit but a seemingly undocumented action of the <code>ScrollResponder</code> is the <code>onMomentumScrollBegin</code>. From the code comments this function is called when <code>When releasing the view starts bouncing back</code>. So the user has released, and the row is about to scroll back into the 0 position.</p>

<p>Why this action? Well we setup things to operate on the scroll actions. Any other event would cause the actions the user want to take to be wrong since the <code>onScroll</code> events will be fired when the user releases.</p>

<p>We should add some protection code and such, but you can implement that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  takeAction: function() {
</span><span class='line'>    this.setState({
</span><span class='line'>      action: true
</span><span class='line'>    });
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Here we just are causing a re-render so our app updates with the state below. However in this particular method you would actually take an action based upon the offset the person swiped to.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getActionText: function() {
</span><span class='line'>    var actionText = '';
</span><span class='line'>
</span><span class='line'>    if (this.state.action) {
</span><span class='line'>      if (this._target == GREEN) {
</span><span class='line'>        actionText = 'Save Action';
</span><span class='line'>      } else if (this._target == RED) {
</span><span class='line'>        actionText = 'Delete Action'
</span><span class='line'>      } else {
</span><span class='line'>        actionText = 'No Action';
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      return 'You took "' + actionText + '" on the ' + this._targetIndex + ' row';
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return 'You have not taken an action yet';
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Just determing text to show to the user.</p>

<h1>Final code</h1>

<p>This is a pretty nice technique, and some what simple to implement but as mentioned it has some drawbacks.</p>

<p>Check it out here live <a href="https://rnplay.org/apps/LDI42g">https://rnplay.org/apps/LDI42g</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width,
</span><span class='line'>  height
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  ScrollView,
</span><span class='line'>  ListView,
</span><span class='line'>  View,
</span><span class='line'>  Text,
</span><span class='line'>  Animated
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var GREY = 0;
</span><span class='line'>var GREEN = 1;
</span><span class='line'>var RED = 2;
</span><span class='line'>
</span><span class='line'>var values = [1,2,3,4];
</span><span class='line'>
</span><span class='line'>var AnimatedScrollView = Animated.createAnimatedComponent(ScrollView);
</span><span class='line'>
</span><span class='line'>var AnimatedFlick = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>        values: values,
</span><span class='line'>        colors: values.map( () =&gt; new Animated.Value(GREY) )
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  _animateScroll: function(index, e) {
</span><span class='line'>    var threshold = width / 5;
</span><span class='line'>    var x = e.nativeEvent.contentOffset.x;
</span><span class='line'>    var target = null;
</span><span class='line'>
</span><span class='line'>    x = x * -1;
</span><span class='line'>
</span><span class='line'>    if (x &gt; -50 && this._target != GREY) {
</span><span class='line'>      target = GREY;
</span><span class='line'>    } else if (x &lt; -50 && x &gt; -threshold && this._target != GREEN) {
</span><span class='line'>      target = GREEN;
</span><span class='line'>    } else if (x &lt; -threshold && this._target != RED) {
</span><span class='line'>      target = RED;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (target !== null) {
</span><span class='line'>      this._target = target;
</span><span class='line'>      this._targetIndex = index;
</span><span class='line'>
</span><span class='line'>      Animated.timing(this.state.colors[index], {
</span><span class='line'>        toValue: target,
</span><span class='line'>        duration: 180,
</span><span class='line'>      }).start();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>  takeAction: function() {
</span><span class='line'>    this.setState({
</span><span class='line'>      action: true
</span><span class='line'>    });
</span><span class='line'>  },
</span><span class='line'>  getActionText: function() {
</span><span class='line'>    var actionText = '';
</span><span class='line'>
</span><span class='line'>    if (this.state.action) {
</span><span class='line'>      if (this._target == GREEN) {
</span><span class='line'>        actionText = 'Save Action';
</span><span class='line'>      } else if (this._target == RED) {
</span><span class='line'>        actionText = 'Delete Action'
</span><span class='line'>      } else {
</span><span class='line'>        actionText = 'No Action';
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      return 'You took "' + actionText + '" on the ' + this._targetIndex + ' row';
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return 'You have not taken an action yet';
</span><span class='line'>  },
</span><span class='line'>  _renderRow: function(value, index) {
</span><span class='line'>
</span><span class='line'>    var bgColor = this.state.colors[index].interpolate({
</span><span class='line'>      inputRange: [
</span><span class='line'>        GREY,
</span><span class='line'>        GREEN,
</span><span class='line'>        RED
</span><span class='line'>      ],
</span><span class='line'>      outputRange: [
</span><span class='line'>        'rgb(180, 180, 180)',
</span><span class='line'>        'rgb(63, 236, 35)',
</span><span class='line'>        'rgb(233, 19, 19)',
</span><span class='line'>      ],
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    return (
</span><span class='line'>        &lt;View 
</span><span class='line'>          style={styles.row}
</span><span class='line'>          key={index}
</span><span class='line'>        &gt;
</span><span class='line'>          &lt;AnimatedScrollView
</span><span class='line'>            horizontal={true}
</span><span class='line'>            directionalLockEnabled={true}
</span><span class='line'>            style={[{flex: 1, height: 100}, {backgroundColor: bgColor}]}
</span><span class='line'>            onScroll={this._animateScroll.bind(this, index)}
</span><span class='line'>            scrollEventThrottle={16}
</span><span class='line'>            onMomentumScrollBegin={this.takeAction}
</span><span class='line'>          &gt;
</span><span class='line'>            &lt;View style=&gt;
</span><span class='line'>              &lt;Text&gt;{value + "  &lt;----- Slide the row that way and release"}&lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>          &lt;/AnimatedScrollView&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;ScrollView style={styles.outerScroll}&gt;
</span><span class='line'>          {this.state.values.map(this._renderRow, this)}
</span><span class='line'>        &lt;/ScrollView&gt;
</span><span class='line'>        &lt;Text&gt;{this.getActionText()}&lt;/Text&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    flexDirection: 'column'
</span><span class='line'>  },
</span><span class='line'>  outerScroll: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    flexDirection: 'column'
</span><span class='line'>  },
</span><span class='line'>  row: {
</span><span class='line'>    flex: 1
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>AppRegistry.registerComponent('AnimatedFlick', () =&gt; AnimatedFlick);</span></code></pre></td></tr></table></div></figure>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React-native Animated API Basic Example]]></title>
		
		<link href="http://browniefed.com/blog/2015/07/26/react-native-animated-api-basic-example/"/>
		<updated>2015-07-26T11:51:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/07/26/react-native-animated-api-basic-example</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h1>Introduction</h1>

<p>Animations are finally solved in React? That&rsquo;s a bold claim, but lets explore the new Animated API in <code>react-native</code>. This won&rsquo;t apply to React for the web, however there is also <a href="https://github.com/chenglou/react-motion">react-motion</a> also released at <code>react-europe</code>.</p>

<p><img src="http://i.imgur.com/JlX4nV0.gif" title="Final Animation Result" ></p>

<!-- more -->


<h1>Resources</h1>

<ul>
<li><a href="https://www.youtube.com/watch?v=1tavDv5hXpo">Cheng Lou &ndash; The State of Animation in React at react-europe 2015</a></li>
<li><a href="https://github.com/chenglou/react-motion">react-motion &ndash; Github</a></li>
<li><a href="https://facebook.github.io/react-native/docs/animations.html#content">React Native Animation API</a></li>
<li><a href="https://www.youtube.com/watch?v=xDlfrcM6YBk">Spencer Ahrens &ndash; React Native: Building Fluid User Experiences at react-europe 2015</a></li>
</ul>


<h1>How It Works</h1>

<p>The Animated API does not depend on calling <code>setState</code>, it is accomplished by calling <code>setNativeProps</code>. The Animated API exports a few components <code>Animated.View</code>, <code>Animated.Text</code>, and <code>Animated.Image</code>. The Animated API will adjust the components in the native Objective-C world. This will bypass the diff and reconciliation in the JS world so you get fluent, and performance animatons. Ultimately all you need to know is that it will interpolate numbers and update the native view components.</p>

<h1>Cool Examples</h1>

<ul>
<li><a href="https://github.com/brentvatne/react-native-animated-demo-tinder">https://github.com/brentvatne/react-native-animated-demo-tinder</a></li>
<li><a href="https://github.com/facebook/react-native/tree/master/Examples/UIExplorer/AnimationExample">UIExplorer Animated example</a></li>
</ul>


<h1>Simple Move Around the Screen Example</h1>

<p>We are just going to move a square around the edges of the screen.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;--&lt;           
</span><span class='line'>|  |          
</span><span class='line'>V--^         </span></code></pre></td></tr></table></div></figure>


<h1>Setup</h1>

<p>Dependencies</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width,
</span><span class='line'>  height
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  View,
</span><span class='line'>  Animated
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var SQUARE_DIMENSIONS = 30;
</span></code></pre></td></tr></table></div></figure>


<p>Styles</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1
</span><span class='line'>  },
</span><span class='line'>  square: {
</span><span class='line'>    width: SQUARE_DIMENSIONS,
</span><span class='line'>    height: SQUARE_DIMENSIONS,
</span><span class='line'>    backgroundColor: 'blue'
</span><span class='line'>  } 
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Basic Code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var AnimatedSquare = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>        pan: new Animated.ValueXY()
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  getStyle: function() {
</span><span class='line'>    return [
</span><span class='line'>              styles.square, 
</span><span class='line'>              {
</span><span class='line'>                transform: this.state.pan.getTranslateTransform()
</span><span class='line'>              }
</span><span class='line'>            ];
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;Animated.View style={this.getStyle()} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Few things to call out here.</p>

<p>Notice our state that is created is an instantiation of <code>Animated.ValueXY</code>. This will save us some code, and let the <code>Animated</code> API take care of interpolating both our X, and Y values.</p>

<p>Our <code>getStyle</code> will return an array, our base <code>square</code> class and a <code>transform</code>. Once again we&rsquo;ll use a the <code>getTranslateTransform</code> helper from the <code>Animated</code> API to return the appropriate structure for the transform style.</p>

<p>It returns <code>[{ translateX: xValue}, {translateY: yValue}]</code>, where <code>xValue</code> and <code>yValue</code> are the interpolated values from the <code>Animated.ValueXY</code> we set on our <code>pan</code> state variable.</p>

<p>Finally we will use the <code>Animated.View</code> which is a convenience element to say &ldquo;Hey React this is going to be an animated thing&rdquo;.</p>

<h1>Move It</h1>

<p>We&rsquo;re now going to move it from the top corner. <code>x = 0, y = 0</code> to the bottom left corner <code>x = 0, y = (phoneHeight - square Height)</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var SPRING_CONFIG = {tension: 2, friction: 3}; //Soft spring
</span><span class='line'>
</span><span class='line'>//...
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>    Animated.spring(this.state.pan, {
</span><span class='line'>          ...SPRING_CONFIG,
</span><span class='line'>          toValue: {x: 0, y: height - SQUARE_DIMENSIONS}                        // return to start
</span><span class='line'>    }).start();
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>So on mount we&rsquo;ll start a spring. This will animate the <code>this.state.pan</code> to the bottom left corner like we want it to.</p>

<p>We&rsquo;ll also setup the <code>SPRING_CONFIG</code> with a soft spring, not much tension or friction. So it&rsquo;ll get to the corner and just bounce a little bit and stay there.</p>

<h1>Move It, Move It, and Move It again</h1>

<p>We can queue up sequences of animations. These will happen one after the other.
The <code>sequence</code> call is one of the means of composing animations. There is also <code>parallel</code> which allows for declaration of animations to happen at the same time.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  componentDidMount: function() {
</span><span class='line'>    Animated.sequence([
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>            ...SPRING_CONFIG,
</span><span class='line'>            toValue: {x: 0, y: height - SQUARE_DIMENSIONS} //animate to bottom left
</span><span class='line'>      }),
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>          ...SPRING_CONFIG,
</span><span class='line'>          toValue: {x: width - SQUARE_DIMENSIONS, y: height - SQUARE_DIMENSIONS} // animated to bottom right
</span><span class='line'>      }),
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>            ...SPRING_CONFIG,
</span><span class='line'>            toValue: {x: width - SQUARE_DIMENSIONS, y: 0} //animate to top right
</span><span class='line'>      }),
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>          ...SPRING_CONFIG,
</span><span class='line'>          toValue: {x: 0, y: 0} // return to start
</span><span class='line'>      })
</span><span class='line'>    ]).start();
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>We define 4 spring configrations like discussed before. The comments in the code explain each movement.</p>

<h1>Move and Repeat</h1>

<p>The call to <code>start</code> takes a callback. This callback will be invoked once the animation is completed. In our case the animation is complete once we get back to the start. We can then restart the animation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  componentDidMount: function() {
</span><span class='line'>    this.startAndRepeat();
</span><span class='line'>  },
</span><span class='line'>  startAndRepeat: function() {
</span><span class='line'>    this.triggerAnimation(this.startAndRepeat);
</span><span class='line'>  },
</span><span class='line'>  triggerAnimation: function(cb) {
</span><span class='line'>    Animated.sequence([
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>            ...SPRING_CONFIG,
</span><span class='line'>            toValue: {x: 0, y: height - SQUARE_DIMENSIONS} //animate to bottom left
</span><span class='line'>      }),
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>          ...SPRING_CONFIG,
</span><span class='line'>          toValue: {x: width - SQUARE_DIMENSIONS, y: height - SQUARE_DIMENSIONS} // animated to bottom right
</span><span class='line'>      }),
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>            ...SPRING_CONFIG,
</span><span class='line'>            toValue: {x: width - SQUARE_DIMENSIONS, y: 0} //animate to top right
</span><span class='line'>      }),
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>          ...SPRING_CONFIG,
</span><span class='line'>          toValue: {x: 0, y: 0} // return to start
</span><span class='line'>      })
</span><span class='line'>    ]).start(cb);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>We just make a call that triggers the animation and calls itself on complete.</p>

<h1>Full/Live Code</h1>

<h2><a href="https://rnplay.org/apps/QlPJ2Q">https://rnplay.org/apps/QlPJ2Q</a></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width,
</span><span class='line'>  height
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  View,
</span><span class='line'>  Animated
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var SQUARE_DIMENSIONS = 30;
</span><span class='line'>var SPRING_CONFIG = {tension: 2, friction: 3}; //Soft spring
</span><span class='line'>
</span><span class='line'>var AnimatedSquare = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>        pan: new Animated.ValueXY()
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>    this.startAndRepeat();
</span><span class='line'>  },
</span><span class='line'>  startAndRepeat: function() {
</span><span class='line'>    this.triggerAnimation(this.startAndRepeat);
</span><span class='line'>  },
</span><span class='line'>  triggerAnimation: function(cb) {
</span><span class='line'>    Animated.sequence([
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>            ...SPRING_CONFIG,
</span><span class='line'>            toValue: {x: 0, y: height - SQUARE_DIMENSIONS} //animate to bottom left
</span><span class='line'>      }),
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>          ...SPRING_CONFIG,
</span><span class='line'>          toValue: {x: width - SQUARE_DIMENSIONS, y: height - SQUARE_DIMENSIONS} // animated to bottom right
</span><span class='line'>      }),
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>            ...SPRING_CONFIG,
</span><span class='line'>            toValue: {x: width - SQUARE_DIMENSIONS, y: 0} //animate to top right
</span><span class='line'>      }),
</span><span class='line'>      Animated.spring(this.state.pan, {
</span><span class='line'>          ...SPRING_CONFIG,
</span><span class='line'>          toValue: {x: 0, y: 0} // return to start
</span><span class='line'>      })
</span><span class='line'>    ]).start(cb);
</span><span class='line'>  },
</span><span class='line'>  getStyle: function() {
</span><span class='line'>    return [
</span><span class='line'>              styles.square, 
</span><span class='line'>              {
</span><span class='line'>                transform: this.state.pan.getTranslateTransform()
</span><span class='line'>              }
</span><span class='line'>            ];
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;Animated.View style={this.getStyle()} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1
</span><span class='line'>  },
</span><span class='line'>  square: {
</span><span class='line'>    width: SQUARE_DIMENSIONS,
</span><span class='line'>    height: SQUARE_DIMENSIONS,
</span><span class='line'>    backgroundColor: 'blue'
</span><span class='line'>  } 
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>AppRegistry.registerComponent('AnimatedSquare', () =&gt; AnimatedSquare);
</span></code></pre></td></tr></table></div></figure>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React-Native layout examples]]></title>
		
		<link href="http://browniefed.com/blog/2015/06/07/react-native-layout-examples/"/>
		<updated>2015-06-07T21:37:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/06/07/react-native-layout-examples</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Flexbox layout takes a bit getting used to. It&rsquo;s surprisngly simple but after so many years of box model css layout it throws you for a loop.</p>

<p>Some examples</p>

<h2>Percentage height sections</h2>

<p>These are seemingly simple to do in CSS. Specify <code>height: 50%</code> and you get a magical 50% height. Yeah I&rsquo;m over simplifying it but in general that&rsquo;s what you get. In flex it&rsquo;s different.</p>

<p>This percentage based layout question was asked here <a href="https://github.com/facebook/react-native/issues/364">https://github.com/facebook/react-native/issues/364</a>.</p>

<p>Laying out login screens may require significant white space. To accomplish % based layout we can use the <code>flex</code> property along with <code>flexDirection</code>.</p>

<p>Say you want 3 sections. Top <code>50%</code>, then two <code>25%</code> sections.</p>

<p>Our code would look something like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var SampleApp = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>      return (
</span><span class='line'>          &lt;View style={styles.container}&gt;
</span><span class='line'>              &lt;View style={styles.halfHeight} /&gt;
</span><span class='line'>              &lt;View style={styles.quarterHeight} /&gt;
</span><span class='line'>              &lt;View style={[styles.quarterHeight, {backgroundColor: '#CCC'}]} /&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>      )
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>    container: {
</span><span class='line'>        flex: 1,
</span><span class='line'>        flexDirection: 'column'
</span><span class='line'>    },
</span><span class='line'>    halfHeight: {
</span><span class='line'>        flex: .5,
</span><span class='line'>        backgroundColor: '#FF3366'
</span><span class='line'>    },
</span><span class='line'>    quarterHeight: {
</span><span class='line'>        flex: .25,
</span><span class='line'>        backgroundColor: '#000'
</span><span class='line'>    }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>This makes it look like percentages, however what actually is happening is just ratios.</p>

<p>The ratios are easier to represent with non-decimals. Equivalent code to the above would look like.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>    container: {
</span><span class='line'>        flex: 1,
</span><span class='line'>        flexDirection: 'column'
</span><span class='line'>    },
</span><span class='line'>    halfHeight: {
</span><span class='line'>        flex: 2,
</span><span class='line'>        backgroundColor: '#FF3366'
</span><span class='line'>    },
</span><span class='line'>    quarterHeight: {
</span><span class='line'>        flex: 1,
</span><span class='line'>        backgroundColor: '#000'
</span><span class='line'>    }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s saying that the <code>halfHeight</code> container should take up twice as much space, and the <code>quarterHeight</code> should take up one amount of space.
The actual numbers depend on screen size, and/or also derived from parent containers. So we can&rsquo;t attach specific heights.</p>

<p>It just means &ldquo; <code>halfHeight</code> should take up 2 units of height where <code>quarterHeight</code> takes up 1 unit/half as much height as the <code>halfHeight</code> container&rdquo;.</p>

<p><img src="http://i.imgur.com/k4RI8Og.png" title="Percentage based layout" ></p>

<p>You can check out a live demo here <a href="https://rnplay.org/apps/MbQEbQ">https://rnplay.org/apps/MbQEbQ</a></p>

<h2>React-Native Example Screens</h2>

<p>Not being very good at flexbox I figured what better way than to create a bunch of layout examples to practice.
That&rsquo;s when I saw <a href="http://www.invisionapp.com/do">http://www.invisionapp.com/do</a>. It has a bunch of beautiful layouts, so I am attempting to recreate some.</p>

<p>You can check out the repo here <a href="https://github.com/browniefed/react-native-screens">https://github.com/browniefed/react-native-screens</a></p>

<p>I&rsquo;ve made them all runnable on <code>rnplay.org</code>.</p>

<h4>Example: Login1</h4>

<p><a href="https://rnplay.org/apps/x7HRCA">https://rnplay.org/apps/x7HRCA</a></p>

<p><img src="https://i.imgur.com/ceB0t2Z.png" title="Login1 Example" ></p>

<p>If you like this, feel free to contribute and download the screens from <a href="http://www.invisionapp.com/do">http://www.invisionapp.com/do</a>. I found the Sketch ones were the easiest to handle and export individual assets from.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React-Native Tinder like cards]]></title>
		
		<link href="http://browniefed.com/blog/2015/06/06/react-native-tinder-like-cards/"/>
		<updated>2015-06-06T19:33:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/06/06/react-native-tinder-like-cards</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h1>CHECK OUT ====> <a href="https://github.com/brentvatne/react-native-animated-demo-tinder">https://github.com/brentvatne/react-native-animated-demo-tinder</a> for a better demo with the new Animated API!!!</h1>

<h2>Intro</h2>

<p>The test of all good frameworks is how easy it is to implement Tinder right? Well with <code>react-native</code> we do get the benefits of flex box as well as some transforms which we&rsquo;ll take advantage of.</p>

<p>We don&rsquo;t have access to an easy physics, even though they were added in IOS7. If you&rsquo;d like physics you can use some JavaScript libraries like <code>rebound</code> <a href="https://github.com/facebook/rebound-js">https://github.com/facebook/rebound-js</a> from Facebook, or any others that don&rsquo;t require a DOM.</p>

<p>What we&rsquo;ll make</p>

<p><img src="http://i.imgur.com/tTcT7xJ.png" title="End Result" ></p>

<!-- more -->


<h2>Concept</h2>

<p>We&rsquo;ll create a card. On touch press/grant we&rsquo;ll figure out the offset of the card to the touch and start generating the transform to move/rotate the card.</p>

<p>Well use the <code>style</code> <code>transform</code> property which we can find documentation here <a href="https://facebook.github.io/react-native/docs/transforms.html#proptypes">https://facebook.github.io/react-native/docs/transforms.html#proptypes</a>. However documentation is a little skimpy.</p>

<p>It&rsquo;s mostly straight forward once you dive in though.</p>

<h2>What we won&rsquo;t do.</h2>

<p>Physics. You can implement a bouncy spring system, but we&rsquo;ll keep it simple with a drag concept.</p>

<h2>Create a basic card</h2>

<p>We&rsquo;ll create a basic wrapper container and then create a card View.
We&rsquo;ll center everyting inside of our container using <code>alignItems</code> and <code>justifyContent</code> both <code>center</code>
Our card will just be <code>300</code> by <code>300</code>, with a little padding, and border.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>render: function() {
</span><span class='line'>
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>          &lt;View
</span><span class='line'>            style={styles.card}
</span><span class='line'>          &gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    alignItems: 'center',
</span><span class='line'>    justifyContent: 'center'
</span><span class='line'>  },
</span><span class='line'>  card: {
</span><span class='line'>    borderWidth: 3,
</span><span class='line'>    borderRadius: 3,
</span><span class='line'>    borderColor: '#000',
</span><span class='line'>    width: 300,
</span><span class='line'>    height: 300,
</span><span class='line'>    padding: 10
</span><span class='line'>  }
</span><span class='line'>  });
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have a generic card we can make it look a little nicer with an image, and some text.</p>

<h2>Add an Image/Text to card</h2>

<p>We&rsquo;ll add an image and set to a particular height. There is a current issue in <code>react-native</code> that doesn&rsquo;t maintain aspect ratio but that will be taken care of eventually.</p>

<p>We wrap our <code>Text</code> elements in <code>View</code> and position each <code>Text</code> item on the left and right.
There is a way to do this with flexbox but positioning like this is a little more explicit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>render: function() {
</span><span class='line'>
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>          &lt;View
</span><span class='line'>            style={styles.card}
</span><span class='line'>          &gt;
</span><span class='line'>            &lt;Image source= style={styles.cardImage} /&gt;
</span><span class='line'>            &lt;View&gt;
</span><span class='line'>              &lt;Text style={styles.textLeft}&gt;Rabbit, 10&lt;/Text&gt;
</span><span class='line'>              &lt;Text style={styles.textRight}&gt;1 Connection&lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    alignItems: 'center',
</span><span class='line'>    justifyContent: 'center'
</span><span class='line'>  },
</span><span class='line'>  card: {
</span><span class='line'>    borderWidth: 3,
</span><span class='line'>    borderRadius: 3,
</span><span class='line'>    borderColor: '#000',
</span><span class='line'>    width: 300,
</span><span class='line'>    height: 300,
</span><span class='line'>    padding: 10
</span><span class='line'>  },
</span><span class='line'>  cardImage: {
</span><span class='line'>    height: 260,
</span><span class='line'>  },
</span><span class='line'>  textLeft: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left:0,
</span><span class='line'>    top:0
</span><span class='line'>  },
</span><span class='line'>  textRight: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    right: 0,
</span><span class='line'>    top: 0
</span><span class='line'>  }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<h2>Things to know about style</h2>

<p>Alright so there seems to be a lack of documentation around style in general. But <code>style</code> actually can receive an array.</p>

<p>You are capable of specifying a default layout, however doing overrides. For example take our card layout.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  card: {
</span><span class='line'>    borderWidth: 3,
</span><span class='line'>    borderRadius: 3,
</span><span class='line'>    borderColor: '#000',
</span><span class='line'>    width: 300,
</span><span class='line'>    height: 300,
</span><span class='line'>    padding: 10
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<p>This gets applied, but what if at some point in time we wanted to change the <code>borderColor</code> based on <code>state</code>.
Well we just override it on the style attribute like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;View style={[styles.card, {borderColor: '#CCC'}]} /&gt;</span></code></pre></td></tr></table></div></figure>


<p>So now the borderColor has a default but can be changed by just passing in an object.</p>

<p>This goes for <code>transform</code> as well which will set us up for the next challenge, actually dragging.</p>

<h2>Add in Drag</h2>

<p>We&rsquo;ll use the gesture responder system. The robustness is great, however I was expecting a little more information like deltas over the course of each drag update. We aren&rsquo;t given that to my knowledge so we&rsquo;ll computer it ourselves.</p>

<p>How the gesture system works is it must ask each element that has a gesture responder if it should be allowed to drag or not. In our case we have one element and minimal logic so we&rsquo;ll just return true. However at any point you can cancel a gesture by returning false.</p>

<p>In our case you need to respond <code>true</code> to <code>onStartShouldSetResponder</code> and then each subsequent move <code>onMoveShouldSetResponder</code>. If those return true then it will call <code>onResponderMove</code> each time with the new event.</p>

<p>We&rsquo;ll use <code>_onStartShouldSetResponder</code> function to setup our initial drag. Each subsequent move we subtract and get the delta of the move.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      x: 0,
</span><span class='line'>      y: 0
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  setPosition: function(e) {
</span><span class='line'>    //Update our state with the deltaX/deltaY of the movement
</span><span class='line'>    this.setState({
</span><span class='line'>      x: this.state.x + (e.nativeEvent.pageX - this.drag.x),
</span><span class='line'>      y: this.state.y + (e.nativeEvent.pageY - this.drag.y)
</span><span class='line'>    });
</span><span class='line'>    //Set our drag to be the new position so our delta can be calculated next time correctly
</span><span class='line'>    this.drag.x = e.nativeEvent.pageX;
</span><span class='line'>    this.drag.y = e.nativeEvent.pageY;
</span><span class='line'>  },
</span><span class='line'>  resetPosition: function(e) {
</span><span class='line'>    this.dragging = false;
</span><span class='line'>    //Reset on release
</span><span class='line'>    this.setState({
</span><span class='line'>      x: 0,
</span><span class='line'>      y: 0,
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>  _onStartShouldSetResponder: function(e) {
</span><span class='line'>    this.dragging = true;
</span><span class='line'>    //Setup initial drag coordinates
</span><span class='line'>    this.drag = {
</span><span class='line'>      x: e.nativeEvent.pageX,
</span><span class='line'>      y: e.nativeEvent.pageY
</span><span class='line'>    }
</span><span class='line'>    return true;
</span><span class='line'>  },
</span><span class='line'>  _onMoveShouldSetResponder: function(e) {
</span><span class='line'>    return true;
</span><span class='line'>  },
</span><span class='line'>  getCardStyle: function() {
</span><span class='line'>    var transform = [{translateX: this.state.x}, {translateY: this.state.y}];
</span><span class='line'>    return {transform: transform};
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>          &lt;View
</span><span class='line'>            onResponderMove={this.setPosition}
</span><span class='line'>            onResponderRelease={this.resetPosition}
</span><span class='line'>            onStartShouldSetResponder={this._onStartShouldSetResponder}
</span><span class='line'>            onMoveShouldSetResponder={this._onMoveShouldSetResponder}
</span><span class='line'>            style={[styles.card, this.getCardStyle()]}
</span><span class='line'>          &gt;
</span><span class='line'>            &lt;Image source= style={styles.cardImage} /&gt;
</span><span class='line'>            &lt;View style={styles.cardTextContainer}&gt;
</span><span class='line'>              &lt;Text style={styles.textLeft}&gt;Rabbit, 10&lt;/Text&gt;
</span><span class='line'>              &lt;Text style={styles.textRight}&gt;1 Connection&lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>So now when a user press down on our card and starts dragging it&rsquo;ll move around. On release it&rsquo;ll snap back to position <code>0,0</code>.</p>

<p>You can see we use the <code>translateX</code> and <code>translateY</code> transform properties. These will cause the ability for the card to be dragged around but not have to make it position absolute.</p>

<h2>Add in Rotate</h2>

<p>With Tinder and other card style systems as you drag the card left or right it will slightly rotate. It also rotates differently depending on the position you grab the card from (generally top or bottom).</p>

<p>The <code>transform</code> property on style also has a <code>rotate</code> option. This seems weird but it takes a string. That string can be something like <code>30deg</code> or <code>.05rad</code>. So it offers some flexibility. We&rsquo;ll use <code>degrees</code> since it&rsquo;s the easiest to comprehend.</p>

<p>We don&rsquo;t need to add anything to the view, just determine if we grabbed the card on the <code>top</code> or the <code>bottom</code>. Then depending on the offset drag make it rotate more as we move.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//Top of file
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>var windowSize = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>//...
</span><span class='line'>  _onStartShouldSetResponder: function(e) {
</span><span class='line'>    this.dragging = true;
</span><span class='line'>
</span><span class='line'>    this.rotateTop = e.nativeEvent.locationY &lt;= 150;
</span><span class='line'>
</span><span class='line'>    this.drag = {
</span><span class='line'>      x: e.nativeEvent.pageX,
</span><span class='line'>      y: e.nativeEvent.pageY
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return true;
</span><span class='line'>  },
</span><span class='line'>  getRotationDegree: function(rotateTop, x) {
</span><span class='line'>    var rotation = ( (x/windowSize.width) * 100)/3;
</span><span class='line'>
</span><span class='line'>    var rotate = rotateTop ? 1 : -1,
</span><span class='line'>        rotateString = (rotation * rotate) + 'deg';
</span><span class='line'>
</span><span class='line'>    return rotateString;
</span><span class='line'>  },
</span><span class='line'>  getCardStyle: function() {
</span><span class='line'>    var transform = [{translateX: this.state.x}, {translateY: this.state.y}];
</span><span class='line'>
</span><span class='line'>    if (this.dragging) {
</span><span class='line'>        transform.push({rotate: this.getRotationDegree(this.rotateTop, this.state.x)})
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return {transform: transform};
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>So we modify <code>_onStartShouldSetResponder</code> to determine wheter we grabbed top or bottom. We use the <code>locationY</code> property which is the point on the card that was touched. Since the card dimensions are <code>300x300</code> that means if the card was touched anywhere between <code>0 to 150</code> then it was touched on top.</p>

<p>Our <code>getCardStyle</code> will push a <code>rotate</code> object on if we are dragging.</p>

<p>We need to know how far around the screen you have dragged it from the center point.
So we get the screen dimensions, divide the width by the <code>pageX</code> coordinate which is just position of the element relative to the entire screen. To convert to degrees we multiply by <code>100</code> and divide by <code>3</code> to reduce the rotation.</p>

<p>If we touched on the bottom then we want to do a reverse rotation so we multiply by <code>-1</code>  and return a string that would return a value like <code>20.123deg</code> or <code>-20.123deg</code>.</p>

<h2>Add in Release Text</h2>

<p>Great we have dragging, we have rotating. Now how do we know which way they let go?
Well we can use those window dimensions and the <code>pageX</code> movement to determine if the card was released on the left or right.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  resetPosition: function(e) {
</span><span class='line'>    this.dragging = false;
</span><span class='line'>    var left = e.nativeEvent.pageX &lt; (windowSize.width/2),
</span><span class='line'>        displayText = left ? 'Released left' : 'Released right';
</span><span class='line'>
</span><span class='line'>    this.setState({
</span><span class='line'>      x: 0,
</span><span class='line'>      y: 0,
</span><span class='line'>      lastDragDirectio: displayText
</span><span class='line'>    })
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<h2>Final Code</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict';
</span><span class='line'>
</span><span class='line'>var React = require('react-native');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>var windowSize = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  StyleSheet,
</span><span class='line'>  AppRegistry,
</span><span class='line'>  Text,
</span><span class='line'>  View,
</span><span class='line'>  ActivityIndicatorIOS,
</span><span class='line'>  Image,
</span><span class='line'>  Navigator,
</span><span class='line'>  TouchableOpacity,
</span><span class='line'>  Animation
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var Application = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      x: 0,
</span><span class='line'>      y: 0,
</span><span class='line'>      lastDragDirectio: 'Drag and Release'
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  setPosition: function(e) {
</span><span class='line'>    this.setState({
</span><span class='line'>      x: this.state.x + (e.nativeEvent.pageX - this.drag.x),
</span><span class='line'>      y: this.state.y + (e.nativeEvent.pageY - this.drag.y)
</span><span class='line'>    });
</span><span class='line'>    this.drag.x = e.nativeEvent.pageX;
</span><span class='line'>    this.drag.y = e.nativeEvent.pageY;
</span><span class='line'>  },
</span><span class='line'>  resetPosition: function(e) {
</span><span class='line'>    this.dragging = false;
</span><span class='line'>    var left = e.nativeEvent.pageX &lt; (windowSize.width/2),
</span><span class='line'>        displayText = left ? 'Released left' : 'Released right';
</span><span class='line'>
</span><span class='line'>    this.setState({
</span><span class='line'>      x: 0,
</span><span class='line'>      y: 0,
</span><span class='line'>      lastDragDirectio: displayText
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>  getRotationDegree: function(rotateTop, x) {
</span><span class='line'>    var rotation = ( (x/windowSize.width) * 100)/3;
</span><span class='line'>
</span><span class='line'>    var rotate = rotateTop ? 1 : -1,
</span><span class='line'>        rotateString = (rotation * rotate) + 'deg';
</span><span class='line'>
</span><span class='line'>    return rotateString;
</span><span class='line'>  },
</span><span class='line'>  getCardStyle: function() {
</span><span class='line'>    var transform = [{translateX: this.state.x}, {translateY: this.state.y}];
</span><span class='line'>
</span><span class='line'>    if (this.dragging) {
</span><span class='line'>        transform.push({rotate: this.getRotationDegree(this.rotateTop, this.state.x)})
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return {transform: transform};
</span><span class='line'>  },
</span><span class='line'>  _onStartShouldSetResponder: function(e) {
</span><span class='line'>    this.dragging = true;
</span><span class='line'>
</span><span class='line'>    this.rotateTop = e.nativeEvent.locationY &lt;= 150;
</span><span class='line'>
</span><span class='line'>    this.drag = {
</span><span class='line'>      x: e.nativeEvent.pageX,
</span><span class='line'>      y: e.nativeEvent.pageY
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return true;
</span><span class='line'>  },
</span><span class='line'>  _onMoveShouldSetResponder: function(e) {
</span><span class='line'>    return true;
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>          &lt;View
</span><span class='line'>            onResponderMove={this.setPosition}
</span><span class='line'>            onResponderRelease={this.resetPosition}
</span><span class='line'>            onStartShouldSetResponder={this._onStartShouldSetResponder}
</span><span class='line'>            onMoveShouldSetResponder={this._onMoveShouldSetResponder}
</span><span class='line'>            style={[styles.card, this.getCardStyle()]}
</span><span class='line'>          &gt;
</span><span class='line'>            &lt;Image source= style={styles.cardImage} /&gt;
</span><span class='line'>            &lt;View style={styles.cardTextContainer}&gt;
</span><span class='line'>              &lt;Text style={styles.textLeft}&gt;Rabbit, 10&lt;/Text&gt;
</span><span class='line'>              &lt;Text style={styles.textRight}&gt;1 Connection&lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>          &lt;View style={styles.dragText}&gt;
</span><span class='line'>            &lt;Text&gt;{this.state.lastDragDirectio}&lt;/Text&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    alignItems: 'center',
</span><span class='line'>    justifyContent: 'center'
</span><span class='line'>  },
</span><span class='line'>  dragText: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    bottom: 0,
</span><span class='line'>    left: 0
</span><span class='line'>  },
</span><span class='line'>  card: {
</span><span class='line'>    borderWidth: 3,
</span><span class='line'>    borderRadius: 3,
</span><span class='line'>    borderColor: '#000',
</span><span class='line'>    width: 300,
</span><span class='line'>    height: 300,
</span><span class='line'>    padding: 10
</span><span class='line'>  },
</span><span class='line'>  cardImage: {
</span><span class='line'>    height: 260,
</span><span class='line'>  },
</span><span class='line'>  textLeft: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left:0,
</span><span class='line'>    top:0
</span><span class='line'>  },
</span><span class='line'>  textRight: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    right: 0,
</span><span class='line'>    top: 0
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>module.exports = Application;</span></code></pre></td></tr></table></div></figure>


<h2>Result</h2>

<p><img src="http://i.imgur.com/q7siPyO.gif" title="End Result" ></p>

<p>You can check out and play with the end result here.</p>

<h2>Preview Online!</h2>

<p>Thanks to React Native Playground you can play with this code live online.</p>

<p><a href="https://rnplay.org/apps/6uPJug">https://rnplay.org/apps/6uPJug</a></p>

<p>Your homework can be to add a bounce when the card is released.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[CSS-Layout and React-Art]]></title>
		
		<link href="http://browniefed.com/blog/2015/06/01/css-layout-and-react-art/"/>
		<updated>2015-06-01T10:29:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/06/01/css-layout-and-react-art</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h3>Intro</h3>

<p>If you&rsquo;ve used <code>react-native</code> before then you may know that &ldquo;css&rdquo; you&rsquo;re writing isn&rsquo;t actually CSS. It&rsquo;s a descriptor for a layout engine. That layout engine is <a href="https://github.com/facebook/css-layout">css-layout</a> which was created by <a href="https://twitter.com/Vjeux">@vjeux</a> and compiled to Java/Objective-C.</p>

<p>Layout is difficult. There have been attempts at various constraint based layouts in JavaScript, <a href="http://gridstylesheets.org/">GSS</a> is one of those. Which is a port of Apples <code>Cassowary</code> constraint solver which was also ported to JavaScript <a href="https://github.com/slightlyoff/cassowary.js">https://github.com/slightlyoff/cassowary.js</a>.</p>

<p>Now this is all fine and well but from the bit I&rsquo;ve read constraints fall down sometimes. This usually happens when you don&rsquo;t specify enough constraints based on the current layout.</p>

<h3>Layout is hard!</h3>

<p>Parent layouts get effected by their child layouts. CSS is weird in that you can remove items from layout with <code>position: absolute</code> but ultimately the top parent <code>width/height</code> is directly effected by it&rsquo;s children.</p>

<p>This is an over simplification but many times in <code>React</code> you have to hook into <code>componentDidMount</code> get the child width and take action.</p>

<p>An example would be even width labels in a form. We could measure the text but depending on <code>font</code>, <code>font-size</code> it could measure each value differently. So we hide the form on initial render, get the max label width and set it on state.</p>

<!-- more -->


<h3>CSS-Layout Basics</h3>

<p>It takes a subset of flexbox and some other styling parameters and returns <code>width</code>, and the <code>left/top</code> offsets for each item and it&rsquo;s children.</p>

<p>This example is taken directly from the <code>css-layout</code> git repo.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>computeLayout(
</span><span class='line'>  {style: {padding: 50}, children: [
</span><span class='line'>    {style: {padding: 10, alignSelf: 'stretch'}}
</span><span class='line'>  ]}
</span><span class='line'>);
</span><span class='line'>// =&gt;
</span><span class='line'>{
</span><span class='line'>    width: 120,
</span><span class='line'>    height: 120,
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0,
</span><span class='line'>    children: [{
</span><span class='line'>        width: 20,
</span><span class='line'>        height: 20,
</span><span class='line'>        top: 50,
</span><span class='line'>        left: 50
</span><span class='line'>    }]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>So explaining this. We have an item with a padding of <code>50</code>, so <code>50px</code> around the entire item.</p>

<p>It&rsquo;s child item has a padding of <code>10</code>, so <code>10px</code> all the way around.</p>

<p>Therefore the parent has <code>50*2 = 100</code> initial width/height. Now we take into account the children.</p>

<p>Width/Height:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Parent: `50*2 = 100` +  `10*2 = 20` = `100 + 120`
</span><span class='line'>Child: `10*2 = 20`</span></code></pre></td></tr></table></div></figure>


<p>Position:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Parent: `x = 0, y = 0` since we are starting there.
</span><span class='line'>Child: Parent padding `50` so our child is inset at `x = 50, y = 50`</span></code></pre></td></tr></table></div></figure>


<p>Lets change the child width and see what happens</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>computeLayout(
</span><span class='line'>    {
</span><span class='line'>        style: {
</span><span class='line'>            padding: 50
</span><span class='line'>        },
</span><span class='line'>        children: [{
</span><span class='line'>            style: {
</span><span class='line'>                padding: 10,
</span><span class='line'>                width: 1000,
</span><span class='line'>                alignSelf: 'stretch'
</span><span class='line'>            }
</span><span class='line'>        }]
</span><span class='line'>    }
</span><span class='line'>);
</span><span class='line'>// =&gt;
</span><span class='line'>{
</span><span class='line'>    "width": 1100,
</span><span class='line'>    "height": 120,
</span><span class='line'>    "top": 0,
</span><span class='line'>    "left": 0,
</span><span class='line'>    "children": [{
</span><span class='line'>        "width": 1000,
</span><span class='line'>        "height": 20,
</span><span class='line'>        "top": 50,
</span><span class='line'>        "left": 50
</span><span class='line'>    }]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Because our child defined a width of <code>1000</code> we then add on our <code>50*2</code> of padding on both sides and now the parent has a width of <code>1100</code>.</p>

<p>There are some other nuances that you can read about in the <code>css-layout</code> repo.</p>

<h3>Basic Example</h3>

<p>First off we&rsquo;ll need a component tree. Now in React they transpile JSX, and build the component tree for us. However in our case we can just create a JSON tree.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var componentTree = {
</span><span class='line'>    style: {
</span><span class='line'>        padding: 10
</span><span class='line'>    },
</span><span class='line'>    component: Rectangle,
</span><span class='line'>    children: [{
</span><span class='line'>        style: {
</span><span class='line'>            padding: 10,
</span><span class='line'>            flexDirection: 'column',
</span><span class='line'>            alignItems: 'center'
</span><span class='line'>        },
</span><span class='line'>        component: Rectangle,
</span><span class='line'>        children: [
</span><span class='line'>            {
</span><span class='line'>                style: {
</span><span class='line'>                    width: 30,
</span><span class='line'>                    height: 30
</span><span class='line'>                },
</span><span class='line'>                component: Rectangle
</span><span class='line'>            },
</span><span class='line'>            {
</span><span class='line'>                style: {
</span><span class='line'>                    margin: 10,
</span><span class='line'>                    width: 50,
</span><span class='line'>                    height: 50,
</span><span class='line'>                    alignItems: 'center',
</span><span class='line'>                    justifyContent: 'center'
</span><span class='line'>                },
</span><span class='line'>                component: Circle,
</span><span class='line'>                children: [
</span><span class='line'>                    {
</span><span class='line'>                        style: {
</span><span class='line'>                            width: 10,
</span><span class='line'>                            height: 10
</span><span class='line'>                        },
</span><span class='line'>                        component: Circle
</span><span class='line'>                    }
</span><span class='line'>                ]
</span><span class='line'>            }
</span><span class='line'>        ]
</span><span class='line'>    }]
</span><span class='line'>};
</span></code></pre></td></tr></table></div></figure>


<p>We add a <code>component</code> parameter to the tree. This is the thing that will be rendered.
We could add additional properties here, maybe create custom renderers but we&rsquo;ll keep it simple.</p>

<p>The break down is like so</p>

<ul>
<li>A surrounding rectangle w/ <code>10px</code> of padding all around</li>
<li>1 child that is a rectangle with another <code>10px</code> of padding, and it&rsquo;s children in a <code>column</code> based layout.</li>
<li>We align each of the items in the <code>center</code></li>
<li>2 children one a Rectangle, one a Cirlce.</li>
<li>Rectangle = <code>width = 30, height = 30</code></li>
<li>Circle = <code>width = 50, height = 50</code> and a surrounding <code>10px</code> margin and it&rsquo;s children centered vertically and horizontally</li>
<li>That cirlce has a circle inside that is <code>width = 10</code> and `height = 10
We&rsquo;ll have to do some basic math on the Circle to compute the radius, and center it correctly.</li>
</ul>


<p>Now we&rsquo;ll need to traverse the layout.
We&rsquo;ll do that with a function that calls itself</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function traverseLayout(componentTree, layout) {
</span><span class='line'>    var Component = componentTree.component;
</span><span class='line'>    return (
</span><span class='line'>        &lt;Group x={layout.left} y={layout.top}&gt;
</span><span class='line'>            &lt;Component
</span><span class='line'>                {...getProps(Component, layout)}
</span><span class='line'>             /&gt;
</span><span class='line'>             &lt;Group x={0} y={0}&gt;
</span><span class='line'>                {
</span><span class='line'>                    !componentTree.children ? null : componentTree.children.map(function(child, index) {
</span><span class='line'>                        return traverseLayout(child, layout.children[index]);
</span><span class='line'>                    })
</span><span class='line'>
</span><span class='line'>                }
</span><span class='line'>             &lt;/Group&gt;
</span><span class='line'>        &lt;/Group&gt;
</span><span class='line'>    )
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This is a super crude layout renderer but it works for our purposes.</p>

<p>It creates a group and we pass in our <code>top/left</code> to <code>x/y</code> of the group. This is necessary to make our children <code>top/left</code> work correctly.
Then renders the component with selected props. We&rsquo;ll just render <code>stroke="#000"</code> and a stroke={1}.</p>

<p>Then if we have children we will call ourself with the child component and layout.</p>

<p>To process the props we need to render different props for specific components.</p>

<p><code>Rectangle</code> needs <code>width/height</code> which we have.
<code>Circle</code> needs the radius computed, and to then be ofset by the radius. So we just divide the <code>width/2</code> and for positioning <code>y</code> we divide the <code>height/2</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function getProps(component, layout) {
</span><span class='line'>
</span><span class='line'>    var props = {
</span><span class='line'>        x: 0,
</span><span class='line'>        y: 0
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>    if (Rectangle === component) {
</span><span class='line'>        props.width = layout.width;
</span><span class='line'>        props.height = layout.height;
</span><span class='line'>
</span><span class='line'>    } else if (Circle === component) {
</span><span class='line'>        props.radius = layout.width/2;
</span><span class='line'>        props.x += (layout.width/2)
</span><span class='line'>        props.y += (layout.height/2);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    props.stroke = "#000"; // Just to visualize
</span><span class='line'>    props.strokeWidth = 1; // Just to visualize
</span><span class='line'>    return props;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>That is it, now we can render a tree of <code>Rectangles</code> and <code>Circles</code>. The complete code is below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react');
</span><span class='line'>var ReactArt = require('react-art'),
</span><span class='line'>    Surface = ReactArt.Surface,
</span><span class='line'>    Group = ReactArt.Group,
</span><span class='line'>    computeLayout = require('css-layout'),
</span><span class='line'>    Circle = require('react-art/shapes/circle'),
</span><span class='line'>    Rectangle = require('react-art/shapes/rectangle');
</span><span class='line'>
</span><span class='line'>var Surface = ReactArt.Surface;
</span><span class='line'>
</span><span class='line'>var viewportWidth = function() {
</span><span class='line'>    return  window.innerWidth - 100;
</span><span class='line'>}
</span><span class='line'>var viewportHeight = function() {
</span><span class='line'>    return window.innerHeight - 100;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var componentTree = {
</span><span class='line'>    style: {
</span><span class='line'>        padding: 10
</span><span class='line'>    },
</span><span class='line'>    component: Rectangle,
</span><span class='line'>    children: [{
</span><span class='line'>        style: {
</span><span class='line'>            padding: 10,
</span><span class='line'>            flexDirection: 'column',
</span><span class='line'>            alignItems: 'center'
</span><span class='line'>        },
</span><span class='line'>        component: Rectangle,
</span><span class='line'>        children: [
</span><span class='line'>            {
</span><span class='line'>                style: {
</span><span class='line'>                    width: 30,
</span><span class='line'>                    height: 30
</span><span class='line'>                },
</span><span class='line'>                component: Rectangle
</span><span class='line'>            },
</span><span class='line'>            {
</span><span class='line'>                style: {
</span><span class='line'>                    margin: 10,
</span><span class='line'>                    width: 50,
</span><span class='line'>                    height: 50,
</span><span class='line'>                    alignItems: 'center',
</span><span class='line'>                    justifyContent: 'center'
</span><span class='line'>                },
</span><span class='line'>                component: Circle,
</span><span class='line'>                children: [
</span><span class='line'>                    {
</span><span class='line'>                        style: {
</span><span class='line'>                            width: 10,
</span><span class='line'>                            height: 10
</span><span class='line'>                        },
</span><span class='line'>                        component: Circle
</span><span class='line'>                    }
</span><span class='line'>                ]
</span><span class='line'>            }
</span><span class='line'>        ]
</span><span class='line'>    }]
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>var layout = computeLayout(componentTree);
</span><span class='line'>
</span><span class='line'>function traverseLayout(componentTree, layout) {
</span><span class='line'>    var Component = componentTree.component;
</span><span class='line'>    return (
</span><span class='line'>        &lt;Group x={layout.left} y={layout.top}&gt;
</span><span class='line'>            &lt;Component
</span><span class='line'>                {...getProps(Component, layout)}
</span><span class='line'>             /&gt;
</span><span class='line'>             &lt;Group x={0} y={0}&gt;
</span><span class='line'>                {
</span><span class='line'>                    !componentTree.children ? null : componentTree.children.map(function(child, index) {
</span><span class='line'>                        return traverseLayout(child, layout.children[index]);
</span><span class='line'>                    })
</span><span class='line'>
</span><span class='line'>                }
</span><span class='line'>             &lt;/Group&gt;
</span><span class='line'>        &lt;/Group&gt;
</span><span class='line'>    )
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function getProps(component, layout) {
</span><span class='line'>
</span><span class='line'>    var props = {
</span><span class='line'>        x: 0,
</span><span class='line'>        y: 0
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>    if (Rectangle === component) {
</span><span class='line'>        props.width = layout.width;
</span><span class='line'>        props.height = layout.height;
</span><span class='line'>
</span><span class='line'>    } else if (Circle === component) {
</span><span class='line'>        props.radius = layout.width/2;
</span><span class='line'>        props.x += (layout.width/2)
</span><span class='line'>        props.y += (layout.height/2);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    props.stroke = "#000";
</span><span class='line'>    props.strokeWidth = 1;
</span><span class='line'>    return props;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var Demo = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  getRenderLayout: function() {
</span><span class='line'>    return traverseLayout(componentTree, layout);
</span><span class='line'>  },
</span><span class='line'>  render: function () {
</span><span class='line'>    return (
</span><span class='line'>      &lt;div&gt;
</span><span class='line'>        &lt;Surface
</span><span class='line'>            width={viewportWidth()}
</span><span class='line'>            height={viewportHeight()}
</span><span class='line'>        &gt;
</span><span class='line'>            {this.getRenderLayout()}
</span><span class='line'>        &lt;/Surface&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>module.exports = Demo;</span></code></pre></td></tr></table></div></figure>


<h3>Possibilities</h3>

<p>Tic-tac-toe? Heh.</p>

<p>This could be made to layout components arbitrarily much like we do with <code>react-native</code>. It&rsquo;s not perfect and could only be used in specific scenarios but it&rsquo;s still a fun prototype.</p>

<h3>Demo</h3>

<p data-height="624" data-theme-id="0" data-slug-hash="zGZOMN" data-default-tab="result" data-user="browniefed" class='codepen'>See the Pen <a href='http://codepen.io/browniefed/pen/zGZOMN/'>zGZOMN</a> by Jason Brown (<a href='http://codepen.io/browniefed'>@browniefed</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://browniefed.com//assets.codepen.io/assets/embed/ei.js"></script>



]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Create a map with React-Art]]></title>
		
		<link href="http://browniefed.com/blog/2015/05/30/create-a-map-with-react-art/"/>
		<updated>2015-05-30T10:15:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/05/30/create-a-map-with-react-art</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h3>Intro</h3>

<p>Just Like the title states, we&rsquo;re going to make a map with <code>react-art</code>. When you think of maps many people jump straight to <code>leaflet</code>, <code>google maps</code>, or <code>mapbox</code>. Well one of the key things they are doing is just plotting map tiles.</p>

<p>Map tiles are just images that can be stitched together and form a map. That is why whenever you drag on a map portions of it pop in in squares.</p>

<p>Don&rsquo;t worry, I won&rsquo;t get deep into mapping terminology because I don&rsquo;t know it. If you want to learn checkout this post <a href="http://www.macwright.org/2012/05/15/how-web-maps-work.html">http://www.macwright.org/2012/05/15/how-web-maps-work.html</a></p>

<p>All you&rsquo;ll need to know is <code>Latitude</code>, <code>Longitude</code>, and <code>Tile</code> aka (an image of a piece of a map).</p>

<p>Our tilemap source will be the fabulous <a href="https://www.openstreetmap.org/">OpenStreetMap</a>. It&rsquo;s a community driven mapping solution. Check it out and contribute if you can!</p>

<p>This was going to be a blog post about creating a map but I ended up turning it into a library.</p>

<!-- more -->


<h3>What I Built</h3>

<p>I ended up writing up a library to show it off.</p>

<p>Checkout <a href="https://github.com/browniefed/react-art-map">https://github.com/browniefed/react-art-map</a> for the library and examples.</p>

<p>We use <a href="https://github.com/zacbarton/node-googlemaps-utils">https://github.com/zacbarton/node-googlemaps-utils</a> and
<a href="https://github.com/gagan-bansal/map-the-tiles">https://github.com/gagan-bansal/map-the-tiles</a>.</p>

<p>These 2 libraries are helper libraries.</p>

<p><code>googlemaps-utils</code> takes a <code>width/height</code> and a central <code>lat/long</code> and gives us a bounding box which is just the <code>top/left</code> coordinate and the <code>bottom/right</code> coordinate.</p>

<p>We then take that bounding box and convert it to meter points so we can generate a <a href="http://en.wikipedia.org/wiki/Mercator_projection">mercator projection</a>.</p>

<p>The <code>map-the-tiles</code> takes those meter points and returns <code>x,y,z</code> points;</p>

<p>Those <code>x,y,z</code> points get fed into the OSM url <code>http://{s}.tile.osm.org/{z}/{x}/{y}.png</code> and we get our tile images.</p>

<p>We can then render them at their given <code>top/left</code> points w/ <code>react-art</code>.</p>

<p>Ultimately this library was built with A LOT of googling and assembling some tools people already constructed.</p>

<h3>Some Internals</h3>

<p>Most of the logic is just in the <code>TileUtil</code>. There are likely much more efficient ways to do this however this is my first stab at it with my limited geo knowledge.</p>

<p>Converts <code>lat/long</code> to meter points</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>degrees2meters(lon,lat) {
</span><span class='line'>    var x = lon * 20037508.34 / 180;
</span><span class='line'>    var y = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);
</span><span class='line'>    y = y * 20037508.34 / 180;
</span><span class='line'>    return [x, y]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Converts meters to coordinates</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>meters2degress(x,y) {
</span><span class='line'>    var lon = x *  180 / 20037508.34 ;
</span><span class='line'>    var lat = Number(180 / Math.PI * (2 * Math.atan(Math.exp(y * Math.PI / 180)) - Math.PI / 2));
</span><span class='line'>    return [lon, lat]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The main layout generator.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getTileLayout(options) {
</span><span class='line'>    var layout = [];
</span><span class='line'>    var bounds = gmu.calcBounds(options.center[1], options.center[0], options.zoom, options.width, options.height); // GET COORDINATE BOUNDS
</span><span class='line'>
</span><span class='line'>    var topLeftMeters = TileUtil.degrees2meters(bounds.left, bounds.top),
</span><span class='line'>        bottomRightMeters = TileUtil.degrees2meters(bounds.right, bounds.bottom);
</span><span class='line'>
</span><span class='line'>    //Conver the coordinates each to meters
</span><span class='line'>    
</span><span class='line'>    var tiler = new MapTheTiles(null, options.tileWidth); // Create a generic tiler based on our tile width
</span><span class='line'>    
</span><span class='line'>    var layoutForBounds = {
</span><span class='line'>        top: topLeftMeters[1],
</span><span class='line'>        left: topLeftMeters[0],
</span><span class='line'>        right: bottomRightMeters[0],
</span><span class='line'>        bottom: bottomRightMeters[1]
</span><span class='line'>    };
</span><span class='line'>    //Pass in the meters for each point
</span><span class='line'>
</span><span class='line'>    var tiles = tiler.getTiles(layoutForBounds, options.zoom) // Get the x,y,z points for our zoom level
</span><span class='line'>
</span><span class='line'>    tiles.forEach(function(tile) {
</span><span class='line'>        var coordPoint = {
</span><span class='line'>            x: tile.X,
</span><span class='line'>            y: tile.Y,
</span><span class='line'>            z: tile.Z
</span><span class='line'>        },
</span><span class='line'>        coord = {
</span><span class='line'>            x: tile.left,
</span><span class='line'>            y: tile.top,
</span><span class='line'>            img: TileUtil.getTileUrl(options.tileSource, coordPoint, options.subdomains) //Just format the OSM tile resource
</span><span class='line'>        };
</span><span class='line'>
</span><span class='line'>        layout.push(coord);
</span><span class='line'>    }, this);
</span><span class='line'>
</span><span class='line'>    return layout;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This is how we render each tile.
We have the <code>x/y</code> coordinates thanks to our tiler.</p>

<p>We use <code>Paths.js</code> to create a generic rectangular path.
This is so we can support <code>react-native</code> in the future since the shapes have yet to be created.</p>

<p>Then we create a new fill with the tile image and set it to the width/height of the generic tile at <code>0,0</code> of the shape.</p>

<p>This technically is a pattern for the background but because we set it to the exact <code>width/height</code> of the image it just renders the image once.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var rectanglePath = Rectangle({
</span><span class='line'>  top: 0,
</span><span class='line'>  left: 0,
</span><span class='line'>  right: 256,
</span><span class='line'>  bottom: 256
</span><span class='line'>}).path.print();
</span><span class='line'>///UP ABOVE
</span><span class='line'>
</span><span class='line'>        return layout.map(function(tile) {
</span><span class='line'>            return (
</span><span class='line'>                &lt;Shape
</span><span class='line'>                    d={rectanglePath}
</span><span class='line'>                    x={tile.x}
</span><span class='line'>                    y={tile.y}
</span><span class='line'>                    fill={new Pattern(tile.img, this.props.tileWidth , this.props.tileWidth, 0, 0)}
</span><span class='line'>                /&gt;
</span><span class='line'>            )
</span><span class='line'>        }, this);</span></code></pre></td></tr></table></div></figure>


<h3>The Code</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react');
</span><span class='line'>var ReactMap = require('react-art-map');
</span><span class='line'>var ReactArt = require('react-art'),
</span><span class='line'>    Circle = require('react-art/shapes/circle');
</span><span class='line'>
</span><span class='line'>var Map = ReactMap.Map;
</span><span class='line'>
</span><span class='line'>var viewportWidth = function() {
</span><span class='line'>    return  window.innerWidth - 100;
</span><span class='line'>}
</span><span class='line'>var viewportHeight = function() {
</span><span class='line'>    return window.innerHeight - 100;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var center = [
</span><span class='line'>    -122.668197,45.525292
</span><span class='line'>],
</span><span class='line'>offset = 3;
</span><span class='line'>
</span><span class='line'>var Demo = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      center: center,
</span><span class='line'>      zoom: 15,
</span><span class='line'>      x: 100
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>    requestAnimationFrame(this.updateCircle);
</span><span class='line'>  },
</span><span class='line'>  updateCircle: function() {
</span><span class='line'>    if (this.state.x &gt;= viewportWidth()) {
</span><span class='line'>        offset = -3;
</span><span class='line'>    } else if ( this.state.x &lt;= 99) {
</span><span class='line'>        offset = 3;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    this.state.x += offset;
</span><span class='line'>    this.setState(this.state, function() {
</span><span class='line'>        requestAnimationFrame(this.updateCircle);
</span><span class='line'>    });
</span><span class='line'>  },
</span><span class='line'>  handleDrag: function(newCenter) {
</span><span class='line'>    this.setState({
</span><span class='line'>      center: newCenter
</span><span class='line'>    });
</span><span class='line'>  }, 
</span><span class='line'>  render: function () {
</span><span class='line'>    return (
</span><span class='line'>      &lt;div&gt;
</span><span class='line'>        &lt;Map
</span><span class='line'>            width={viewportWidth()}
</span><span class='line'>            height={viewportHeight()}
</span><span class='line'>            center={this.state.center}
</span><span class='line'>            zoom={this.state.zoom}
</span><span class='line'>            tileSource="http://{s}.tile.osm.org/{z}/{x}/{y}.png"
</span><span class='line'>            onDrag={this.handleDrag}
</span><span class='line'>        &gt;
</span><span class='line'>            &lt;Circle 
</span><span class='line'>                x={this.state.x}
</span><span class='line'>                y={100}
</span><span class='line'>                radius={30}
</span><span class='line'>                stroke="#000"
</span><span class='line'>                strokeWidth={5}
</span><span class='line'>            /&gt;
</span><span class='line'>        &lt;/Map&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>module.exports = Demo;</span></code></pre></td></tr></table></div></figure>


<h3>React Native?!?!?!</h3>

<p>React Native has a map implementation but it doesn&rsquo;t allow for much flexibility. You can render pins but that is about it.</p>

<p>With this library once the Pattern fill gets implemented you can render any map tile based service + any cool visualiztions on the map that you want.</p>

<p>I&rsquo;ve logged an issue here <a href="https://github.com/facebook/react-native/issues/1462">https://github.com/facebook/react-native/issues/1462</a> so follow along for when it gets implemented.</p>

<h3>Results</h3>

<p data-height="624" data-theme-id="0" data-slug-hash="PqWRvz" data-default-tab="result" data-user="browniefed" class='codepen'>See the Pen <a href='http://codepen.io/browniefed/pen/PqWRvz/'>PqWRvz</a> by Jason Brown (<a href='http://codepen.io/browniefed'>@browniefed</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://browniefed.com//assets.codepen.io/assets/embed/ei.js"></script>



]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React-Art and Bar Charts]]></title>
		
		<link href="http://browniefed.com/blog/2015/05/29/react-art-and-bar-charts/"/>
		<updated>2015-05-29T08:53:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/05/29/react-art-and-bar-charts</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h3>Introduction</h3>

<p>I&rsquo;ve shown in the past how to utilize <code>react-art</code> and other libraries to do animations, and render arbitrary things. So now lets bring it all together, lets render a simple bar chart.</p>

<p>I&rsquo;m going to leverage <a href="https://github.com/andreaferretti/paths-js">Paths.js</a> because it was made for this exact reason. Given data, generate an immutable set of paths. Ultimately that is what visualizations are, a data set converted to a set of paths.</p>

<p>The end result will look something
<img src="http://i.imgur.com/DpChFtO.png" title="Bar Chart Result w/ Hover" ></p>

<!-- more -->


<h3>Boilerplate</h3>

<p>I like to setup a boilerplate templat that just renders an arbitrary surface that is the full width of the viewport. Also to make things response we&rsquo;ll hook up some event listeners to the window resize and trigger a re-render.</p>

<p>We will bring in each side <code>100px</code> and add a <code>margin</code> of <code>50px</code> to each side to give us some padding on each side. Also note we should totally debounce the resize event on the window if this was production!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react'),
</span><span class='line'>    ReactArt = require('react-art'),
</span><span class='line'>    Surface = ReactArt.Surface;
</span><span class='line'>
</span><span class='line'>var viewportWidth = function() {
</span><span class='line'>    return  window.innerWidth - 100;
</span><span class='line'>}
</span><span class='line'>var viewportHeight = function() {
</span><span class='line'>    return window.innerHeight - 100;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var Demo = React.createClass({
</span><span class='line'>
</span><span class='line'>    getInitialState: function() {
</span><span class='line'>        return {
</span><span class='line'>            width: viewportWidth(),
</span><span class='line'>            height: viewportHeight()
</span><span class='line'>        }
</span><span class='line'>    },
</span><span class='line'>    componentDidMount: function() {
</span><span class='line'>        window.addEventListener('resize', this.refresh, false); //This should be debounced
</span><span class='line'>    },
</span><span class='line'>    componentWillUnmount: function() {
</span><span class='line'>        window.removeEventListener('resize', this.refresh, false);
</span><span class='line'>    },
</span><span class='line'>    refresh: function() {
</span><span class='line'>        this.setState({
</span><span class='line'>            width: viewportWidth(),
</span><span class='line'>            height: viewportHeight()
</span><span class='line'>        });
</span><span class='line'>    },
</span><span class='line'>
</span><span class='line'>    render: function() {
</span><span class='line'>        var bar = this.getBar();
</span><span class='line'>
</span><span class='line'>        return (
</span><span class='line'>            &lt;div style= style=&gt;
</span><span class='line'>                &lt;Surface
</span><span class='line'>                    width={this.state.width}
</span><span class='line'>                    height={this.state.height}
</span><span class='line'>                &gt;
</span><span class='line'>
</span><span class='line'>                &lt;/Surface&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        );
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>module.exports = Demo;</span></code></pre></td></tr></table></div></figure>


<h3>Data and the Chart</h3>

<p>We need some data, so I&rsquo;ll steal some from the <code>Paths.js</code> wiki, and also steal the colors.</p>

<p>We&rsquo;ll add a method that returns a Bar Chart generated by <code>Paths.js</code> that is dervied from width/height we set on state.
A new Bar Chart will get called every time we call <code>setState</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var data = [
</span><span class='line'>    [
</span><span class='line'>      { name: 'Italy', population: 59859996 },
</span><span class='line'>      { name: 'Spain', population: 46704314 },
</span><span class='line'>      { name: 'France', population: 65806000 },
</span><span class='line'>      { name: 'Romania', population: 20121641 },
</span><span class='line'>      { name: 'Greece', population: 10815197 }
</span><span class='line'>    ],
</span><span class='line'>    [
</span><span class='line'>      { name: 'Zambia', population: 14580290 },
</span><span class='line'>      { name: 'Cameroon', population: 20386799 },
</span><span class='line'>      { name: 'Nigeria', population: 173615000 },
</span><span class='line'>      { name: 'Ethiopia', population: 86613986 },
</span><span class='line'>      { name: 'Ghana', population: 24658823 }
</span><span class='line'>    ]
</span><span class='line'>  ];
</span><span class='line'>
</span><span class='line'>var colorPallete = ["#FEE871", "#E5FAAF"];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>getBar: function() {
</span><span class='line'>
</span><span class='line'>    var bar = Bar({
</span><span class='line'>      data: data,
</span><span class='line'>      accessor: function(x) { return x.population; }, // Value to use
</span><span class='line'>      compute: {
</span><span class='line'>        color: function(i) { return colorPallete[i]; } //Color of the bar
</span><span class='line'>      },
</span><span class='line'>      width: this.state.width, //Set it to our surface width so it is responsive when our surface width changes
</span><span class='line'>      height: this.state.height, //Set it to our surface height so it's repsponsive
</span><span class='line'>      gutter: 10
</span><span class='line'>    });
</span><span class='line'>    
</span><span class='line'>    return bar;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>Lets create the X/Y axis bars</h3>

<p>The X axis and Y axis can be generated with straight lines by once again <code>Paths.js</code> <code>Path</code> method.</p>

<p>The <code>X</code> axis starts at the bottom left corner, so <code>0,height</code>, and runs to the far right, so <code>width,height</code>.</p>

<p>The <code>Y</code> axis starts at the top right corner, so <code>0,0</code>, and runs along the left side to the bottom so <code>0,height</code></p>

<p>We merely stroke a 1px black line.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getXAxis: function() {
</span><span class='line'>    var path = Path().moveto(0, this.state.height).lineto(this.state.width, this.state.height);
</span><span class='line'>    return (
</span><span class='line'>        &lt;Shape d={path.print()} strokeWidth={1} stroke="#000" /&gt;
</span><span class='line'>    );   
</span><span class='line'>},
</span><span class='line'>getYAxis: function() {
</span><span class='line'>    var path = Path().moveto(0,0).lineto(0, this.state.height);
</span><span class='line'>    return (
</span><span class='line'>        &lt;Shape d={path.print()} strokeWidth={1} stroke="#000" /&gt;
</span><span class='line'>    ); 
</span><span class='line'>},
</span><span class='line'>render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;div style= style=&gt;
</span><span class='line'>                &lt;Surface
</span><span class='line'>                    width={this.state.width}
</span><span class='line'>                    height={this.state.height}
</span><span class='line'>                &gt;
</span><span class='line'>                    &lt;Group&gt;
</span><span class='line'>                        {this.getXAxis()}
</span><span class='line'>                        {this.getYAxis()}
</span><span class='line'>                    &lt;/Group&gt;
</span><span class='line'>                &lt;/Surface&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        );
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<h3>Render the Bar Graph</h3>

<p>We&rsquo;ll call <code>this.getBar()</code> to just generate one bar graph and then pipe it into each function that needs it.
To make this more testable we&rsquo;d probably just want to provide each function with absolutely necessary info but just keep that in mind if you implement this for real.</p>

<p>All we do is map over each <code>curve</code> that we have, in our case we have <code>10</code> data points so therefore we have <code>10</code> curves.
The color comes from the way we grouped our data and the pallette we provided in the first step.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getBarChart: function(bar) {
</span><span class='line'>    return bar.curves.map(function(bar) {
</span><span class='line'>        return (
</span><span class='line'>            &lt;Group&gt;
</span><span class='line'>              &lt;Shape d={bar.line.path.print()} fill={bar.color}/&gt;
</span><span class='line'>            &lt;/Group&gt;
</span><span class='line'>        )
</span><span class='line'>    }, this)
</span><span class='line'>},
</span><span class='line'>render: function() {
</span><span class='line'>    var bar = this.getBar();
</span><span class='line'>
</span><span class='line'>    return (
</span><span class='line'>        &lt;div style= style=&gt;
</span><span class='line'>            &lt;Surface
</span><span class='line'>                width={this.state.width}
</span><span class='line'>                height={this.state.height}
</span><span class='line'>            &gt;
</span><span class='line'>                &lt;Group&gt;
</span><span class='line'>                    {this.getBarChart(bar)} 
</span><span class='line'>                &lt;/Group&gt;
</span><span class='line'>                &lt;Group&gt;
</span><span class='line'>                    {this.getXAxis(bar)}
</span><span class='line'>                    {this.getYAxis(bar)}
</span><span class='line'>                &lt;/Group&gt;
</span><span class='line'>            &lt;/Surface&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>    );
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Render the Bar Information</h3>

<p>Lets also display some text about the bars. We&rsquo;ll use <code>Text</code> from <code>react-art</code> to do that.
We need to calculate a few points, which <code>Paths.js</code> will help us with.</p>

<p>Since each bar is a rectangle it just has 4 points, we can get the <code>points</code> from the path.
The path will gives us 4 arrays, each with <code>x,y</code> coordinates of each corner point.</p>

<p>We need to do a little subtraction of the <code>x,y</code> coordinates to figure out the width of each bar, and height of each bar so we can place our text.</p>

<p>We&rsquo;ll use the <code>Group</code> element from <code>react-art</code> to adjust our coordinate system to start at the top left of each bar.
The name and population will be aligned to the center, and at the bottom of the bar. We can use <code>x,y</code> coordinates to derive our width/height.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getBarChart: function(bar) {
</span><span class='line'>    return bar.curves.map(function(bar) {
</span><span class='line'>
</span><span class='line'>        var points = bar.line.path.points(),
</span><span class='line'>            right = points[0][0],
</span><span class='line'>            top = points[0][1],
</span><span class='line'>            left = points[2][0],
</span><span class='line'>            bottom = points[2][1],
</span><span class='line'>            width = right - left,
</span><span class='line'>            height = bottom - top;
</span><span class='line'>
</span><span class='line'>        return (
</span><span class='line'>            &lt;Group&gt;
</span><span class='line'>              &lt;Shape d={bar.line.path.print()} fill={bar.color}/&gt;
</span><span class='line'>
</span><span class='line'>              &lt;Group x={left} y={top}&gt;
</span><span class='line'>                &lt;Text x={width/2} y={height - 24} alignment="middle" fill="#000" font='bold 10px "Arial"'&gt;{bar.item.name}&lt;/Text&gt;
</span><span class='line'>                &lt;Text x={width/2} y={height - 12} alignment="middle" fill="#000" font='bold 10px "Arial"'&gt;{bar.item.population +''}&lt;/Text&gt;
</span><span class='line'>              &lt;/Group&gt;
</span><span class='line'>            &lt;/Group&gt;
</span><span class='line'>        )
</span><span class='line'>    }, this)
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<h3>Hover data for fun</h3>

<p>Just to show how to handle mouse events we can have a <code>mouseMove</code> on each bar.
We&rsquo;ll bind each hover event with the <code>item</code> object which has the name and population.</p>

<p>When a new bar is hovered or the mouse is moved it will set the <code>hoveredItem</code> object and coordinates on our state which will cause a re-render.
Each movement of the mouse will cause a re-render so be sure and debounce this as well.</p>

<p>The hovered data displayed will actually use HTML not <code>react-art</code> since we wrap the <code>Surface</code> in a <code>div</code> and give it <code>position:relative</code>. This will mean it has the same coordinates as our <code>Surface</code> mouse events which is why we can just use <code>x,y</code> on the event.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>handleMouseMove: function(item, e) {
</span><span class='line'>    this.setState({
</span><span class='line'>        hoveredItem: item,
</span><span class='line'>        hoveredY: e.y,
</span><span class='line'>        hoveredX: e.x
</span><span class='line'>    });
</span><span class='line'>},
</span><span class='line'>getBarChart: function(bar) {
</span><span class='line'>    return bar.curves.map(function(bar) {
</span><span class='line'>
</span><span class='line'>        var points = bar.line.path.points(),
</span><span class='line'>            right = points[0][0],
</span><span class='line'>            top = points[0][1],
</span><span class='line'>            left = points[2][0],
</span><span class='line'>            bottom = points[2][1],
</span><span class='line'>            width = right - left,
</span><span class='line'>            height = bottom - top;
</span><span class='line'>            
</span><span class='line'>        return (
</span><span class='line'>            &lt;Group 
</span><span class='line'>              onMouseMove={this.handleMouseMove.bind(this, bar.item)}
</span><span class='line'>            &gt;
</span><span class='line'>              &lt;Shape d={bar.line.path.print()} fill={bar.color}/&gt;
</span><span class='line'>
</span><span class='line'>              &lt;Group x={left} y={top}&gt;
</span><span class='line'>                &lt;Text x={width/2} y={height - 24} alignment="middle" fill="#000" font='bold 10px "Arial"'&gt;{bar.item.name}&lt;/Text&gt;
</span><span class='line'>                &lt;Text x={width/2} y={height - 12} alignment="middle" fill="#000" font='bold 10px "Arial"'&gt;{bar.item.population +''}&lt;/Text&gt;
</span><span class='line'>              &lt;/Group&gt;
</span><span class='line'>            &lt;/Group&gt;
</span><span class='line'>        )
</span><span class='line'>    }, this)
</span><span class='line'>},
</span><span class='line'>getHoveredData: function() {
</span><span class='line'>    if (!this.state.hoveredItem) {
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>    return (
</span><span class='line'>            &lt;div style=&gt;
</span><span class='line'>                &lt;h2&gt;{this.state.hoveredItem.name}&lt;/h2&gt;
</span><span class='line'>                &lt;h5&gt;{this.state.hoveredItem.population}&lt;/h5&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        )
</span><span class='line'>},
</span><span class='line'>render: function() {
</span><span class='line'>    var bar = this.getBar();
</span><span class='line'>
</span><span class='line'>    return (
</span><span class='line'>        &lt;div style= style=&gt;
</span><span class='line'>            &lt;Surface
</span><span class='line'>                width={this.state.width}
</span><span class='line'>                height={this.state.height}
</span><span class='line'>            &gt;
</span><span class='line'>                &lt;Group&gt;
</span><span class='line'>                    {this.getBarChart(bar)} 
</span><span class='line'>                &lt;/Group&gt;
</span><span class='line'>                &lt;Group&gt;
</span><span class='line'>                    {this.getXAxis(bar)}
</span><span class='line'>                    {this.getYAxis(bar)}
</span><span class='line'>                &lt;/Group&gt;
</span><span class='line'>            &lt;/Surface&gt;
</span><span class='line'>            {this.getHoveredData()}
</span><span class='line'>
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>    );
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Final Code</h3>

<p>Finally all the code combined.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react'),
</span><span class='line'>    ReactArt = require('react-art'),
</span><span class='line'>    Surface = ReactArt.Surface,
</span><span class='line'>    Group = ReactArt.Group,
</span><span class='line'>    Text = ReactArt.Text,
</span><span class='line'>    Shape = ReactArt.Shape,
</span><span class='line'>    Bar = require('paths-js/bar'),
</span><span class='line'>    Path = require('paths-js/path');
</span><span class='line'>
</span><span class='line'>var viewportWidth = function() {
</span><span class='line'>    return  window.innerWidth - 100;
</span><span class='line'>}
</span><span class='line'>var viewportHeight = function() {
</span><span class='line'>    return window.innerHeight - 100;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var data = [
</span><span class='line'>    [
</span><span class='line'>      { name: 'Italy', population: 59859996 },
</span><span class='line'>      { name: 'Spain', population: 46704314 },
</span><span class='line'>      { name: 'France', population: 65806000 },
</span><span class='line'>      { name: 'Romania', population: 20121641 },
</span><span class='line'>      { name: 'Greece', population: 10815197 }
</span><span class='line'>    ],
</span><span class='line'>    [
</span><span class='line'>      { name: 'Zambia', population: 14580290 },
</span><span class='line'>      { name: 'Cameroon', population: 20386799 },
</span><span class='line'>      { name: 'Nigeria', population: 173615000 },
</span><span class='line'>      { name: 'Ethiopia', population: 86613986 },
</span><span class='line'>      { name: 'Ghana', population: 24658823 }
</span><span class='line'>    ]
</span><span class='line'>  ];
</span><span class='line'>
</span><span class='line'>var colorPallete = ["#FEE871", "#E5FAAF", "#B7E5F5"];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var Demo = React.createClass({
</span><span class='line'>
</span><span class='line'>    getInitialState: function() {
</span><span class='line'>        return {
</span><span class='line'>            width: viewportWidth(),
</span><span class='line'>            height: viewportHeight()
</span><span class='line'>        }
</span><span class='line'>    },
</span><span class='line'>    componentDidMount: function() {
</span><span class='line'>        window.addEventListener('resize', this.refresh, false); //This should be debounced
</span><span class='line'>    },
</span><span class='line'>    componentWillUnmount: function() {
</span><span class='line'>        window.removeEventListener('resize', this.refresh, false);
</span><span class='line'>    },
</span><span class='line'>    refresh: function() {
</span><span class='line'>        this.setState({
</span><span class='line'>            width: viewportWidth(),
</span><span class='line'>            height: viewportHeight()
</span><span class='line'>        });
</span><span class='line'>    },
</span><span class='line'>    getBar: function() {
</span><span class='line'>
</span><span class='line'>        var bar = Bar({
</span><span class='line'>          data: data,
</span><span class='line'>          accessor: function(x) { return x.population; }, // Value to use
</span><span class='line'>          compute: {
</span><span class='line'>            color: function(i) { return colorPallete[i]; } //Color of the bar
</span><span class='line'>          },
</span><span class='line'>          width: this.state.width, //Set it to our surface width so it is responsive when our surface width changes
</span><span class='line'>          height: this.state.height, //Set it to our surface height so it's repsponsive
</span><span class='line'>          gutter: 10
</span><span class='line'>        });
</span><span class='line'>        
</span><span class='line'>        return bar;
</span><span class='line'>    },
</span><span class='line'>    handleMouseMove: function(item, e) {
</span><span class='line'>        this.setState({
</span><span class='line'>            hoveredItem: item,
</span><span class='line'>            hoveredY: e.y,
</span><span class='line'>            hoveredX: e.x
</span><span class='line'>        });
</span><span class='line'>    },
</span><span class='line'>    getBarChart: function(bar) {
</span><span class='line'>        return bar.curves.map(function(bar) {
</span><span class='line'>
</span><span class='line'>            var points = bar.line.path.points(),
</span><span class='line'>                right = points[0][0],
</span><span class='line'>                top = points[0][1],
</span><span class='line'>                left = points[2][0],
</span><span class='line'>                bottom = points[2][1],
</span><span class='line'>                width = right - left,
</span><span class='line'>                height = bottom - top;
</span><span class='line'>                
</span><span class='line'>            return (
</span><span class='line'>                &lt;Group 
</span><span class='line'>                  onMouseMove={this.handleMouseMove.bind(this, bar.item)}
</span><span class='line'>                &gt;
</span><span class='line'>                  &lt;Shape d={bar.line.path.print()} fill={bar.color}/&gt;
</span><span class='line'>
</span><span class='line'>                  &lt;Group x={left} y={top}&gt;
</span><span class='line'>                    &lt;Text x={width/2} y={height - 24} alignment="middle" fill="#000" font='bold 10px "Arial"'&gt;{bar.item.name}&lt;/Text&gt;
</span><span class='line'>                    &lt;Text x={width/2} y={height - 12} alignment="middle" fill="#000" font='bold 10px "Arial"'&gt;{bar.item.population +''}&lt;/Text&gt;
</span><span class='line'>                  &lt;/Group&gt;
</span><span class='line'>                &lt;/Group&gt;
</span><span class='line'>            )
</span><span class='line'>        }, this)
</span><span class='line'>    },
</span><span class='line'>    getXAxis: function(bar) {
</span><span class='line'>        var path = Path().moveto(0, this.state.height).lineto(this.state.width, this.state.height);
</span><span class='line'>        return (
</span><span class='line'>            &lt;Shape d={path.print()} strokeWidth={1} stroke="#000" /&gt;
</span><span class='line'>        );   
</span><span class='line'>    },
</span><span class='line'>    getYAxis: function(bar) {
</span><span class='line'>        var path = Path().moveto(0,0).lineto(0, this.state.height);
</span><span class='line'>        return (
</span><span class='line'>            &lt;Shape d={path.print()} strokeWidth={1} stroke="#000" /&gt;
</span><span class='line'>        ); 
</span><span class='line'>    },
</span><span class='line'>    getHoveredData: function() {
</span><span class='line'>        if (!this.state.hoveredItem) {
</span><span class='line'>            return null;
</span><span class='line'>        }
</span><span class='line'>        return (
</span><span class='line'>                &lt;div style=&gt;
</span><span class='line'>                    &lt;h2&gt;{this.state.hoveredItem.name}&lt;/h2&gt;
</span><span class='line'>                    &lt;h5&gt;{this.state.hoveredItem.population}&lt;/h5&gt;
</span><span class='line'>                &lt;/div&gt;
</span><span class='line'>            )
</span><span class='line'>    },
</span><span class='line'>    render: function() {
</span><span class='line'>        var bar = this.getBar();
</span><span class='line'>
</span><span class='line'>        return (
</span><span class='line'>            &lt;div style= style=&gt;
</span><span class='line'>                &lt;Surface
</span><span class='line'>                    width={this.state.width}
</span><span class='line'>                    height={this.state.height}
</span><span class='line'>                &gt;
</span><span class='line'>                    &lt;Group&gt;
</span><span class='line'>                        {this.getBarChart(bar)} 
</span><span class='line'>                    &lt;/Group&gt;
</span><span class='line'>                    &lt;Group&gt;
</span><span class='line'>                        {this.getXAxis(bar)}
</span><span class='line'>                        {this.getYAxis(bar)}
</span><span class='line'>                    &lt;/Group&gt;
</span><span class='line'>                &lt;/Surface&gt;
</span><span class='line'>                {this.getHoveredData()}
</span><span class='line'>
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        );
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>module.exports = Demo;</span></code></pre></td></tr></table></div></figure>


<h3>Results</h3>

<p data-height="624" data-theme-id="0" data-slug-hash="LVxjPw" data-default-tab="result" data-user="browniefed" class='codepen'>See the Pen <a href='http://codepen.io/browniefed/pen/LVxjPw/'>LVxjPw</a> by Jason Brown (<a href='http://codepen.io/browniefed'>@browniefed</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://browniefed.com//assets.codepen.io/assets/embed/ei.js"></script>


<h3>Conclusion</h3>

<p>Once again <a href="https://github.com/andreaferretti/paths-js">Paths.js</a> comes in handy for generating arbitrary path information, and providing access to a lot of valuable data to making laying out your graphs with <code>react-art</code> a breeze.</p>

<p>Some homework for you is to add some vertical labels at each particular step.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Art and Paths.js]]></title>
		
		<link href="http://browniefed.com/blog/2015/05/27/react-art-and-paths-dot-js/"/>
		<updated>2015-05-27T19:32:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/05/27/react-art-and-paths-dot-js</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h3>Intro</h3>

<p><a href="https://github.com/andreaferretti/paths-js">Paths.js</a> is a cool library. It comes with 3 levels of generating paths.</p>

<ul>
<li>Low level which helps you generate paths/lines.</li>
<li>Mid level which generates paths for shapes</li>
<li>High level which takes a set of data and generates graphs</li>
</ul>


<p>All of these are great when working with <code>react-art</code> because it&rsquo;s just returning data. I&rsquo;ll say it once, and a million more but libraries that just generate data make it easy to traverse and render with <code>react-art</code>.</p>

<!-- more -->


<h3>Paths</h3>

<h4>UPDATE:</h4>

<p>Sebastian Markbage (the creator of ReactART and ART), informed me that <code>ReactART</code> itself has a <code>Path</code> implementation. I realized this but didn&rsquo;t think much of it.
However per the discussion here <a href="https://discuss.reactjs.org/t/react-art-with-paths-js/492">https://discuss.reactjs.org/t/react-art-with-paths-js/492</a> the <code>ART</code> path is faster as it takes advantage of the current <code>mode</code> to create the most efficient path instead of taking a string and converting it back into native for instructions for canvas rendering.</p>

<p>The <code>ReactART.Path</code> has similar methods. Check out the discuss thread for a link to the implementation to find out the supported methods. I&rsquo;m currently working on <code>ReactART</code> documentation so expect that soon.</p>

<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var path = Path()
</span><span class='line'>  .moveto(10, 20)
</span><span class='line'>  .lineto(30, 50)
</span><span class='line'>  .lineto(25, 28)
</span><span class='line'>  .qcurveto(27, 30, 32, 27)
</span><span class='line'>  .closepath();</span></code></pre></td></tr></table></div></figure>


<p>This is can just be plugged right into <code>react-art</code> <code>Shape</code> element.</p>

<p>Like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react'),
</span><span class='line'>  ReactArt = require('react-art'),
</span><span class='line'>  Surface = ReactArt.Surface,
</span><span class='line'>  Shape = ReactArt.Shape,
</span><span class='line'>  Path = require('paths-js/path');
</span><span class='line'>
</span><span class='line'>var Demo = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>      return {
</span><span class='line'>          to: {
</span><span class='line'>              x: 30,
</span><span class='line'>              y: 50
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>  },
</span><span class='line'>  getPath: function() {
</span><span class='line'>      var path = Path()
</span><span class='line'>                    .moveto(10, 20)
</span><span class='line'>                    .lineto(this.state.to.x, this.state.to.y)
</span><span class='line'>                    .lineto(25, 28)
</span><span class='line'>                    .qcurveto(27, 30, 32, 27)
</span><span class='line'>                    .closepath();
</span><span class='line'>
</span><span class='line'>      return path.print();
</span><span class='line'>  },
</span><span class='line'>  startAnimating: function() {
</span><span class='line'>
</span><span class='line'>      if (this.state.to.x === 100) {
</span><span class='line'>          this.addToPosition = -1;
</span><span class='line'>      } else if (this.state.to.x === 29) {
</span><span class='line'>          this.addToPosition = 1;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      this.state.to.x += this.addToPosition;
</span><span class='line'>      this.state.to.y += this.addToPosition;
</span><span class='line'>
</span><span class='line'>      this.setState(this.state);
</span><span class='line'>  },
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>      this.addToPosition = 1;
</span><span class='line'>      setInterval(this.startAnimating, 17)
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>      return (
</span><span class='line'>          &lt;div&gt;
</span><span class='line'>              &lt;Surface
</span><span class='line'>                  width={500}
</span><span class='line'>                  height={500}
</span><span class='line'>              &gt;
</span><span class='line'>                  &lt;Shape d={this.getPath()} stroke="#000" strokeWidth={1} /&gt;
</span><span class='line'>              &lt;/Surface&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>      )
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>module.exports = Demo;</span></code></pre></td></tr></table></div></figure>




<p data-height="624" data-theme-id="0" data-slug-hash="VLmOOE" data-default-tab="result" data-user="browniefed" class='codepen'>See the Pen <a href='http://codepen.io/browniefed/pen/VLmOOE/'>VLmOOE</a> by Jason Brown (<a href='http://codepen.io/browniefed'>@browniefed</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://browniefed.com//assets.codepen.io/assets/embed/ei.js"></script>


<h3>Simple Shapes</h3>

<p>Now <code>react-art</code> already comes with a few different shapes but <code>paths.js</code> have a few built in as well, like <code>Rectangle</code> and <code>Bezier</code> curve.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var rectangle = Rectangle({
</span><span class='line'>  top: 10,
</span><span class='line'>  bottom: 3,
</span><span class='line'>  left: -2,
</span><span class='line'>  right: 5
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>And how that looks is very similar to the previous example</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react'),
</span><span class='line'>  ReactArt = require('react-art'),
</span><span class='line'>  Surface = ReactArt.Surface,
</span><span class='line'>  Group = ReactArt.Group,
</span><span class='line'>  Shape = ReactArt.Shape,
</span><span class='line'>  Rectangle = require('paths-js/rectangle'),
</span><span class='line'>  Bezier = require('paths-js/bezier');
</span><span class='line'>
</span><span class='line'>var Demo = React.createClass({
</span><span class='line'>  getPath: function() {
</span><span class='line'>      var rectangle = Rectangle({
</span><span class='line'>                    top: 10,
</span><span class='line'>                    bottom: 3,
</span><span class='line'>                    left: -2,
</span><span class='line'>                    right: 5
</span><span class='line'>                  });
</span><span class='line'>
</span><span class='line'>      return rectangle.path.print();
</span><span class='line'>  },
</span><span class='line'>  getBez: function() {
</span><span class='line'>      var points = [[1, 50], [50, 100], [100, 3], [4, 0]];
</span><span class='line'>      var curve = Bezier({
</span><span class='line'>        points: points,
</span><span class='line'>        tension: 0.2
</span><span class='line'>      });
</span><span class='line'>
</span><span class='line'>      return curve.path.print();
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>      return (
</span><span class='line'>          &lt;div&gt;
</span><span class='line'>              &lt;Surface
</span><span class='line'>                  width={500}
</span><span class='line'>                  height={500}
</span><span class='line'>              &gt;
</span><span class='line'>                  &lt;Group x={100} y={100}&gt;
</span><span class='line'>                      &lt;Shape d={this.getPath()} stroke="#000" strokeWidth={1} /&gt;
</span><span class='line'>                  &lt;/Group&gt;
</span><span class='line'>                  &lt;Group x={200} y={200}&gt;
</span><span class='line'>                      &lt;Shape d={this.getBez()} stroke="#000" strokeWidth={1} /&gt;
</span><span class='line'>                  &lt;/Group&gt;
</span><span class='line'>              &lt;/Surface&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>      )
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>module.exports = Demo;</span></code></pre></td></tr></table></div></figure>




<p data-height="624" data-theme-id="0" data-slug-hash="xGRNvW" data-default-tab="result" data-user="browniefed" class='codepen'>See the Pen <a href='http://codepen.io/browniefed/pen/xGRNvW/'>xGRNvW</a> by Jason Brown (<a href='http://codepen.io/browniefed'>@browniefed</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://browniefed.com//assets.codepen.io/assets/embed/ei.js"></script>


<h3>Graphs</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var pie = Pie({
</span><span class='line'>  data: [
</span><span class='line'>    { name: 'Italy', population: 59859996 },
</span><span class='line'>    { name: 'Mexico', population: 118395054 },
</span><span class='line'>    { name: 'France', population: 65806000 },
</span><span class='line'>    { name: 'Argentina', population: 40117096 },
</span><span class='line'>    { name: 'Japan', population: 127290000 }
</span><span class='line'>  ],
</span><span class='line'>  accessor: function(x) { return x.population; },
</span><span class='line'>  compute: {
</span><span class='line'>    color: function(i) { return somePalette[i]; }
</span><span class='line'>  },
</span><span class='line'>  center: [20, 15],
</span><span class='line'>  r: 30,
</span><span class='line'>  R: 50
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Some code of it in action</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react'),
</span><span class='line'>  ReactArt = require('react-art'),
</span><span class='line'>  Surface = ReactArt.Surface,
</span><span class='line'>  Group = ReactArt.Group,
</span><span class='line'>  Shape = ReactArt.Shape,
</span><span class='line'>  Pie = require('paths-js/Pie');
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var pie = Pie({
</span><span class='line'>  data: [
</span><span class='line'>    { name: 'Italy', population: 59859996 },
</span><span class='line'>    { name: 'Mexico', population: 118395054 },
</span><span class='line'>    { name: 'France', population: 65806000 },
</span><span class='line'>    { name: 'Argentina', population: 40117096 },
</span><span class='line'>    { name: 'Japan', population: 127290000 }
</span><span class='line'>  ],
</span><span class='line'>  accessor: function(x) { return x.population; },
</span><span class='line'>  compute: {
</span><span class='line'>    color: function(i) { return '#000'; }
</span><span class='line'>  },
</span><span class='line'>  center: [20, 15],
</span><span class='line'>  r: 30,
</span><span class='line'>  R: 50
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var Demo = React.createClass({
</span><span class='line'>
</span><span class='line'>  getPie: function() {
</span><span class='line'>      return pie.curves.map(function(shape) {
</span><span class='line'>          return (
</span><span class='line'>              &lt;Group&gt;
</span><span class='line'>                  &lt;Text fill="#A6BD8A" font='bold 12px "Arial"' x={shape.sector.centroid[0] - 12} y={shape.sector.centroid[1]}&gt;{shape.item.name}&lt;/Text&gt;
</span><span class='line'>                  &lt;Shape d={shape.sector.path.print()} stroke={shape.color} strokeWidth={1} /&gt;
</span><span class='line'>              &lt;/Group&gt;
</span><span class='line'>          )
</span><span class='line'>      })
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>      return (
</span><span class='line'>          &lt;div&gt;
</span><span class='line'>              &lt;Surface
</span><span class='line'>                  width={500}
</span><span class='line'>                  height={500}
</span><span class='line'>              &gt;
</span><span class='line'>                  &lt;Group x={50} y={45}&gt;
</span><span class='line'>                      {this.getPie()}
</span><span class='line'>                  &lt;/Group&gt;
</span><span class='line'>              &lt;/Surface&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>      )
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>module.exports = Demo;</span></code></pre></td></tr></table></div></figure>




<p data-height="624" data-theme-id="0" data-slug-hash="waoLvB" data-default-tab="result" data-user="browniefed" class='codepen'>See the Pen <a href='http://codepen.io/browniefed/pen/waoLvB/'>waoLvB</a> by Jason Brown (<a href='http://codepen.io/browniefed'>@browniefed</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://browniefed.com//assets.codepen.io/assets/embed/ei.js"></script>


<h3>Conclusion</h3>

<p>These examples may look boring but they just show off a bit of the control you can have with <code>react-art</code> and a simple path generator.
Not only that but because we aren&rsquo;t depending on the DOM in any case these examples should also work on <code>react-native</code>.
Combined with some tweening you could make some very effective graphs that animate. That is a topic for another time.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Animating with React Art and Shifty.js]]></title>
		
		<link href="http://browniefed.com/blog/2015/05/26/animating-with-react-art-and-shifty-dot-js/"/>
		<updated>2015-05-26T10:38:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/05/26/animating-with-react-art-and-shifty-dot-js</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Having little experience with D3 animations I&rsquo;m not sure if it is easy to do animations with D3.
However the great thing about <code>react</code> and <code>react-art</code> is that in order to animate you follow the same pattern you do for any other rendering, just <code>setState</code>.</p>

<p>Animations in CSS3 are different in that a particular element has a defined location and you tell the browser the new location. The inbetween animation state from point a => b over a period of time is automatically handled for you.</p>

<p>In our canvas/svg world we need to <code>tween</code> between states. That just means based on a defined time frame (500ms? 1s? 2s?) we need to move an item form <code>x/y</code> to a new <code>x/y</code>.</p>

<p><a href="https://github.com/jeremyckahn/shifty">Shifty.js</a> helps do that in an efficient manner on the web. The reason <code>shifty.js</code> works well with React is that it doesn&rsquo;t mutate DOM but just provides you the ability to modify numbers across a space of time. Additionally it provides out of the box easing effects like <code>elastic</code>, <code>bounce</code>, <code>linear</code>, <code>cubic</code> and other movements.</p>

<p>This article is less about <code>react-art</code> and more about just how to use <code>shifty.js</code> since <code>react-art</code> is just an extension of <code>react</code>, and if you know the fundamental concepts of <code>react</code> then you can do just about anything.</p>

<p>Example of a basic tween movement</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var tweenable = new Shifty();
</span><span class='line'>        
</span><span class='line'>        tweenable.tween({
</span><span class='line'>          from:     { x: 50, y: 50},
</span><span class='line'>          to:       { x: 200, y: 200 },
</span><span class='line'>          duration: 1000,
</span><span class='line'>          step: function (state) {
</span><span class='line'>            this.setState({
</span><span class='line'>                x: state.x,
</span><span class='line'>                y: state.y
</span><span class='line'>            })
</span><span class='line'>          }.bind(this)
</span><span class='line'>        });
</span></code></pre></td></tr></table></div></figure>


<p>We are saying move from <code>0,0</code> to <code>100,100</code> over <code>1000ms (1 second)</code>.</p>

<p><code>Shifty.js</code> will chunk each step from <code>0</code> to <code>100</code> over <code>1000ms</code> and provide us which each step.</p>

<p>Yes this looks very much like <code>jQuery</code> and it&rsquo;s animate function. They are essentially doing the same thing except <code>jQuery</code> modifies the DOM for you and we are just adjusting a number.</p>

<p>Shifty is just one that I happened to pull up, but there are many other tweening libraries that could be used easily.</p>

<p data-height="624" data-theme-id="0" data-slug-hash="bdByVz" data-default-tab="result" data-user="browniefed" class='codepen'>See the Pen <a href='http://codepen.io/browniefed/pen/bdByVz/'>bdByVz</a> by Jason Brown (<a href='http://codepen.io/browniefed'>@browniefed</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://browniefed.com//assets.codepen.io/assets/embed/ei.js"></script>


<p>That&rsquo;s the basics, in a later blog post I&rsquo;ll get into some more complex animations. However any tweening library/phsyics engine that is divorced from the DOM will allow you to maniuplate your data and make your <code>react-art</code> very versatile.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Art Zooming and Dragging]]></title>
		
		<link href="http://browniefed.com/blog/2015/05/20/react-art-zooming-and-dragging/"/>
		<updated>2015-05-20T15:32:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/05/20/react-art-zooming-and-dragging</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>React-art is awesome, you can easily embody the same concepts in React and your visualizations magically work.</p>

<p>I personally have not done a ton of visualization, and the little I have done is mostly rendering graphs with D3.</p>

<p>I&rsquo;ve been tasked with doing a dive for a difficult visualization. We ran into a scenario where we needed the ability to zoom and drag the canvas. D3 conveniently comes with zoom/drag behaviors. D3 integrates pretty well with react-art for doing a lot of the math/generating paths, however after watching <a href="https://www.youtube.com/watch?v=2ii1lEkIv1s">React.js Conf &ndash; Scalable Data Visualization</a> the things immediatley called out that D3 doesn&rsquo;t integrate with react-art are transitions and behaviors (zoom/drag).</p>

<p>So immediately I&rsquo;m thinking about how to accomplish this. Do I need a global scaler that scales all of my coordinates for zooming? Do I need to manage a coordinate system and adjust all of my coordinates with the dragged X/Y offsets.</p>

<p>I googled around, and a few people recommended using <code>canvasEl.getContext('2d').translate(x,y)</code>. I gave this a try with refs, that didn&rsquo;t work.</p>

<p>It did lead me down the right path though. What if I was able to just utilize one global wrapper, and all of my other code could remain unchanged. The great thing about <code>Group</code> is that the coordinate system of the children gets reset, so <code>0,0</code> is now the <code>x,y</code> of the <code>Group</code></p>

<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Group x={100} y={100}&gt;
</span><span class='line'>    &lt;Circle radius={10} stroke="#000" strokeWidth={3} x={20} y={20}/&gt;
</span><span class='line'>&lt;/Group&gt;</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>The coordinates of the circle on the whole canvas would actually be <code>120,120</code> but because of the group at <code>x = 100, y = 100</code> we just need to say <code>x = 20, y = 20</code>.</p>

<p>Now that we know that our parent coordinate system effects our child coordinate systems lets prove our final theory that we can have one master parent to control zoom/drag.</p>

<p>Lets start with a base renderer</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//Assuming React, and react-art are included
</span><span class='line'>var ZoomDragCircle = React.createClass({
</span><span class='line'>    
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;Surface
</span><span class='line'>                width={viewportWidth}
</span><span class='line'>                height={viewportHeight}
</span><span class='line'>            &gt;
</span><span class='line'>            &lt;/Surface&gt; 
</span><span class='line'>        );
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>})
</span></code></pre></td></tr></table></div></figure>


<p>We have a surface so the next lets get something rendering</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ZoomDragCircle = React.createClass({
</span><span class='line'>    
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;Surface
</span><span class='line'>                width={viewportWidth}
</span><span class='line'>                height={viewportHeight}
</span><span class='line'>            &gt;
</span><span class='line'>                &lt;Circle x={10} y={10} radius={5} fill="#000" /&gt;
</span><span class='line'>            &lt;/Surface&gt; 
</span><span class='line'>        );
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>})
</span></code></pre></td></tr></table></div></figure>


<p>Lets add in our drag concept.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ZoomDragCircle = React.createClass({
</span><span class='line'>    getInitialState: function() {
</span><span class='line'>        return {
</span><span class='line'>            x: 0,
</span><span class='line'>            y: 0
</span><span class='line'>        }
</span><span class='line'>    },
</span><span class='line'>    handleMouseDown: function() {
</span><span class='line'>        this.dragging = true;
</span><span class='line'>    },
</span><span class='line'>    handleMouseUp: function() {
</span><span class='line'>        this.dragging = false;
</span><span class='line'>    },
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;div 
</span><span class='line'>                    onMouseDown={this.handleMouseDown}
</span><span class='line'>                    onMouseUp={this.handleMouseUp}
</span><span class='line'>            &gt;
</span><span class='line'>                &lt;Surface
</span><span class='line'>                    width={viewportWidth}
</span><span class='line'>                    height={viewportHeight}
</span><span class='line'>
</span><span class='line'>                &gt;
</span><span class='line'>                    &lt;Group x={this.state.x} y={this.state.y}&gt;
</span><span class='line'>                        &lt;Circle x={10} y={10} radius={5} fill="#000" /&gt;
</span><span class='line'>                    &lt;/Group&gt;
</span><span class='line'>                &lt;/Surface&gt; 
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        );
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>})
</span></code></pre></td></tr></table></div></figure>


<p>One thing you&rsquo;ll notice here is the wrapping div. The <code>react-art</code> <code>Surface</code> element doesn&rsquo;t have the <code>EventMixin</code> so it will not register mouse events. We could wrap our <code>Group</code> with another <code>Group</code> for dragging/zoom however an outer <code>div</code> is much easier for now.</p>

<p>You also may notice that we have a slight issue. <code>onMouseUp</code> should be globally on the <code>document</code> since the <code>mouseup</code> event will only be fired if the <code>mouseup</code> happens on our wrapping div. For simplicity sake we&rsquo;ll keep it on the div.</p>

<p>So we have a way to toggle whether we are dragging or not, and have the ability to adjust the <code>x,y</code> coords of a parent group. Lets actually implement drag.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ZoomDragCircle = React.createClass({
</span><span class='line'>    getInitialState: function() {
</span><span class='line'>        return {
</span><span class='line'>            x: 0,
</span><span class='line'>            y: 0
</span><span class='line'>        }
</span><span class='line'>    },
</span><span class='line'>    componentDidMount: function() {
</span><span class='line'>        document.addEventListener('mousemove', this.handleMouseMove, false);
</span><span class='line'>    },
</span><span class='line'>    componentWillUnmount: function() {
</span><span class='line'>        //Don't forget to unlisten!
</span><span class='line'>        document.removeEventListener('mousemove', this.handleMouseMove, false);
</span><span class='line'>    },
</span><span class='line'>    handleMouseDown: function(e) {
</span><span class='line'>        this.dragging = true;
</span><span class='line'>        //Set coords
</span><span class='line'>          this.coords = {
</span><span class='line'>            x: e.pageX,
</span><span class='line'>            y: e.pageY
</span><span class='line'>          }
</span><span class='line'>    },
</span><span class='line'>    handleMouseUp: function() {
</span><span class='line'>        this.dragging = false;
</span><span class='line'>        this.coords = {};
</span><span class='line'>    },
</span><span class='line'>    handleMouseMove: function(e) {
</span><span class='line'>    //If we are dragging
</span><span class='line'>      if (this.dragging) {
</span><span class='line'>          e.preventDefault();
</span><span class='line'>
</span><span class='line'>        //Get mouse change differential
</span><span class='line'>        var xDiff = this.coords.x - e.pageX,
</span><span class='line'>            yDiff = this.coords.y - e.pageY;
</span><span class='line'>
</span><span class='line'>        //Update to our new coordinates
</span><span class='line'>            this.coords.x = e.pageX;
</span><span class='line'>            this.coords.y = e.pageY;
</span><span class='line'>        //Adjust our x,y based upon the x/y diff from before
</span><span class='line'>        var x = this.state.x - xDiff,       
</span><span class='line'>            y = this.state.y - yDiff;
</span><span class='line'>
</span><span class='line'>        //Re-render
</span><span class='line'>        this.setState(this.state);  
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>    },
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;div 
</span><span class='line'>                    onMouseDown={this.handleMouseDown}
</span><span class='line'>                    onMouseUp={this.handleMouseUp}
</span><span class='line'>            &gt;
</span><span class='line'>                &lt;Surface
</span><span class='line'>                    width={viewportWidth}
</span><span class='line'>                    height={viewportHeight}
</span><span class='line'>
</span><span class='line'>                &gt;
</span><span class='line'>                    &lt;Group x={this.state.x} y={this.state.y}&gt;
</span><span class='line'>                        &lt;Circle x={10} y={10} radius={5} fill="#000" /&gt;
</span><span class='line'>                    &lt;/Group&gt;
</span><span class='line'>                &lt;/Surface&gt; 
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        );
</span><span class='line'>    }
</span><span class='line'>})
</span></code></pre></td></tr></table></div></figure>


<p>Now if you spin this up you&rsquo;ll see we can drag around the canvas and our <code>Circle</code> will stay the same place.
Lets do zoom now.</p>

<p>To understand what we&rsquo;re about to do the Art library will translate our <code>x,y</code> coords to a <code>matrix</code> that is set on the <code>transform</code> attribute of the svg <code>g</code> element or in the canvas case translated to the appropriate coordinates.</p>

<p>The <code>matrix</code> system can be read about here on <a href="https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix">MDN</a>. Ultimately it allows us to modify the coordinate system (<code>x,y</code>) and additionally the scale.</p>

<p>Think of scale as a default multiplier times the size of stuff.</p>

<p>So a scale of <code>1</code> means if something is a width of <code>10</code> then it would still be 10.
But If we set our scale to <code>2</code> and the same width of <code>10</code> then <code>10*2 = 20</code>. The item would appear larger at 20 pixels.</p>

<p>This is the rough idea behind scale, however we aren&rsquo;t adjusting widths the scale is actually effecting the <code>x,y</code> coordinates you are setting. You can define <code>scaleX</code> and <code>scaleY</code> to be different numbers causing your visual elements to appear blurred/skewed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ZoomDragCircle = React.createClass({
</span><span class='line'>    getInitialState: function() {
</span><span class='line'>        return {
</span><span class='line'>            x: 0,
</span><span class='line'>            y: 0,
</span><span class='line'>            scale: 1
</span><span class='line'>        }
</span><span class='line'>    },
</span><span class='line'>    componentDidMount: function() {
</span><span class='line'>        document.addEventListener('mousemove', this.handleMouseMove, false);
</span><span class='line'>    },
</span><span class='line'>    componentWillUnmount: function() {
</span><span class='line'>        //Don't forget to unlisten!
</span><span class='line'>        document.removeEventListener('mousemove', this.handleMouseMove, false);
</span><span class='line'>    },
</span><span class='line'>    handleMouseDown: function(e) {
</span><span class='line'>        this.dragging = true;
</span><span class='line'>        //Set coords
</span><span class='line'>          this.coords = {
</span><span class='line'>            x: e.pageX,
</span><span class='line'>            y: e.pageY
</span><span class='line'>          }
</span><span class='line'>    },
</span><span class='line'>    handleMouseUp: function() {
</span><span class='line'>        this.dragging = false;
</span><span class='line'>        this.coords = {};
</span><span class='line'>    },
</span><span class='line'>    handleMouseMove: function(e) {
</span><span class='line'>    //If we are dragging
</span><span class='line'>      if (!this.dragging) {
</span><span class='line'>        return;
</span><span class='line'>      }
</span><span class='line'>          e.preventDefault();
</span><span class='line'>
</span><span class='line'>        //Get mouse change differential
</span><span class='line'>        var xDiff = this.coords.x - e.pageX,
</span><span class='line'>            yDiff = this.coords.y - e.pageY;
</span><span class='line'>
</span><span class='line'>        //Update to our new coordinates
</span><span class='line'>            this.coords.x = e.pageX;
</span><span class='line'>            this.coords.y = e.pageY;
</span><span class='line'>        //Adjust our x,y based upon the x/y diff from before
</span><span class='line'>        var x = this.state.x - xDiff,       
</span><span class='line'>            y = this.state.y - yDiff;
</span><span class='line'>
</span><span class='line'>        //Re-render
</span><span class='line'>        this.setState(this.state);  
</span><span class='line'>
</span><span class='line'>    },
</span><span class='line'>    //So we can handle the mousewheel returning -0 or 0
</span><span class='line'>    isNegative: function (n) {
</span><span class='line'>      return ((n = +n) || 1 / n) &lt; 0;
</span><span class='line'>    },
</span><span class='line'>    handleMouseWheel: function(e) {
</span><span class='line'>      var ZOOM_STEP = .03;
</span><span class='line'>
</span><span class='line'>        //require the shift key to be pressed to scroll
</span><span class='line'>        if (!e.shiftKey) {
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>      e.preventDefault();
</span><span class='line'>      var direction = (this.isNegative(e.deltaX) &&  this.isNegative(e.deltaY) ) ? 'down' : 'up';
</span><span class='line'>
</span><span class='line'>      if (direction == 'up') {
</span><span class='line'>        this.state.scale += ZOOM_STEP;
</span><span class='line'>      } else {
</span><span class='line'>        this.state.scale -= ZOOM_STEP;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      this.state.scale = this.state.scale &lt; 0 ? 0 : this.state.scale;
</span><span class='line'>
</span><span class='line'>      this.setState(this.state);
</span><span class='line'>    },
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;div 
</span><span class='line'>                onMouseDown={this.handleMouseDown}
</span><span class='line'>                onMouseUp={this.handleMouseUp}
</span><span class='line'>                onWheel={this.handleMouseWheel}
</span><span class='line'>            &gt;
</span><span class='line'>                &lt;Surface
</span><span class='line'>                    width={viewportWidth}
</span><span class='line'>                    height={viewportHeight}
</span><span class='line'>
</span><span class='line'>                &gt;
</span><span class='line'>                    &lt;Group 
</span><span class='line'>                        x={this.state.x} 
</span><span class='line'>                        y={this.state.y}
</span><span class='line'>                        scaleX={this.state.scale}
</span><span class='line'>                        scaleY={this.state.scale}
</span><span class='line'>                    &gt;
</span><span class='line'>                        &lt;Circle x={10} y={10} radius={5} fill="#000" /&gt;
</span><span class='line'>                    &lt;/Group&gt;
</span><span class='line'>                &lt;/Surface&gt; 
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        );
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>})
</span></code></pre></td></tr></table></div></figure>


<p>Full working demo, hold shift and use your mouse wheel/track pad to zoom or just grab and drag around.</p>

<p data-height="624" data-theme-id="0" data-slug-hash="jPMMao" data-default-tab="result" data-user="browniefed" class='codepen'>See the Pen <a href='http://codepen.io/browniefed/pen/jPMMao/'>jPMMao</a> by Jason Brown (<a href='http://codepen.io/browniefed'>@browniefed</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://browniefed.com//assets.codepen.io/assets/embed/ei.js"></script>


<p>Now we should be able to zoom in/zoom out while holding shift key + using your scroll wheel.
If you want a predictable scale you can add some <code>+</code> and <code>-</code> buttons somwhere and just increment <code>this.state.scale</code></p>

<p>I&rsquo;m hoping to do more write ups and examples with react-art. The great thing is that you can render react-art with react-native. With appropriate abstractions you could possibly have the same visualizations on the web as you do on native.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native and Socket.io]]></title>
		
		<link href="http://browniefed.com/blog/2015/05/16/react-native-and-socket-dot-io/"/>
		<updated>2015-05-16T19:35:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/05/16/react-native-and-socket-dot-io</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>React Native finally supports Websockets. Which is awesome, however there is one gotcha with socket.io.</p>

<p>1) <code>npm install socket.io-client</code>. This will just pull down the socket.io javascript client</p>

<p>2) Everything works great but there is one issue that <code>window.navigator.userAgent</code> doesn&rsquo;t exist. Socket.IO checks to deal with some browser incosistencies but we don&rsquo;t care. So all we have to do is create it. However make sure you require <code>react-native</code> first!</p>

<p>Just like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>
</span><span class='line'>window.navigator.userAgent = "react-native";
</span><span class='line'>
</span><span class='line'>var io = require('socket.io-client/socket.io');</span></code></pre></td></tr></table></div></figure>


<p>Now you can do as you please with your new glorious websockets.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Getting react-art running on react-native]]></title>
		
		<link href="http://browniefed.com/blog/2015/05/03/getting-react-art-running-on-react-native/"/>
		<updated>2015-05-03T20:33:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/05/03/getting-react-art-running-on-react-native</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>I hadn&rsquo;t realized that the react-art native rendering stuff had landed in into the react-native core.
So I figured I&rsquo;d try and get in running. I am an XCode noob so I&rsquo;ll be sure and be descriptive.</p>

<p>First off lets set up a react-native project. (Assuming you have react-native cli installed);</p>

<p><code>react-native init react_art_demo</code></p>

<p>The current released version of <code>react-native</code> doesn&rsquo;t have the ART libs in it so in our <code>node_modules</code> folder we can delete the <code>react-native</code> in there and do a git clone of master <code>git clone https://github.com/facebook/react-native.git</code></p>

<p>We will also need the <code>art</code> lib itself installed. So <code>cd</code> to the root of <code>react_art_demo</code>.
Then run <code>npm install art</code></p>

<p>Once we have the master repo of <code>react-native</code>, and <code>art</code> installed we can open up our <code>react_art_demo</code> project in XCode.</p>

<p>We will need to do 2 things.</p>

<ul>
<li>Add the <code>ART.xcodeproj</code> to XCode</li>
<li>Link the binary</li>
</ul>


<!-- more -->


<p>To add ART.xcodeproj find the file located in <code>react-native/Libraries/ART/ART.xcodeproj</code> and just drag it over to the <code>Libraries</code> section in XCode.
That should look like so</p>

<p><img src="http://i.imgur.com/TWeDUTa.png" title="Add ART.xcodeproj to Libraries" ></p>

<p>Next we&rsquo;ll link the binary.</p>

<p>With the root <code>react_art_demo</code> project selected on the left, select <code>Build Phases</code> from the center view.
There will be a section called &ldquo;Link Binary With Libraries&rdquo;, expand it, press the + and select <code>libART.a</code></p>

<p>Like so</p>

<p><img src="http://i.imgur.com/lIMZkfh.png" title="Link binary" ></p>

<p>Just as a warning, I didn&rsquo;t link the binary and got a few &ldquo;No manager class found for view with module name&rdquo; errors.</p>

<p>Now go forth and write your <code>react-art</code>. I always like to get the <code>vector-widget</code> example running so to do that here is the code.</p>

<p><code>index.ios.js</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Sample React Native App
</span><span class='line'> * https://github.com/facebook/react-native
</span><span class='line'> */
</span><span class='line'>'use strict';
</span><span class='line'>
</span><span class='line'>var React = require('react-native');
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Text,
</span><span class='line'>  View,
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var VectorWidget = require('./VectorWidget');
</span><span class='line'>
</span><span class='line'>var react_art_demo = React.createClass({
</span><span class='line'>
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;VectorWidget style={styles.vector}/&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    alignItems: 'center',
</span><span class='line'>    backgroundColor: '#FFF',
</span><span class='line'>  },
</span><span class='line'>  vector: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 100
</span><span class='line'>  },
</span><span class='line'>  welcome: {
</span><span class='line'>    fontSize: 20,
</span><span class='line'>    textAlign: 'center',
</span><span class='line'>    margin: 10,
</span><span class='line'>  },
</span><span class='line'>  instructions: {
</span><span class='line'>    color: '#333333',
</span><span class='line'>    marginBottom: 5,
</span><span class='line'>    marginTop: 100
</span><span class='line'>  },
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>AppRegistry.registerComponent('react_art_demo', () =&gt; react_art_demo);</span></code></pre></td></tr></table></div></figure>


<p>And your <code>VectorWidget.js</code> file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Copyright 2013 Facebook, Inc.
</span><span class='line'> * All rights reserved.
</span><span class='line'> *
</span><span class='line'> * This source code is licensed under the BSD-style license found in the
</span><span class='line'> * LICENSE file in the root directory of this source tree. An additional grant
</span><span class='line'> * of patent rights can be found in the PATENTS file in the same directory.
</span><span class='line'> */
</span><span class='line'>"use strict";
</span><span class='line'>
</span><span class='line'>var React = require('react-native');
</span><span class='line'>var ReactART = require('ReactNativeART');
</span><span class='line'>var {
</span><span class='line'>    Art,
</span><span class='line'>    TouchableWithoutFeedback
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>    Group,
</span><span class='line'>    Shape,
</span><span class='line'>    Surface,
</span><span class='line'>    Transform
</span><span class='line'>} = ReactArt;
</span><span class='line'>
</span><span class='line'>var MOUSE_UP_DRAG = 0.978;
</span><span class='line'>var MOUSE_DOWN_DRAG = 0.9;
</span><span class='line'>var MAX_VEL = 11;
</span><span class='line'>var CLICK_ACCEL = 3;
</span><span class='line'>var BASE_VEL = 0.15;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * An animated SVG component.
</span><span class='line'> */
</span><span class='line'>var VectorWidget = React.createClass({
</span><span class='line'>  /**
</span><span class='line'>   * Initialize state members.
</span><span class='line'>   */
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {degrees: 0, velocity: 0, drag: MOUSE_UP_DRAG};
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * When the component is mounted into the document - this is similar to a
</span><span class='line'>   * constructor, but invoked when the instance is actually mounted into the
</span><span class='line'>   * document. Here's, we'll just set up an animation loop that invokes our
</span><span class='line'>   * method. Binding of `this.onTick` is not needed because all React methods
</span><span class='line'>   * are automatically bound before being mounted.
</span><span class='line'>   */
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>    this._interval = window.setInterval(this.onTick, 20);
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  componentWillUnmount: function() {
</span><span class='line'>    window.clearInterval(this._interval);
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  onTick: function() {
</span><span class='line'>    var nextDegrees = this.state.degrees + BASE_VEL + this.state.velocity;
</span><span class='line'>    var nextVelocity = this.state.velocity * this.state.drag;
</span><span class='line'>    this.setState({degrees: nextDegrees, velocity: nextVelocity});
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * This is the "main" method for any component. The React API allows you to
</span><span class='line'>   * describe the structure of your UI component at *any* point in time.
</span><span class='line'>   */
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;Surface
</span><span class='line'>        width={700}
</span><span class='line'>        height={700}
</span><span class='line'>        {this.renderGraphic(this.state.degrees)}
</span><span class='line'>      &lt;/Surface&gt;
</span><span class='line'>    );
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * Better SVG support for React coming soon.
</span><span class='line'>   */
</span><span class='line'>  renderGraphic: function(rotation) {
</span><span class='line'>
</span><span class='line'>    return (
</span><span class='line'>      &lt;Group
</span><span class='line'>      &gt;
</span><span class='line'>        &lt;Group x={210} y={135}&gt;
</span><span class='line'>          &lt;Shape fill="rgba(0,0,0,0.1)" d={BORDER_PATH} /&gt;
</span><span class='line'>          &lt;Shape fill="#7BC7BA" d={BG_PATH} /&gt;
</span><span class='line'>          &lt;Shape fill="#DCDCDC" d={BAR_PATH} /&gt;
</span><span class='line'>          &lt;Shape fill="#D97B76" d={RED_DOT_PATH} /&gt;
</span><span class='line'>          &lt;Shape fill="#DBBB79" d={YELLOW_DOT_PATH} /&gt;
</span><span class='line'>          &lt;Shape fill="#A6BD8A" d={GREEN_DOT_PATH} /&gt;
</span><span class='line'>          &lt;Group x={55} y={29}&gt;
</span><span class='line'>            &lt;Group rotation={rotation} originX={84} originY={89}&gt;
</span><span class='line'>              &lt;Shape fill="#FFFFFF" d={CENTER_DOT_PATH} /&gt;
</span><span class='line'>              &lt;Group&gt;
</span><span class='line'>                &lt;Shape d={RING_ONE_PATH} stroke="#FFFFFF" strokeWidth={8} /&gt;
</span><span class='line'>                &lt;Shape d={RING_TWO_PATH} transform={RING_TWO_ROTATE} stroke="#FFFFFF" strokeWidth={8} /&gt;
</span><span class='line'>                &lt;Shape d={RING_THREE_PATH} transform={RING_THREE_ROTATE} stroke="#FFFFFF" strokeWidth={8} /&gt;
</span><span class='line'>              &lt;/Group&gt;
</span><span class='line'>            &lt;/Group&gt;
</span><span class='line'>          &lt;/Group&gt;
</span><span class='line'>        &lt;/Group&gt;
</span><span class='line'>      &lt;/Group&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var BORDER_PATH = "M3.00191459,4 C1.34400294,4 0,5.34785514 0,7.00550479 L0,220.994495 C0,222.65439 1.34239483,224 3.00191459,224 L276.998085,224 C278.655997,224 280,222.652145 280,220.994495 L280,7.00550479 C280,5.34561033 278.657605,4 276.998085,4 L3.00191459,4 Z M3.00191459,4";
</span><span class='line'>var BG_PATH = "M3.00191459,1 C1.34400294,1 0,2.34785514 0,4.00550479 L0,217.994495 C0,219.65439 1.34239483,221 3.00191459,221 L276.998085,221 C278.655997,221 280,219.652145 280,217.994495 L280,4.00550479 C280,2.34561033 278.657605,1 276.998085,1 L3.00191459,1 Z M3.00191459,1";
</span><span class='line'>var BAR_PATH = "M3.00191459,0 C1.34400294,0 0,1.34559019 0,3.00878799 L0,21 C0,21 0,21 0,21 L280,21 C280,21 280,21 280,21 L280,3.00878799 C280,1.34708027 278.657605,0 276.998085,0 L3.00191459,0 Z M3.00191459,0";
</span><span class='line'>var RED_DOT_PATH = "M12.5,17 C16.0898511,17 19,14.0898511 19,10.5 C19,6.91014895 16.0898511,4 12.5,4 C8.91014895,4 6,6.91014895 6,10.5 C6,14.0898511 8.91014895,17 12.5,17 Z M12.5,17";
</span><span class='line'>var YELLOW_DOT_PATH = "M31.5,17 C35.0898511,17 38,14.0898511 38,10.5 C38,6.91014895 35.0898511,4 31.5,4 C27.9101489,4 25,6.91014895 25,10.5 C25,14.0898511 27.9101489,17 31.5,17 Z M31.5,17";
</span><span class='line'>var GREEN_DOT_PATH = "M50.5,17 C54.0898511,17 57,14.0898511 57,10.5 C57,6.91014895 54.0898511,4 50.5,4 C46.9101489,4 44,6.91014895 44,10.5 C44,14.0898511 46.9101489,17 50.5,17 Z M50.5,17";
</span><span class='line'>var CENTER_DOT_PATH = "M84,105 C92.8365564,105 100,97.8365564 100,89 C100,80.1634436 92.8365564,73 84,73 C75.1634436,73 68,80.1634436 68,89 C68,97.8365564 75.1634436,105 84,105 Z M84,105";
</span><span class='line'>var RING_ONE_PATH = "M84,121 C130.391921,121 168,106.673113 168,89 C168,71.3268871 130.391921,57 84,57 C37.6080787,57 0,71.3268871 0,89 C0,106.673113 37.6080787,121 84,121 Z M84,121";
</span><span class='line'>var RING_TWO_PATH = "M84,121 C130.391921,121 168,106.673113 168,89 C168,71.3268871 130.391921,57 84,57 C37.6080787,57 0,71.3268871 0,89 C0,106.673113 37.6080787,121 84,121 Z M84,121";
</span><span class='line'>var RING_THREE_PATH = "M84,121 C130.391921,121 168,106.673113 168,89 C168,71.3268871 130.391921,57 84,57 C37.6080787,57 0,71.3268871 0,89 C0,106.673113 37.6080787,121 84,121 Z M84,121";
</span><span class='line'>var RING_TWO_ROTATE = new Transform().translate(84.000000, 89.000000).rotate(-240.000000).translate(-84.000000, -89.000000);
</span><span class='line'>var RING_THREE_ROTATE = new Transform().translate(84.000000, 89.000000).rotate(-300.000000).translate(-84.000000, -89.000000);
</span><span class='line'>
</span><span class='line'>module.exports = VectorWidget;</span></code></pre></td></tr></table></div></figure>


<p>You may notice that I removed the <code>mouseDown/mouseUp</code> stuff.
I tried getting it work very briefly with <code>onPress</code> and <code>TouchableWithoutFeedback</code> but I couldn&rsquo;t get it working.
If you get it figured out let me know.</p>

<h2>Conclusion</h2>

<p>That&rsquo;s it, you can now render your react-art code natively. Enjoy</p>

<p><img src="http://i.imgur.com/AXbsaTB.png" title="Final result" ></p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React, Higher Order Components, and Legacy Applications]]></title>
		
		<link href="http://browniefed.com/blog/2015/05/02/react/"/>
		<updated>2015-05-02T12:08:00-07:00</updated>
		<id>http://browniefed.com/blog/2015/05/02/react</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>At work we embarked on an ambitious task of converting our legacy application (ExtJS 3.4) over to React.
Now obviously rewriting an application that has been built over the course of 7 years could not just be simply re-written. We had to be very strategic about it.</p>

<p>React is one of the perfect rendering libraries for this since re-rendering the same component at the same spot will just cause the React to go through its diff/normal rendering process.</p>

<p>However if you don&rsquo;t maintain separation of concerns you may just get a lot of Ext into your ReactJS components, and you&rsquo;ll be in an even bigger mess. We don&rsquo;t want that, and that is where higher order components come into play.</p>

<h3>Higher Order Components</h3>

<p>If you haven&rsquo;t read the post <a href="https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750">Mixins Are Dead. Long Live Composition</a> then I highly recommend you do so. Higher order components are not a bullet proof replacement for mixins but they are an amazing solution for integrating at the seams of where your legacy application meets your new React world.</p>

<p>If you don&rsquo;t understand what a Higher order component is after reading the article above let me quickly explain.
It&rsquo;s a function that takes a React component of your choosing and then returns a wrapped React component that renders the React component that you provided it.</p>

<p>A Quick example</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var NameSupplier = function(Component) {
</span><span class='line'>    
</span><span class='line'>    var NameSupplierComponent = React.createClass({
</span><span class='line'>
</span><span class='line'>        getUserName: function() {
</span><span class='line'>            //Somewhere the username is stored but we'll just return a string
</span><span class='line'>            return "Jason"
</span><span class='line'>        },
</span><span class='line'>        render: function() {
</span><span class='line'>
</span><span class='line'>            return (
</span><span class='line'>                &lt;Component username={this.getUserName()} /&gt;
</span><span class='line'>            )
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    return NameSupplierComponent;
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>This component is slightly contrived and doesn&rsquo;t show this will help us integrate with a legacy app. All this component is doing is passing down a prop to a component you gave it.
So how would we go about using this higher order component?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var UserPost = React.createClass({
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;div&gt;
</span><span class='line'>                {this.props.username} created this.
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>        )
</span><span class='line'>    }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var ActiveUserPost = NameSupplier(UserPost);
</span><span class='line'>
</span><span class='line'>module.exports = ActiveUserPost;
</span></code></pre></td></tr></table></div></figure>


<p>Then later</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ActiveUserPost = require('ActiveUserPost');
</span><span class='line'>
</span><span class='line'>React.render(&lt;ActiveUserPost /&gt;, el);</span></code></pre></td></tr></table></div></figure>


<h3>Using them with legacy applications</h3>

<p>This strategy really shines when all you need to do is hook into the life cycle events to cause updates in your legacy application.</p>

<p>In our application we are still utilizing ExtJS tabs. When you visit an item say we render an <code>ItemView</code> and say the user starts editing the item. We want to indicate in the title of the Ext tab that it is a dirty form and that is done by marking it with an *. The issue is that as we deprecate Ext we don&rsquo;t want to mix our Ext updating logic with our new <code>ItemView</code> logic.</p>

<p>This requires that state be at an upper level, which the article above by Dan shows how to use higher order components to fetch data, and essentially bring state up one level.</p>

<p>The structure of our application will look like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ExtTab&gt; // Passes down a function called appendTitle
</span><span class='line'>    &lt;ItemViewState&gt; &lt;--- Could and should also be a higher order component taht wraps ExtEditableItemView but for visual sake it's a composition component
</span><span class='line'>        &lt;ExtEditableItemView /&gt; &lt;--- This is an ItemView wrapped by an ExtEditable higher order component
</span><span class='line'>    &lt;/ItemViewState&gt;
</span><span class='line'>&lt;/ExtTab&gt;
</span></code></pre></td></tr></table></div></figure>


<p>With state moved up a level into the <code>ItemViewState</code> component any time data changes our <code>ExtEditableItemView</code> will go re-render and go through it&rsquo;s life cycle methods.</p>

<p>The requirement here is that the <code>ExtTab</code> in our old world passes down a function as a prop which our higher order component will call.</p>

<p>In the end our code looks like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ExtEditableTitle = function(Component) {
</span><span class='line'>    propTypes: {
</span><span class='line'>        appendTitle: React.PropTypes.func
</span><span class='line'>    },
</span><span class='line'>    getDefaultProps: function() {
</span><span class='line'>        return {
</span><span class='line'>            appendTitle: function() {} //Noop function
</span><span class='line'>        }
</span><span class='line'>    },   
</span><span class='line'>    componentDidMount: function() {
</span><span class='line'>        this.handleTitleUpdate();
</span><span class='line'>    },
</span><span class='line'>    componentDidUpdate: function() {
</span><span class='line'>        this.handleTitleUpdate();
</span><span class='line'>    },
</span><span class='line'>    handleTitleUpdate: function() {
</span><span class='line'>        var appendToTitle = (this.props.editing && '*' || ''); // If we're editing then append a * to the title
</span><span class='line'>        this.props.appendTitle(appendToTitle);
</span><span class='line'>    },
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;Component
</span><span class='line'>                {...this.props}
</span><span class='line'>                {//Additionally we should omit the appendTitle function from being passed down to our ItemView}
</span><span class='line'>            /&gt;
</span><span class='line'>        )
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ExtEditableItemView = ExtEditableTitle(ItemView);
</span><span class='line'>module.exports = ExtEditableItemView;</span></code></pre></td></tr></table></div></figure>


<p>So now we have moved our state up a level to <code>ItemViewState</code>, we used a higher order component to make a seam that hooks into the life cycle events of our <code>ItemView</code> component which tells our old world what to do with it&rsquo;s title.</p>

<p>When it comes time to remove Ext tabs, or possibly replace it with adding a * to the browser title we can write a new higher order component that hooks into the same life cycle methods and our <code>ItemView</code> is none the wiser.</p>

<h3>Conclusion</h3>

<p>Higher order components may not solve all of your problems but so far they have helped me in a few different scenarios that would have caused me to mix concerns with our React/ExtJS world. They provide a nice upgrade path for future modifications, and maintain our ability to compose components with ease.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Webpack and Compass]]></title>
		
		<link href="http://browniefed.com/blog/2014/12/24/webpack-and-compass/"/>
		<updated>2014-12-24T10:46:00-08:00</updated>
		<id>http://browniefed.com/blog/2014/12/24/webpack-and-compass</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Webpack is the greatest and latest in build systems. Every time I encounter an issue or wish Webpack did something a little googling solves the problem.</p>

<p>One problem that I couldn&rsquo;t google and figure out was getting compass to work with <code>sass-loader</code>. Not just making it work but still allowing regular compass to compile on the command line.</p>

<p>Thankfully there is a mostly simple solution. The only thing (to my knowledge) that this won&rsquo;t work with is sprite generation. Sounds like we need another loader.</p>

<p>Lets get to it.</p>

<p>This is all assuming you have webpack installed with a basic config.
If that isn&rsquo;t the case we&rsquo;ll need <code>webpack</code>, <code>raw-loader</code>, <code>style-loader</code>, and <code>sass-loader</code> npm installed.</p>

<p>Your webpack config may look something along the lines of</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    module: {
</span><span class='line'>        loaders: [
</span><span class='line'>            { 
</span><span class='line'>                test: /\.scss$/, 
</span><span class='line'>                loader: "style-loader!raw-loader!sass-loader"
</span><span class='line'>            }
</span><span class='line'>        ]
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>This is where you&rsquo;re running into your issue where <code>node-sass</code> can&rsquo;t find the compass import.</p>

<p>Thanks to igosuki, compass mixins has been ported to just a bunch of sass-mixins outside of the ruby gem. <a href="https://github.com/Igosuki/compass-mixins">https://github.com/Igosuki/compass-mixins</a></p>

<p>So now do a</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install compass-mixins --save
</span></code></pre></td></tr></table></div></figure>


<p>Now we just need to modify our loader config.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    module: {
</span><span class='line'>        loaders: [
</span><span class='line'>            { 
</span><span class='line'>                test: /\.scss$/, 
</span><span class='line'>                loader: "style-loader!raw-loader!sass-loader?includePaths[]=" + path.resolve(__dirname, "./node_modules/compass-mixins/lib")
</span><span class='line'>            }
</span><span class='line'>        ]
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>node-sass</code> should be all setup to to look in our <code>compass-mixins/lib</code> to resolve compass mixins.
If you are running your build script from a different location you&rsquo;ll have to adjust the <code>path.resolve</code> to resolve to wherever your <code>node_modules</code> is at.</p>

<p>Alternatively you can place this outside of <code>node_modules</code> or add additional <code>include_paths</code> for wherever your SASS mixins live.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    module: {
</span><span class='line'>        loaders: [
</span><span class='line'>            { 
</span><span class='line'>                test: /\.scss$/, 
</span><span class='line'>                loader: "style-loader!raw-loader!sass-loader?includePaths[]=" + path.resolve(__dirname, "./node_modules/compass-mixins/lib") + "&includePaths[]=" + path.resolve(__dirname, "./mixins/app_mixins")
</span><span class='line'>            }
</span><span class='line'>        ]
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[PhantomJS Creating &amp; Connecting to Server]]></title>
		
		<link href="http://browniefed.com/blog/2014/06/15/phantomjs-creating-and-connecting-to-server/"/>
		<updated>2014-06-15T16:37:00-07:00</updated>
		<id>http://browniefed.com/blog/2014/06/15/phantomjs-creating-and-connecting-to-server</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>At my work we are a Java shop. So spinning up a server is quite a process. Additionally our static front end files are spread out across the system and we use RequireJS (ugh) to wrangle everything. Then in order to test we were running a selenium test to hit the test_runner page and wait for mocha to run and the tests. This is so unbelievably slow and quite hectic when it comes to managing relative paths of our config.</p>

<p>So to make things simpler I decided it&rsquo;d be in my best interest to use PhatonmJS. I decided to spin up a server using <code>var server = require('webserver').create();</code> and manage the requests and just route and serve up all the correct files. I thought this would work however I ran into a snag. Here is some sample code below</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var server = require('webserver').create();
</span><span class='line'>var url = 'localhost:8000'
</span><span class='line'>server.listen(url, function(){ 
</span><span class='line'>  console.log('someone connected');
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>page.open(url, function(status) {
</span><span class='line'>  console.log(status);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Well I thought this would work based upon the docs but I was wrong. <code>status</code> would be success but the log on the server would never trigger. So I started mixing it up, here are a few things I tried.</p>

<p><code>var url = '127.0.0.1:8000'</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>server.listen(8000);
</span><span class='line'>
</span><span class='line'>page.open('127.0.0.1:8000');
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>server.listen(8000, {keepAlive: true});
</span></code></pre></td></tr></table></div></figure>


<p>After spending an hour debugging and attempting to not flip a table I figured it out. Apparently the solution was to add <code>http</code>. Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>server.listen(8000, {keepAlive: true}, function() {
</span><span class='line'>  console.log('sucess');  
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>page.open('http://127.0.0.1:8000');
</span></code></pre></td></tr></table></div></figure>


<p>So I got it working, I was sending the files down but on larger files I was continually getting PhantomJS throwing <code>Parser errors</code>. I was setting proper content types and with <code>keep alive</code> connections you have to send the content lengths. The solution? Get rid of <code>keepAlive:true</code>. I was under the assumption it was necessary, it was also in my code when I actually got a successful connection so I assumed it was necessary. In the end it was very simple and probably a result of some minor idiocy on my part and slight lack of documentation.</p>

<p>If you ever need to have your unit test server up CSS/JS/HTML, even mock Rest API end points, server up mocked data (there are better ways to do this) then here is your PhantomJS solution.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var PORT = 8000,
</span><span class='line'>  url = 'http://127.0.0.1:' + PORT,
</span><span class='line'>  server = require('webserver').create(),
</span><span class='line'>  page = require('webpage').create(),
</span><span class='line'>  fs = require('fs'),
</span><span class='line'>  system = require('system'); // This was used to take in args to change what PORT to connect to but not necessary for most people
</span><span class='line'>
</span><span class='line'>var contentTypes = {
</span><span class='line'>  
</span><span class='line'>  'css': 'text/css',
</span><span class='line'>  'html': 'text/html',
</span><span class='line'>  'js': 'application/javascript',
</span><span class='line'>  'png': 'image/png',
</span><span class='line'>  'gif': 'image/gif',
</span><span class='line'>  'jpg': 'image/jpeg',
</span><span class='line'>  'jpeg': 'image/jpeg'
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>  server.listen(PORT, function(req, res) {
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      var filePath = fs.workingDirectory + fs.separator + req.url.split('/').join(fs.separator), // make it OS agnostic
</span><span class='line'>          fileName = req.url.split('/').shift().split('?')[0], //remove any query string
</span><span class='line'>          ext = fileName.split('.').shift(),
</span><span class='line'>          fileContent = '';
</span><span class='line'>
</span><span class='line'>      res.statusCode = 200;
</span><span class='line'>        res.headers = {
</span><span class='line'>          "Cache": "no-cache", 
</span><span class='line'>          "Content-Type": contentTypes[ext] || 'text/html' //no content type?
</span><span class='line'>        };
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      if (fs.isReadable(filePath)) {
</span><span class='line'>          fileContent = fs.readFile(filePath);
</span><span class='line'>      } else {
</span><span class='line'>          res.statusCode = 404;
</span><span class='line'>          //maybe 501? Your error codes may vary
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      res.write(fileContent);
</span><span class='line'>      res.close();
</span><span class='line'>      
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  page.open(url, function(status) {
</span><span class='line'>
</span><span class='line'>      if (status !== 'success') {
</span><span class='line'>          phantom.exit(1);
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  })
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>This is very basic and assumes your running in the root of your files you need to server. In my case I wasn&rsquo;t and had to do some additional parsing and mapping of the URL to get the correct filepath but it should be a decent start for you.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Phonegap 3.4 GeoLocation]]></title>
		
		<link href="http://browniefed.com/blog/2014/06/07/phonegap-3-dot-4-geolocation/"/>
		<updated>2014-06-07T08:28:00-07:00</updated>
		<id>http://browniefed.com/blog/2014/06/07/phonegap-3-dot-4-geolocation</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>It doesn&rsquo;t appear to be just me but PhoneGap can be incredibly difficult to use. Simply because any information pertaining to the most current version of phonegap is so fragmented. A google search will reveal virtually nothing about the error messages you&rsquo;re receiving and how to remedy them for current versions.</p>

<p>For example, I was attempting to use the GeoLocation API. Could care less about the extreme accuracy. After attempting to use it I was getting an Error Code 2 , failed to start geolocation service. Well maybe that was my fault for enabling <code>enableHighAccuracy</code> but wait you have to enableHighAccuracy for older versions of android otherwise it won&rsquo;t work. Or was that only for older versions of the geolocation plugin which then got deprecated in some versions of android in favor of the native browser geolocation API because it provides better and faster GPS locations. In the end the fault was all mine, I had simply forgotten to include the plugin in my <code>config.xml</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;gap:plugin name="org.apache.cordova.geolocation" version="0.3.8" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Version <code>0.3.8</code> was the current version at the time of this article. Actually released on June 5th, 2014 just before the article written on June 6th, 2014.</p>

<p>I&rsquo;ve sort of determined that the only real reliable way to determine anything is just to look at the release notes on <a href="https://github.com/apache/cordova-plugin-geolocation/blob/master/RELEASENOTES.md">github</a> for the best most up to date information.</p>

<p>To end I should say I really love PhoneGap and all of the time and effort people are putting into developing it. The documentation and information about current versions is fragmented, and rather than ranting I should be helping out and contributing to documentation and solving the problems. That should always be the goal if you find a problem in the open source world. Don&rsquo;t rant, help out, and that is what I will do.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Socket.io on Android + Phonegap]]></title>
		
		<link href="http://browniefed.com/blog/2014/06/01/socket-dot-io-on-android-plus-phonegap/"/>
		<updated>2014-06-01T08:12:00-07:00</updated>
		<id>http://browniefed.com/blog/2014/06/01/socket-dot-io-on-android-plus-phonegap</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>WebSockets are wonderful, they are one of the cheapest ways to get realtime communications into your web app. They&rsquo;re also a great way to get realtime communications into your mobile application. AJAX is great but wasn&rsquo;t applicable to my needs. Developing PDXLiveBus app required the server to handle all requests to TriMets servers and use AJAX to request the state of particular buses/routes was less realtime than I wanted. I could go more in depth about my usage and experience but the main point of this post is to prevent some table flipping.</p>

<p>I had it all working in browser however it was not working when I did my phonegap serve. It just would not connect, nor even error out ( I don&rsquo;t think I waited long enough). I had been using <a href="https://github.com/mkuklis/phonegap-websocket">https://github.com/mkuklis/phonegap-websocket</a>, which Android WebView (what phonegap utilizes) doesn&rsquo;t support WebSockets until Android KitKat (4.4). I think this is a tremendous oversight, but I digress. I attempted various things to get <code>phonegap-websocket</code> to work but I just couldn&rsquo;t.</p>

<p>The real problem wasn&rsquo;t with <code>phonegap-websocket</code> it was with my own server code. I had allowed CORS for the <code>restify</code> REST API I had setup but had forgotten to allow CORS for Socket.IO. It all came down to this single line of code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>io.set( 'origins', '*:*' );</span></code></pre></td></tr></table></div></figure>


<p>Yeah not the most secure but then again I don&rsquo;t think I have a choice since everything is being served from phones and not a particular domain. Also I&rsquo;m dealing with public transportation vehicle location which doesn&rsquo;t necessarily needing extreme security.</p>

<p>So if you can&rsquo;t get Socket.IO to work on your Android Phonegap app, add <code>phonegap-websocket</code> and make sure you have allowed CORS on your server.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[NonRTE - Part 1]]></title>
		
		<link href="http://browniefed.com/blog/2014/05/01/nonrte-part-1/"/>
		<updated>2014-05-01T06:26:00-07:00</updated>
		<id>http://browniefed.com/blog/2014/05/01/nonrte-part-1</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Once again stealing from antimatter I think writing about what you&rsquo;re currently building or have built is a good way to gain some clarity and also provide some value in explaining the topic. I&rsquo;ll be talking about NonRTE a non-contenteditable rich text editor for developers. One similar and the only one I know of is google docs. There are others that aren&rsquo;t rich text editors and are IDEs like codemirror and a few others that do not use contenteditbale. I personally don&rsquo;t know of any RTEs that are open source that developers can use and build with but I could be wrong so do ping me if that isn&rsquo;t the case.</p>

<p>Something that has always boggled my mind was how heavily people have relied on contenteditable. Managing the different ways that contenteditbale is implemented on every browser and versions of those browsers is a nightmare. There is a portion of code in most RTE libraries that change how everything works just for one particular browser. This is insane to me due to the world we live in now with NPM, github, and the open source world at our finger tips. We have amazing templating libraries, HTML parsers, two-way data bindings, word to HTML libraries, excel expression parsers and executors, and everything compiles to JavaScript despite this insane amount of open source code we still use contenteditable.</p>

<p>These aren&rsquo;t all the components that necessarily build an RTE you have to think about the cursor and positioning it correctly, selection and how to implement that, styling the complexities of every possible selection, resizing the container and line widths no longer being the same (this is the toughest one I think), copy and pasting, selection then clicking and dragging, and many many more components. These all sound hard but once again, if you look around you&rsquo;ll find varying levels of complete, incomplete, good, bad, popular, and unpopular repos that accomplish much of this. It sounds like I&rsquo;m saying rip them off, I&rsquo;m definitely not condoning that so be sure and give credit where credit is due.</p>

<p>I&rsquo;m sure others have embarked on this particular quest only to fail or give up but I&rsquo;ll do my best not to. I see a lot of potential in this idea, many of the concepts are also very similar to Ractive. In fact I could implement this even faster in Ractive but have decided to embark on this from scratch just to learn things. It&rsquo;ll be a fun ride.</p>

<p>At this point I have very basic typing working, the cursor is working and positioned (mostly) correctly, clicking somewhere will move the cursor, arrow keys will move from line to line and character to character correctly and enter to create new lines and split content is also working. Overall it&rsquo;s a little bit of work but nothing quite substantial yet. The repo lives here <a href="https://github.com/browniefed/Nonrte">https://github.com/browniefed/Nonrte</a> so feel free to contribute. I haven&rsquo;t hit many challenges yet but I will and when I do I&rsquo;ll be sure and document them and document the solutions.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Ractive.JS Components for Speed and Flexibility]]></title>
		
		<link href="http://browniefed.com/blog/2014/04/27/ractive-dot-js-components-for-speed-and-flexibility/"/>
		<updated>2014-04-27T08:35:00-07:00</updated>
		<id>http://browniefed.com/blog/2014/04/27/ractive-dot-js-components-for-speed-and-flexibility</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Components in Ractive are crucial if you want to build a flexible application. Hopefully this changes in the future with partials living on the data object and various init options accepting functions rather than static objects. The main purpose of Components is to have reusable template pieces that you can drop in and work the same all over your application. Some examples might be a grid component that accepts rows and columns as it&rsquo;s data, maybe it&rsquo;s as simple as a checkbox that has some styling a particular way. Components will help you build consistency through out your application however you should know when to use a partial and when to use a component.</p>

<p>If you&rsquo;re coming from the Angular world components are much like directives. However since there is no controller concept, or model concept in Ractive there are less headaches in getting components to work with scope and all that jazz.</p>

<p>Enough talk, lets jump in</p>

<h3>Example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Checkbox</span> <span class="o">=</span> <span class="nx">Ractive</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">isolated</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;{{checked}}&quot;&gt; {{label}}&lt;/label&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">checked</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>To use it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ractive</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ractive</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;Checkbox checkbox=&quot;{{active}}&quot; label=&quot;{{title}}&quot; /&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Checkbox</span> <span class="o">:</span> <span class="nx">Checkbox</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;This is a title&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">active</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the checkbox example I was talking about. Components are just another instiation of Ractive, using Ractive.extend says &ldquo;use this stuff as the default&rdquo;. There are a few things to point on.</p>

<p>On the component we have set <code>isolated</code> to <code>true</code>. This means that the template in the component does not have access to the parent data. That just means we couldn&rsquo;t do this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;{{active}}&quot;&gt; {{title}}&lt;/label&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In some cases you don&rsquo;t want your components to be isolated but for them to be modular and reusable it is good to make them isolated. Isolated is false by default.</p>

<p>Isolating your components means you are in control, you can name your data anything. As you see the parent Ractive has <code>active</code> and <code>title</code> but we still reference them as <code>checkbox</code> and <code>label</code> inside the component. Ractive will wire up the keypaths for you and bind everything. So when a user clicks on the checkbox <code>checked</code> will update to <code>false</code> or <code>true</code> and on the parent Ractive <code>active</code> will update to <code>true</code> or <code>false</code>, depending on if the checkbox is checked or unchecked.
Further more if you update the title, it&rsquo;ll propagate down to the component.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ractive</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;This is a new title&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You are two-way data binding on DOM elements to the component as well as to the parent object. This is extremely powerful especially if you&rsquo;re coming from the jQuery world. There is no more finding the DOM element you want, determining if it is checked, finding the parent wrapping label, updating the text of the label.</p>

<p>This is a very basic example. A more complex example would be the Grid component.</p>

<p><code>grid-template</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      {{#columns}}
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>{{.label}}<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      {{/columns}}
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  {{#rows:rowIndex}}
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          {{#columns:columnIndex}}
</span><span class='line'>              <span class="nt">&lt;td&gt;</span>
</span><span class='line'>                  {{rows[rowIndex][.field]}}
</span><span class='line'>              <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>          {{/columns}}
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  {{/rows}}
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Grid</span> <span class="o">=</span> <span class="nx">Ractive</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">isolated</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;#grid-template&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ractive</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ractive</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;Grid rows=&quot;{{users}}&quot; columns=&quot;{{cols}}&quot; /&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">cols</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">field</span><span class="o">:</span> <span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="nx">label</span><span class="o">:</span> <span class="s1">&#39;Username&#39;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">field</span><span class="o">:</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">label</span><span class="o">:</span> <span class="s1">&#39;Full Name&#39;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">field</span><span class="o">:</span> <span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="nx">label</span><span class="o">:</span> <span class="s1">&#39;Email&#39;</span><span class="p">}</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nx">users</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;admin&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Admin&#39;</span><span class="p">,</span> <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;admin@example.com&#39;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;tg&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Thadius Gorge&#39;</span><span class="p">,</span> <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;tg@example.com&#39;</span><span class="p">},</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;f999&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Frank&#39;</span><span class="p">,</span> <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;frank@example.com&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">components</span><span class="o">:</span> <span class="p">{</span><span class="nx">Grid</span><span class="o">:</span> <span class="nx">Grid</span><span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the live example</p>

<p data-height="268" data-theme-id="0" data-slug-hash="dvqIl" data-default-tab="result" class='codepen'>See the Pen <a href='http://codepen.io/browniefed/pen/dvqIl/'>dvqIl</a> by browniefed (<a href='http://codepen.io/browniefed'>@browniefed</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="http://browniefed.com//codepen.io/assets/embed/ei.js"></script>


<p>All it takes is some slightly organized data and you&rsquo;d never have to construct a data table again. More advance component topics are coming in the future this was merely an introduction.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Progress reports]]></title>
		
		<link href="http://browniefed.com/blog/2014/04/26/progress-report/"/>
		<updated>2014-04-26T08:51:00-07:00</updated>
		<id>http://browniefed.com/blog/2014/04/26/progress-report</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>After stumbling upon <a href="http://antimatter15.com/">http://antimatter15.com/</a> and all the awesome things he was doing I noticed that he would post progress reports each month. I often attempt at keeping a daily/weekly journal of sorts but it never pans out. I&rsquo;ve been trying to get into a decent state of mind to start serious personal development both in my projects and just myself. Reflecting on accomplishments each month is a great way to keep track of that growth. I would always get so in depth and fine-grained with everything that I did that it was pointless. I had some fantasy that if I kept a good enough diary that if I was rich and famous in the future that people would want to read my story. I&rsquo;d have an account of every little thing that I did and people could attempt to replicate it to a T. Typing that out just sounds insane.</p>

<p>Where I go from here we shall see. I have a few goals I&rsquo;d like to accomplish for 2014 but am going to take it one week at a time. Weeks seem like they are small enough that I can sit down on a Sunday and plan out what I want to accomplish by the next Sunday. With little weekly notes I can compile the monthly progress report. Planning stuff out will  be a new concept for me since I generally shoot from the hip and do what I feel like.</p>

<p>Some of my goals for 2014</p>

<ul>
<li>Become a bigger contributor to Ractive.JS</li>
<li>Do a public talk at a meetup on any subject</li>
<li>Start my own library and get some small adoption. Currently focused on NonRTE (what a terrible name)</li>
<li>Do freelancing/client work one client at a time in technologies I&rsquo;m not as experienced in (have people pay me to learn). One new one every 2 months.</li>
<li>More meetups ( at least 3 a month ), more free coding on other projects that have some sort of benefit to the world ( hackoregon, etc)</li>
<li>Code Every Day. Simple. I must write code, documentation, a blog post, anything worth while and it must be public and visible on github.</li>
<li>Work less hours, get more done in the 40 I&rsquo;m paid for. I love work, I love my job but I work too much and in the end I&rsquo;m working to accomplish someone elses dreams and not my own. I will focus on putting in a better 40 hours. How I do that I do not know but there are plenty of productivity methods I&rsquo;d love to try and see what sticks.</li>
<li>Play with other technologies more. JavaScript is the future but I always enjoyed playing with other languages. I&rsquo;ve some how lost this curiosity over the course of becoming an adult.</li>
<li>One blog post a week. This isn&rsquo;t a tall order by any means. It can be a small tutorial on CSS, JS, cool things I saw. Just write something of value.</li>
</ul>


<p>That&rsquo;s a tall order for 2014 as it&rsquo;s almost half way over but I&rsquo;ll be turning 24. My 15 year old self said I&rsquo;d be rich and retired at 21 so I&rsquo;m already behind.</p>

<p>That&rsquo;s it from me</p>
]]>
		</content>
	</entry>
	
</feed>
