<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title><![CDATA[JavaScript Without Grammar]]></title>
	<link href="http://browniefed.com/atom.xml" rel="self"/>
	<link href="http://browniefed.com/"/>
	<updated>2016-12-23T14:30:19-08:00</updated>
	<id>http://browniefed.com/</id>
	<author>
		<name><![CDATA[Jason Brown]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
	<entry>
		
			<title type="html"><![CDATA[A Year in Review and What is Next]]></title>
		
		<link href="http://browniefed.com/blog/a-year-in-review-and-what-is-next/"/>
		<updated>2016-12-23T13:41:00-08:00</updated>
		<id>http://browniefed.com/blog/a-year-in-review-and-what-is-next</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h2>Absence</h2>

<p>I made a decision to not post as much on this blog over the past year. Despite reaching upwards of 300,000 views in the past 1.5 years, I wasn&rsquo;t seeing the positive feedback I was hoping for. Not compliments, but increase knowledge around animations, and just a general positive impact on the community.</p>

<p>I now realize I was wrong. Over the course of the year many people have been posting new animated blog tutorials.
I won&rsquo;t go through my entire twitter timeline but one recently was from someone who posted an animation tutorial.</p>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/browniefed">@browniefed</a> Thanks for you feedback. I appreciate it. Big fan of your blog btw. I&#39;ve learned a lot reading your posts!</p>&mdash; Rational App Dev (@rationalappdev) <a href="https://twitter.com/rationalappdev/status/812361076113219584">December 23, 2016</a></blockquote>


<script async src="http://browniefed.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Lurking in chat channels, many have been helping others with animations and referencing my blog as where they learned.
It&rsquo;s a good feeling. This year I will return to the blog.</p>

<!-- more -->


<h2>Making Money</h2>

<p>This blog has made me $0 directly (except a $20 bitcoin gift, thanks Daniel). Indirectly it has been invaluable for being a resource where people learn my name, and attach it to things they&#8217;ved learned. Things that have helped them wow their coworkers, make an interaction a touch better, or just learn something that helps them ship that next feature.</p>

<p>I don&rsquo;t believe donations are sustainable.
Every resource that is valuable and sustainable are all charging money like <a href="https://reacttraining.com/">React Training</a>, or anything from <a href="https://reactforbeginners.com/">Wes Bos</a>, and anyone else that is selling courses like <a href="https://www.educative.io/">educative.io</a>.</p>

<p>I enjoy helping people but 75% of what I build/write/etc from now on will cost money ( or earn me money in some way).</p>

<h2>What Have I Been Doing</h2>

<p>Living my life I suppose. One thing I&rsquo;ve been doing is consuming way too much.
Consuming others knowledge is fun and valuable but I personally have not be investing.</p>

<p>I&rsquo;m trying to fix this. I&rsquo;m trying to consume less but that&rsquo;s a work in progress.</p>

<p>Since I&rsquo;ve been trying to focus on creationg I&rsquo;ve done some Egghead work. It&rsquo;s been great and Egghead is fantastic!</p>

<p><a href="https://egghead.io/courses/animate-react-native-ui-elements"><img src="https://d2eip9sf3oo6c2.cloudfront.net/series/covers/000/000/085/full/EGH_ImageGallery_Final-cover.png?1478539191" title="Egghead is poppin" ></a></p>

<p>You can check out my first course <a href="https://egghead.io/courses/animate-react-native-ui-elements">Animate React Native UI Elements</a>  <br/>
You can check out all my lessons here <a href="https://egghead.io/instructors/jason-brown-20a6bf03-254a-428c-9984-dca76cc84f32">Instructor &ndash; Jason Brown</a></p>

<p>More courses and lessons are on the way. 1 course is completed, and the other is in production.</p>

<h2>A Year to Reboot</h2>

<p>It&rsquo;ll be a good year to reboot, and I&rsquo;m definitely not waiting till the new year starts to take action.</p>

<p>My plans will include.</p>

<ul>
<li><p><strong>Heavier time investment in open source</strong>  <br/>
&mdash; I contribute where I want but I&rsquo;d like a few open source projects to maintain.</p></li>
<li><p><strong>Dumping knowledge into more outlets</strong>   <br/>
&mdash; Including more egghead, blog posts, my own knowledge base sites, interactive tutorials</p></li>
<li><p><strong>Consume less, Create more</strong>   <br/>
&mdash; Catching up on the latest things at night, not the instant it happens</p></li>
<li><p><strong>Better time management</strong>    <br/>
&mdash; Not much needs to be said here, but maintaining a healthy life style along w/ accomplishing all of this will be difficult</p></li>
<li><p><strong>Say No more often</strong>   <br/>
&mdash; This plays into time management, but saying no to things I know I don&rsquo;t really want to do will be crucial</p></li>
<li><p><strong>New Technologies</strong>  <br/>
&mdash; I&rsquo;ve been very focused on JS land. It&rsquo;s fun but I need to expand my breadth of knowledge. Basically be a better T-Shaped person.</p></li>
</ul>


<h2>Anyway</h2>

<p>It&rsquo;s been a good year for me personally. Excited for 2017. Looking forward to whatever the hell happens.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[Migrating Ava to Jest]]></title>
		
		<link href="http://browniefed.com/blog/migrating-ava-to-jest/"/>
		<updated>2016-10-06T18:48:00-07:00</updated>
		<id>http://browniefed.com/blog/migrating-ava-to-jest</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>First off. Star the repo here <a href="https://github.com/facebook/jest">https://github.com/facebook/jest</a> so you can show some love for the hardwork that has been put into it.</p>

<h3>Props</h3>

<p>I was an early adopter of Jest back in the early days ( ~v0.4). It was okay but difficult to setup and slow with sometimes weird results and behaviors.</p>

<p>Tireless effort has been done by <a href="https://twitter.com/cpojer">Christoph Pojer</a> to get to the latest Jest (v16.01) so props to him and others working with him.</p>

<p>Check out the fantastic documentation here <a href="https://facebook.github.io/jest/docs/getting-started.html#content">https://facebook.github.io/jest/docs/getting-started.html</a></p>

<h3>Migrating in seconds</h3>

<p>There is almost nothing to write about on this topic because it was almost too easy.
Mostly because of <a href="https://github.com/skovhus/jest-codemods">jest-codemods</a>. It is a set of codemods crafted to transition your Tape or Ava project to Jest.</p>

<p>It is worth it. Jest has come along way when it comes to speed, functionality, configuration options, and ease of configuration (or lack there of to get started).</p>

<p>There were minor configurations I had to setup, but most were copying and pasting from the documentation.</p>

<p>Lets dive into the process real quick.</p>

<h3>First and last step to transition tests</h3>

<p>First install <code>jest-codemods</code></p>

<p><code>npm install -g jest-codemods</code></p>

<p>Then run <code>jest-codemods</code> in a desired directory.
It will prompt you with <code>Ava</code>, <code>Tape</code>, or a <code>both</code> option.
Then you provide a glob. I was running in my root so I provided the glob <code>**/__tests__/**/*.js</code> to convert all of my tests.</p>

<p>That was it.</p>

<!-- more -->


<h3>Done</h3>

<p>For basic implementations that is all you need!</p>

<p>Add <code>"test": "jest"</code> to your <code>package.json</code> <code>scripts</code> section and you&rsquo;re good to go!</p>

<h3>Caveats</h3>

<p>There are a few caveats to note.
In Ava you can pass in custom messages to the assertions. This is missing in the default <code>expect</code> provided by Jest but is by no means a deal breaker.</p>

<p><code>t.plan</code> and <code>t.skip</code> aren&rsquo;t supported by the codemod.</p>

<p><code>t.skip</code> and <code>t.plan</code> go hand-in-hand. I find <code>t.skip</code> to be somewhat unnecessary but <code>t.plan</code> is great for async tests.</p>

<p>This isn&rsquo;t a deal breaker by any means. And Christopher is happy to accept a PR for it too!.</p>

<h3>What is awesome</h3>

<p> Our setup uses Webpack <code>root</code> property to use shared code across 2 directories in a monorepo. Adding that in other testing libraries required webpack and other NPM installed libraries.
 In Jest it is as simple as adding this to your config.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> "modulePaths": [
</span><span class='line'>    "/shared"
</span><span class='line'>  ],</span></code></pre></td></tr></table></div></figure>


<p>Are you using CSS Modules and want to actually test out certain classes get applied?
Well Jest has a nice out of the box solution. It does require an additional NPM install of <code>identity-obj-proxy</code> but it&rsquo;s worth when it&rsquo;s an easy config option.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"moduleNameMapper": {
</span><span class='line'>    "^.+\\.(css|less)$": "identity-obj-proxy"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all you need to do to get CSS modules working.</p>

<p>For more awesome-examples and full configuration options checkout the documentation <a href="https://facebook.github.io/jest/docs/getting-started.html">https://facebook.github.io/jest/docs/getting-started.html</a>.
Many of the normal uses cases have been though of and are documented with copy and paste configuration options!</p>

<h3>Check it out</h3>

<p>I&rsquo;m barely scratching the surface of what is great about Jest.
There is hopefully more coming but go use Jest, star the repo on git <a href="https://github.com/facebook/jest">https://github.com/facebook/jest</a> and never look back.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native - Maintain Touchable Items with a Parent PanResponder]]></title>
		
		<link href="http://browniefed.com/blog/react-native-maintain-touchable-items-with-a-parent-panresponder/"/>
		<updated>2016-09-21T15:25:00-07:00</updated>
		<id>http://browniefed.com/blog/react-native-maintain-touchable-items-with-a-parent-panresponder</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h2>What Are We Building</h2>

<p><img src="http://i.imgur.com/r1eZgLn.gif" title="The most boring app ever" ></p>

<h2>Intro</h2>

<p>One of the issues I&rsquo;ve noticed with PanResponder is that people assume it is an all or nothing.
By that I mean adding a PanResponder in a parent view means it will steal all of your touches and <code>Touchable</code> items won&rsquo;t be touchable any longer.</p>

<p>You may be running into this because you copy and pasted it from here the documentation here <a href="https://facebook.github.io/react-native/docs/panresponder.html">https://facebook.github.io/react-native/docs/panresponder.html</a> and it includes a capture phase returning true.
(I copy and paste this all the time).
We&rsquo;ll talk about the capture phase next.</p>

<!-- more -->


<p>This is far from the case. As always, React Native internal code is all built on the same components you are using so be sure and always read that code.
Navigation is one example that uses a top level PanResponder and only deals with touches on the outer edge of the screen.</p>

<p>Real internal react native example code for <a href="https://github.com/facebook/react-native/blob/a2fb703bbb988038323c55b29b40e8f5ff52966d/Libraries/CustomComponents/NavigationExperimental/NavigationCardStackPanResponder.js#L97">NavigationExperimental here</a></p>

<h2>Example code</h2>

<p>You can grab the full code in this repo here.</p>

<p><a href="https://github.com/browniefed/react-native-parent-panresponder-touch">https://github.com/browniefed/react-native-parent-panresponder-touch</a></p>

<h2>General PanResponder</h2>

<p>The React Native folk built the gesture responding system very similar to the web. The gesture system has a capture phase, just like the web.
If you didn&rsquo;t know about the capture system on the web, there is one. The events go from a capture phase and back up through the bubble phase.
You may have heard of &ldquo;event bubbling&rdquo; where the event starts at the inner most child then moves up each element.
However before that the <code>capture</code> phase triggered and traversed from the top down to the element you clicked.</p>

<p><code>top =&gt; #random_parent =&gt; #random_child2 =&gt; thing you clicked =&gt; #random_child2 =&gt; #random_parent =&gt; top</code></p>

<p>The capture phase in React Native has two phases per PanResponder. It has <code>onStartShouldSetResponderCapture</code> and <code>onMoveShouldSetResponderCapture</code>.
The <code>onStartShouldSetResponderCapture</code> is called on the beginning touch, and <code>onMoveShouldSetResponderCapture</code> is called on every time you move your finger.</p>

<p>After the caputre phase the bottom level touched view will then move back up the chain.
The <code>onStartShouldSetResponder</code> function will be called on initial press, then <code>onMoveShouldSetResponder</code> will be called each movement of the finger.</p>

<p>At any point that a capture phase, or non capture phase returns <code>true</code> that <code>PanResponder</code> will receive the gesture.
In that case <code>onResponderGrant</code> will be called, then <code>onResponderMove</code>, then eventually when the user removes their finger <code>onResponderRelease</code>.</p>

<p>Now do remember the capture and bubble phase are happening on <strong>EACH</strong> finger movement.
So that means if a parent view returns true in <code>onMoveShouldSetResponderCapture</code> phase then the touch will be taken away from the other active <code>PanResponder</code></p>

<p>When that happens <code>onResponderTerminationRequest</code> is called on the active <code>PanResponder</code> if it returns true then <code>onResponderTerminate</code> is called.
Basically you said &ldquo;Sure whatever else wants the gesture they can have it&rdquo;.</p>

<p>Finally when the OS steals the gesture (like when you swipe down the notification center), the <code>onResponderTerminationRequest</code> function is called.</p>

<p>All of these are generally setup to just return <code>true</code> for you so that the generally appropriate actions are taken.</p>

<h2>PanResponder Best Practices</h2>

<p>All of that being said. Don&rsquo;t use the <code>capture</code> phase, you will rarely ever use it much like the web.
Stick to the function calls without <code>capture</code>.</p>

<p>When you need something, you need to decide <code>do I want to do it on the first press</code> or <code>do I want to do it on every movement</code>.
So that means you return true from <code>onStartShouldSetResponder</code> or <code>onMoveShouldSetResponder</code></p>

<p>Mostly the reason you don&rsquo;t ever use these is as the default says &ldquo;The deepest element gets focus&rdquo;. Aka a button you pressed gets pressed, typically that&rsquo;s what you want.</p>

<h2>What the hell does this mean?</h2>

<p>It means</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;SpecialViewToDoThings&gt;
</span><span class='line'>    &lt;SomeCrazyScrollView&gt;
</span><span class='line'>        &lt;TouchableOpacity&gt;
</span><span class='line'>            &lt;Text&gt;Look a button&lt;/Text&gt;
</span><span class='line'>        &lt;/TouchableOpacity&gt;
</span><span class='line'>    &lt;/SomeCrazyScrollView&gt;
</span><span class='line'>&lt;/SpecialViewToDoThings&gt;</span></code></pre></td></tr></table></div></figure>


<p>Without <code>capture</code> phases, <code>TouchableOpacity</code> <code>onPress</code> will get the touch.
With a <code>capture</code> phase returning true <code>SpecialViewToDoThings</code> will get touch.
<code>SomeCrazyScrollView</code> will get the scroll when someone doesn&rsquo;t press a <code>TouchableOpacity</code> and <code>SpecialViewToDoThings</code> doesn&rsquo;t return true from a capture phase.</p>

<h2>WHY DIDN&rsquo;T THEY SAY ANY OF THIS!?!?!?</h2>

<p>Oh don&rsquo;t worry, none of this information is new, it&rsquo;s in the docs <a href="https://facebook.github.io/react-native/docs/gesture-responder-system.html">https://facebook.github.io/react-native/docs/gesture-responder-system.html</a></p>

<p>Still not clear? Lets do some code. This will just show you how to make internal touchable things and still capture touches with a parent <code>PanResponder</code>.</p>

<h2>Create a PanResponder</h2>

<p>First we need to create a <code>PanResponder</code>. If you look at the documentation you&rsquo;ll notice many of the functions are not necessary, and or default to returning true.
So we&rsquo;ll</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>componentWillMount() {
</span><span class='line'>    this._panResponder = PanResponder.create({
</span><span class='line'>        onMoveShouldSetPanResponder:(evt, gestureState) =&gt; true,
</span><span class='line'>        onPanResponderMove: (evt, gestureState) =&gt; {
</span><span class='line'>            // DO JUNK HERE
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>All the available stuff</h2>

<p>I won&rsquo;t type it all out. It&rsquo;s all in the documentation <a href="https://facebook.github.io/react-native/docs/panresponder.html">https://facebook.github.io/react-native/docs/panresponder.html</a></p>

<h2>Create a simple view</h2>

<p>We start by creating  a <code>View</code> with some styles and setup some state for the button.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class PanResponderTest extends Component {
</span><span class='line'>  constructor(props) {
</span><span class='line'>    super(props)
</span><span class='line'>
</span><span class='line'>    this.state = {
</span><span class='line'>      zone: "Still Touchable"
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    this.onPress = this.onPress.bind(this);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  onPress() {
</span><span class='line'>    this.setState({
</span><span class='line'>      zone: "I got touched with a parent pan responder"
</span><span class='line'>    })
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  render() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;View style={styles.zone1} /&gt;
</span><span class='line'>        &lt;View style={styles.center}&gt;
</span><span class='line'>          &lt;TouchableOpacity onPress={this.onPress}&gt;
</span><span class='line'>            &lt;Text&gt;{this.state.zone}&lt;/Text&gt;
</span><span class='line'>          &lt;/TouchableOpacity&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>        &lt;View style={styles.zone2} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We create a top level container (which will receive the <code>PanResponder</code>). 2 zones, one red, and one blue. These will be special zones for touch registering.
Then finally a <code>TouchableOpacity</code> button. This will simulate some internal item you want pressed while having an external <code>PanResponder</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1
</span><span class='line'>  },
</span><span class='line'>  center: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    alignItems: "center",
</span><span class='line'>    justifyContent: "center" 
</span><span class='line'>  },
</span><span class='line'>  zone1: {
</span><span class='line'>    top: 40,
</span><span class='line'>    left: 0,
</span><span class='line'>    right: 0,
</span><span class='line'>    height: 50,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    backgroundColor: "red"
</span><span class='line'>  },
</span><span class='line'>  zone2: {
</span><span class='line'>    left: 0,
</span><span class='line'>    right: 0,
</span><span class='line'>    bottom: 0,
</span><span class='line'>    height: 50,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    backgroundColor: "blue"
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>We will center the button, and put our special zones at the top and bottom.</p>

<p><code>TouchableOpacity</code> uses <code>PanResponder</code> to detect touches, so it will play into the bubble and capture phases.
The zones have no <code>PanResponder</code> gestures registered so it won&rsquo;t play into the capture and bubble phases.</p>

<h2>Limit it to region</h2>

<p>This line <code>onMoveShouldSetPanResponder:(evt, gestureState) =&gt; true</code> always returns true so the element will always accept.
Also we aren&rsquo;t using the <code>capture</code> phase so the <code>TouchableOpacity</code> will always be pressable.
However our parent <code>PanResponder</code> will get triggered when we don&rsquo;t press the button.</p>

<h2>Limit it to distance moved</h2>

<p><code>moveX</code> and <code>moveY</code> are the current coordinate positions of the <code>gestureState</code>.
<code>dx</code> and <code>dy</code> are the distance change from where the initial finger was put down (delta X and delta Y).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const getDirectionAndColor = ({ moveX, moveY, dx, dy}) =&gt; {
</span><span class='line'>  const draggedDown = dy &gt; 30;
</span><span class='line'>  const draggedUp = dy &lt; -30;
</span><span class='line'>  const draggedLeft = dx &lt; -30;
</span><span class='line'>  const draggedRight = dx &gt; 30;
</span><span class='line'>  const isRed = moveY &lt; 90 && moveY &gt; 40 && moveX &gt; 0 && moveX &lt; width;
</span><span class='line'>  const isBlue = moveY &gt; (height - 50) && moveX &gt; 0 && moveX &lt; width;
</span><span class='line'>  let dragDirection = '';
</span><span class='line'>
</span><span class='line'>  if (draggedDown || draggedUp) {
</span><span class='line'>    if (draggedDown) dragDirection += 'dragged down '
</span><span class='line'>    if (draggedUp) dragDirection +=  'dragged up ';
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  if (draggedLeft || draggedRight) {
</span><span class='line'>    if (draggedLeft) dragDirection += 'dragged left '
</span><span class='line'>    if (draggedRight) dragDirection +=  'dragged right ';
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  if (isRed) return `red ${dragDirection}`
</span><span class='line'>  if (isBlue) return `blue ${dragDirection}`
</span><span class='line'>  if (dragDirection) return dragDirection;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We define that if a user moves their finger in a direction further than 30 pixels than we&rsquo;ll trigger a direction.
Also if they are within the absolutley positioned zones we&rsquo;ll tag them with <code>red</code> or <code>blue</code>.</p>

<p>This function will return nothing if we haven&rsquo;t dragged a finger greater than 30 pixels, and or we aren&rsquo;t in a particular zone.</p>

<h2>Where does this function go?</h2>

<p>Since our <code>getDirectionAndColor</code> function will return either <code>truthy</code> or <code>falsy</code> values we can pass that right into our <code>onMoveShouldSetPanResponder</code>.
This means when it returns <code>truthy</code> our <code>onPanResponderMove</code>. We then recall the function and then call <code>setState</code> to update the button text.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  componentWillMount() {
</span><span class='line'>    this._panResponder = PanResponder.create({
</span><span class='line'>      onMoveShouldSetPanResponder:(evt, gestureState) =&gt; !!getDirectionAndColor(gestureState),
</span><span class='line'>      onPanResponderMove: (evt, gestureState) =&gt; {
</span><span class='line'>        const drag = getDirectionAndColor(gestureState);
</span><span class='line'>        this.setState({
</span><span class='line'>          zone: drag,
</span><span class='line'>        })
</span><span class='line'>      },
</span><span class='line'>    });
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>Finally we need to add our <code>PanResponder</code> to the parent <code>View</code> like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  render() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container} {...this._panResponder.panHandlers}&gt;
</span><span class='line'>        &lt;View style={styles.zone1} /&gt;
</span><span class='line'>        &lt;View style={styles.center}&gt;
</span><span class='line'>          &lt;TouchableOpacity onPress={this.onPress}&gt;
</span><span class='line'>            &lt;Text&gt;{this.state.zone}&lt;/Text&gt;
</span><span class='line'>          &lt;/TouchableOpacity&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>        &lt;View style={styles.zone2} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h2>Potential uses</h2>

<p>You can use the <code>onLayout</code> callback from any component to then define your layout constraints for your PanResponder.
You could position things off screen then drag them on screen by triggering an <code>Animated</code> value while your current view stays touchable.</p>

<p>There are all of the potential use cases, it&rsquo;s all about what you need to accomplish and or what your product manager wants.</p>

<h2>Final code</h2>

<p>That&rsquo;s it. Go forth and gesture.</p>

<p>Once again our full code example is up here
<a href="https://github.com/browniefed/react-native-parent-panresponder-touch">https://github.com/browniefed/react-native-parent-panresponder-touch</a></p>

<p><img src="http://i.imgur.com/r1eZgLn.gif" title="Now we both have built the most boring app ever" ></p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[CSS Modules, Webpack and Testing]]></title>
		
		<link href="http://browniefed.com/blog/css-modules-webpack-and-testing/"/>
		<updated>2016-01-31T12:58:00-08:00</updated>
		<id>http://browniefed.com/blog/css-modules-webpack-and-testing</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h2>The Problem</h2>

<p>When getting into some basic React testing with CSS Modules I ran into one issue. How the hell do I test them?</p>

<p>You may see the issue that I faced requiring a <code>.css</code> file, if you don&rsquo;t let me show you.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import React from "react";
</span><span class='line'>import MyCss from "./somecss.css";
</span><span class='line'>import classnames from "classnames";
</span><span class='line'>
</span><span class='line'>const MyComponent = ({disabled}) =&gt; &lt;div className={classnames(MyCss.container, {[MyCss.disabled]: disabled})} /&gt;
</span><span class='line'>
</span><span class='line'>export default MyComponent;</span></code></pre></td></tr></table></div></figure>


<p>So there isn&rsquo;t really much to test here, but lets say we wanted to make sure that a <code>div</code> had the disabled class when it was given a disabled prop.
We fire up our test, create it, babel compiles, but oh no, <code>MyCss</code> is undefined, or an empty object. Well duh, we&rsquo;re using Webpack to process our CSS.</p>

<p>For that matter we could use something to mock the import right? Yeah you could but lets introduce something even more awesome so we don&rsquo;t have to create custom mocks.</p>

<h2>Babel Plugin Webpack Loaders Awesomeness</h2>

<p><a href="https://github.com/istarkov/babel-plugin-webpack-loaders">Babel Plugin Webpack Loaders</a> allows us to run our tests and process all requires through our typical webpack loaders.</p>

<!-- more -->


<p>So when we&rsquo;re writing our tests to check out if <code>MyComponent</code> will have the disabled class we can just <code>import</code> the file into our test and know that it&rsquo;ll actually provide the processed CSS Modules!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//Test Imports of React, Addons for shallow rendering, teaspoon, maybe enzyme?
</span><span class='line'>
</span><span class='line'>import MyCss from "./somecss.css";
</span><span class='line'>
</span><span class='line'>//Do some shallow rendering of &lt;MyComponent disabled={true} /&gt;
</span><span class='line'>
</span><span class='line'>expect(renderedOutput.className).toHaveClass(MyCss.disabled);</span></code></pre></td></tr></table></div></figure>


<p>Yeah that&rsquo;s not actual code, but you get the point. Our <a href="https://github.com/istarkov/babel-plugin-webpack-loaders">Babel Plugin Webpack Loaders</a> processed all our imports for us and away we go.</p>

<p>What does the setup look like for that?</p>

<h2>Setup</h2>

<p>I created a new <code>runtime.webpack.config.js</code> file. They even provide you with a basic one, I realized that after the fact. <a href="https://raw.githubusercontent.com/istarkov/babel-plugin-webpack-loaders/master/examples_webpack_configs/run.webpack.config.js">runtime.webpack.config.js</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module.exports = {
</span><span class='line'>  output: {
</span><span class='line'>    // YOU NEED TO SET libraryTarget: 'commonjs2'
</span><span class='line'>    libraryTarget: 'commonjs2',
</span><span class='line'>  },
</span><span class='line'>  module: {
</span><span class='line'>    loaders: [
</span><span class='line'>      {
</span><span class='line'>        test: /\.css$/,
</span><span class='line'>        loaders: [
</span><span class='line'>          'style-loader',
</span><span class='line'>          'css-loader?modules&importLoaders=1&localIdentName=[name]__[local]--[hash:base64:5]',
</span><span class='line'>          'postcss-loader',
</span><span class='line'>        ],
</span><span class='line'>      },
</span><span class='line'>    ],
</span><span class='line'>  },
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>Created my <code>.babelrc</code> file and added in the plugin like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "presets": [
</span><span class='line'>    "es2015",
</span><span class='line'>    "react"
</span><span class='line'>  ],
</span><span class='line'>  "plugins": [
</span><span class='line'>    "transform-object-rest-spread"
</span><span class='line'>  ],
</span><span class='line'>  "env": {
</span><span class='line'>    "test": {
</span><span class='line'>      "plugins": [
</span><span class='line'>        [
</span><span class='line'>          "babel-plugin-webpack-loaders",
</span><span class='line'>          {
</span><span class='line'>            "config": "./runtime.webpack.config.js",
</span><span class='line'>            "verbose": false
</span><span class='line'>          }
</span><span class='line'>        ]
</span><span class='line'>      ]
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>You can see we only use this plugin when we set our node environment variable to <code>test</code>.</p>

<p>Then for our test running we&rsquo;ll use <code>mocha</code> so we&rsquo;ll need to set that up like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scripts: {
</span><span class='line'>  test: "BABEL_DISABLE_CACHE=1 NODE_ENV=test mocha --compilers js:babel-register --recursive"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Or however you have your testing setup. Moral of the story is set the <code>NODE_ENV</code> to <code>test</code>, do your <code>Babel</code> stuff for testing, and let the magic happen!</p>

<p>Of course this focuses on <code>css-modules</code> specifically but all your Webpack plugins will run so test at will!</p>

<p>Also check out <a href="https://github.com/nkbt/react-component-template">react-component-template</a> by <a href="https://github.com/nkbt">nkbt</a>. A great base for creating a custom react component, using tape for testing, as well as <code>babel-plugin-webpack-loaders</code> to process tests.</p>

<h2>Words of warning</h2>

<p>Just create a new Webpack config, or a configuration that outputs your app to <code>libraryTarget</code> correctly. I opted for a new Webpack config but mine is fairly simple at the moment.</p>

<p>Also if you ever get <code>ModuleBuildError: Module build failed: TypeError: Cannot read property 'toString' of undefined</code> that means you have some bad CSS. I should have read a little bit more, was getting issues with <code>parser</code> in PostCSS and had left off a closing <code>}</code>.</p>

<p>A CSS linter, and or a PostCSS linter probably would have caught this? I don&rsquo;t know, just know that I spent too much time being very confused when it was just human error causing the problem.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native FlexboxFroggy]]></title>
		
		<link href="http://browniefed.com/blog/react-native-flexboxfroggy/"/>
		<updated>2015-12-23T15:33:00-08:00</updated>
		<id>http://browniefed.com/blog/react-native-flexboxfroggy</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>If you are in the React Native world and haven&rsquo;t heard about <a href="https://exponentjs.com/">Exponent</a> then you&rsquo;ve been living under a rock. It&rsquo;s being built by James Ide, Brent Vatne, and Charlie Cheever. All who have contributed significantly to the React Native community and ecosystem.</p>

<p>Brent is holding a contest to win some awesome prizes, including tickets to the sold out ReactJS 2016 Conf. Check out the contest here <a href="https://gist.github.com/brentvatne/7d88f846417452355b18">https://gist.github.com/brentvatne/7d88f846417452355b18</a>.</p>

<p>What does this have to do with flexbox? Well as my entry into the contest I converted <a href="http://flexboxfroggy.com/">http://flexboxfroggy.com/</a> to React Native.</p>

<p><img src="http://i.imgur.com/BuCjWBl.gif" title="CHEAT CODES" ></p>

<p>Even adding animations was a breeze! One line of code <code>LayoutAnimation.spring()</code> easily makes all frogs spring into place!</p>

<p><img src="http://i.imgur.com/cyyYZAS.gif" title="Hop on froggies" ></p>

<p>You can check out the code here <a href="https://github.com/browniefed/flexboxfroggy">https://github.com/browniefed/flexboxfroggy</a></p>

<p>Or if you have Exponent installed you can run it easily on your phone by just tapping this link <a href="http://exp.host/@browniefed/flexboxfroggy">http://exp.host/@browniefed/flexboxfroggy</a></p>

<p>If you don&rsquo;t have Exponent installed I highly suggest you install it!</p>

<p>That&rsquo;s all from me for now. Looking forward to getting back to blogging in 2016!</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native Animated Book]]></title>
		
		<link href="http://browniefed.com/blog/react-native-animated-book/"/>
		<updated>2015-12-23T15:31:00-08:00</updated>
		<id>http://browniefed.com/blog/react-native-animated-book</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>So I wrote a book of sorts on React Native animations. Mostly covering the animated API, and soon much much more. Check it out here <a href="http://browniefed.com/react-native-animation-book/">http://browniefed.com/react-native-animation-book/</a>.</p>

<p>I cover the API, and walk through basic animation examples, and soon advanced topics. Learn to create a fun dragging, spinning square.</p>

<p><img src="http://browniefed.com/react-native-animation-book/images/SimpleDragAnimation.gif" title="DragNSpin" ></p>

<p>This is just a quick update :)</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native - How to bridge a Swift View]]></title>
		
		<link href="http://browniefed.com/blog/react-native-how-to-bridge-a-swift-view/"/>
		<updated>2015-11-28T11:09:00-08:00</updated>
		<id>http://browniefed.com/blog/react-native-how-to-bridge-a-swift-view</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>So in my previous article we bridged an Objective-C View component, I learned a lot, and also learned that I did a few unnecessary things. No worry though, we&rsquo;ll learn from that and make improvements in our Swift bridging.</p>

<p>First off want to give a thanks to <a href="https://twitter.com/tony_xiao">Tony Xiao</a>. He&rsquo;s been a great help in sharing code and giving explanations to a Swift and native development novice like myself. Also <a href="https://twitter.com/realasa">Asa Miller</a> for writing some of the original code and always collaborating on whatever we&rsquo;re both working on.</p>

<h2>What</h2>

<p><img src="http://i.imgur.com/TsOMRom.png" title="Gradients, are those still a thing?" ></p>

<p>We&rsquo;re going to bridge <a href="https://github.com/soffes/GradientView">https://github.com/soffes/GradientView</a>. Looks pretty nifty. Now we could also just use ReactART for this but we won&rsquo;t.</p>

<!-- more -->


<h2>Why Swift?</h2>

<p>It looks more like JavaScript, it&rsquo;s nicer to read (aka less brackets), and seemingly easier to write? I don&rsquo;t know, they say it&rsquo;s the next big thing.</p>

<h2>Why Not Swift?</h2>

<p>Well it can&rsquo;t be turned into a static library&hellip; wut? It seemingly can&rsquo;t be converted into one of those nice <code>.xcodeproj</code> files with a <code>.a</code> that we can easily link. However it can be converted into an <code>.xcodeproj</code> with a <code>.framework</code> we can link, not sure what the difference is but whatever. We&rsquo;ll still go about bridging. We could have also used Pods here, but once again the point of this post is about bridging and not Pods. I&rsquo;ll focus on those later.</p>

<h2>Create a Project</h2>

<p>I won&rsquo;t walk us through bundling up anything into a library, I&rsquo;ll just walk you through developing and integrating a Swift library.</p>

<p>So go ahead and fire off a <code>react-native init GradientTest</code> to create an empty project.</p>

<p>Once that is done open up the project <code>ios/GradientTest.xcodeproj</code> in XCode.</p>

<h2>Add GradientView</h2>

<p>Now lets pull in the <code>GradientView</code> library I had mentioned up above. I pulled it down and just put it in a <code>GradientView</code> folder in the <code>ios</code> directory.</p>

<p>Directory structure looks something like</p>

<p><img src="http://i.imgur.com/wzIGDYk.png" title="Aint nothin but a directory structure img" ></p>

<p>We&rsquo;ll go through the same general process of linking the library as always.</p>

<p>Right click, select <code>Add Files to GradientTest</code> and find the <code>GradientView.xcodeproj</code> that we just pulled down.</p>

<p>When we go to link the library in <code>Build Phases</code> like normal it will actually be <code>GradientView.framework</code> that we are going to link. Should look something like so.</p>

<p><img src="http://i.imgur.com/6EIs7Vu.png" title="It is all magic to me" ></p>

<p>We&rsquo;ll still get some issues so lets go add <code>$(SRCROOT)/GradientView</code> recursive to the <code>Framework Search Paths</code>
Should look something like</p>

<p><img src="http://i.imgur.com/bWs3LuJ.png" title="I wish XCode was more magical" ></p>

<h2>Create our Manager and Bridging Header</h2>

<p>We&rsquo;re going to first start off by creating a new <code>.swift</code> file. Simply do that by right clicking on our <code>GradientTest</code> folder, select <code>New file</code> and click on the swift selection and click create.</p>

<p>We&rsquo;ll call this file <code>RNGradientViewManager</code>.</p>

<p><strong> CREATE THE BRIDGING HEADER</strong></p>

<p><img src="http://i.imgur.com/99mUsRS.png" title="Bridge across troubled code" ></p>

<p>This is super important. Our briding header file will be named <code>GradientTest-Bridging-Header.h</code>. This allows us to bridge the React View Manager (Objective-C) code into the Swift world.</p>

<p>Or as you can read in the file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//
</span><span class='line'>//  Use this file to import your target's public headers that you would like to expose to Swift.
</span><span class='line'>//
</span></code></pre></td></tr></table></div></figure>


<p>All we need to do is add our <code>RCTViewManager.h</code> import. So our <code>GradientTest-Bridging-Header.h</code> should just be this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//
</span><span class='line'>//  Use this file to import your target's public headers that you would like to expose to Swift.
</span><span class='line'>//
</span><span class='line'>
</span><span class='line'>#import "RCTViewManager.h"</span></code></pre></td></tr></table></div></figure>


<h2>Add The Manager Code</h2>

<p>Okay now we need to add our Manager code, if you&rsquo;ve read my previous tutorial before on bridging Objective-C, I&rsquo;ve stated that the Manager is just a singleton View producer. Just because it is in swift is no different.</p>

<p><code>RNLinearGradientManager.swift</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import Foundation
</span><span class='line'>
</span><span class='line'>@objc(RNLinearGradient)
</span><span class='line'>class RNGradientViewManager : RCTViewManager {
</span><span class='line'>  override func view() -&gt; UIView! {
</span><span class='line'>    return UIView(); // We'll change this later
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We create an override for the <code>view</code> function, this is what React will call to produce the new view. Thanks to our bridging header we get access to <code>RCTViewManager</code> and create a class called <code>RNGradientViewManager</code>.</p>

<p>The important thing to call out here is the <code>@objc(RNLinearGradientSwift)</code> line. This is an arbitrary name I made up, but what it says is to tell XCode and the compiler to expose the class <code>RNGradientViewManager</code> to the Objective-C world and call it <code>RNLinearGradientSwift</code>.</p>

<h2>The Objective-C React Native Part</h2>

<p>Well at some point we have to dive into a little Objective-C. We&rsquo;ll create a new class and call it <code>RNLinearGradient</code></p>

<p><img src="http://i.imgur.com/fcBMyIS.png" title="How do you say cocoa" ></p>

<p>Then we&rsquo;ll subclass it off of <code>RCTView</code></p>

<p><img src="http://i.imgur.com/57Vcf0j.png" title="Generate code so I do not have to" ></p>

<p>That will create 2 files.</p>

<p><code>RNLinearGradient.h</code>
<code>RNLinearGradient.m</code></p>

<p>This is where we will tell React Native about what we need and what to call our stuff in the JavaScript world.</p>

<h4>First our <code>RNLinearGradient.m</code> file.</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "RNLinearGradient.h"
</span><span class='line'>#import "RCTViewManager.h"
</span><span class='line'>
</span><span class='line'>@interface RCT_EXTERN_MODULE(RNLinearGradientSwift, RCTViewManager)
</span><span class='line'>
</span><span class='line'>RCT_EXPORT_VIEW_PROPERTY(locations, NSArray);
</span><span class='line'>RCT_EXPORT_VIEW_PROPERTY(colors, NSArray);
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>We import our <code>RNLinearGradient.h</code> file we will get ot in a second, as well as our <code>RCTViewManager.h</code></p>

<p>See there is our Manager we created and called <code>RNLinearGradientSwift</code>.</p>

<p>We create a new interface and call <code>RCT_EXTERN_MODULE</code> which will tell the JavaScript world about our module called <code>RNLinearGradientSwift</code>.</p>

<p>We&rsquo;ll also export 2 view properties. These are specific to <code>GradientView</code>. Both will be <code>NSArray</code> and take an array of colors and locations to create the gradient.</p>

<h4>Now our <code>RNLinearGradient.h</code> file.</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "RCTView.h"
</span><span class='line'>
</span><span class='line'>@interface RNLinearGradient : RCTView
</span><span class='line'>
</span><span class='line'>@property (nonatomic, assign) NSArray *locations;
</span><span class='line'>@property (nonatomic, assign) NSArray *colors;
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<p>We import <code>RCTView</code> from React code, and then define our 2 properties.</p>

<p>Defining these properties here in this file tells React what properties to apply to the View that gets returned from our <code>view</code> function call in our <code>RNGradientViewManager</code>.</p>

<h2>Back to Swift</h2>

<p>Alright now we are back to swift. We&rsquo;ll go ahead and create a new swift file that will be the view that gets returned from the <code>view</code> function in our <code>RNGradientViewManager</code>.</p>

<p>Create a swift file called <code>RNGradientView</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import Foundation
</span><span class='line'>import GradientView
</span><span class='line'>
</span><span class='line'>@objc(RNGradientView)
</span><span class='line'>class RNGradientView : GradientView {
</span><span class='line'>  required init?(coder aDecoder: NSCoder) {
</span><span class='line'>    fatalError("init(coder:) has not been implemented")
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll import our <code>GradientView</code> library, and we&rsquo;ll create a class that inherits from it. Previously in my Objective-C tutorial we implemented the <code>addSubviews</code> call however here we&rsquo;ll implement things a bit different and have the view that gets returned the actual <code>GradientView</code>.</p>

<p>The whole <code>required init?(coder aDecoder: NSCoder)</code> part was autogenerated by XCode, it&rsquo;s all magic to me.</p>

<p>Now lets add an init for the frame. The frame is the <code>CGRect</code> that we get given. It tells us our origin <code>x,y</code> and also the size <code>width,height</code> of our view.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@objc(RNGradientView)
</span><span class='line'>class RNGradientView : GradientView {
</span><span class='line'>  
</span><span class='line'>  override init(frame: CGRect) {
</span><span class='line'>    super.init(frame: frame);
</span><span class='line'>    self.frame = frame;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  required init?(coder aDecoder: NSCoder) {
</span><span class='line'>    fatalError("init(coder:) has not been implemented")
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We call <code>super.init</code> with our frame, and then also assign <code>self.frame = frame</code>. Remember because we inherited from <code>GradientView</code> the <code>self</code> basically refers to <code>GradientView</code> so when we want to manipulate the <code>GradientView</code> we simply manipulate our <code>self</code>.</p>

<p>Lets add some setters now. We defined 2 different properties up above <code>locations</code> and <code>colors</code>. We now need to create our setters so we can receive the values and set them.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@objc(RNGradientView)
</span><span class='line'>class RNGradientView : GradientView {
</span><span class='line'>  
</span><span class='line'>  override init(frame: CGRect) {
</span><span class='line'>    super.init(frame: frame);
</span><span class='line'>    self.frame = frame;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  required init?(coder aDecoder: NSCoder) {
</span><span class='line'>    fatalError("init(coder:) has not been implemented")
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  func setLocations(locations: NSArray) {
</span><span class='line'>    self.locations = locations.map({ return $0 as! CGFloat});
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  func setColors(colors: NSArray) {
</span><span class='line'>    self.colors = colors.map({return RCTConvert.UIColor($0)})
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Our <code>locations</code> is an <code>NSArray</code> of various values, they are sent over from the JavaScript world like so.</p>

<p><code>&lt;LinearGradient locations={[0.2, 1]} /&gt;</code>, however they will be a mix of <code>doubles</code> and <code>integers</code> but we want everything as a <code>CGFloat</code> which is what <code>GradientView</code> is expecting.</p>

<p>From a JavaScript world you may be used to functional programming, we <code>map</code> over the array which will return a new array. Then we cast whatever values <code>double</code> or <code>integer</code>, etc as <code>CGFloat</code> and set that on <code>self.locations</code>.</p>

<p>Then for <code>colors</code> we&rsquo;ll do something similar. However in our JavaScript world we use the handy <code>processColors</code> provided to use by React. Which will process arbitrary <code>hex</code>, <code>rgb</code>, color names, and others into a value that can easily be passed over the bridge.</p>

<p>The JavaScript code could look something like <code>&lt;LinearGradient colors={['red', 'rgb(255,100,50)']} /&gt;</code>.</p>

<p>We take advantage of the <code>RCTConvert</code> from React which gives us a bunch of handy ways to convert arbitrary values into other values. In our case <code>GradientView</code> expects <code>UIColor</code>s in the shape of an array. So we can once again <code>map</code> over our array of values and pass them into <code>RCTConvert.UIColor</code>.</p>

<h2>Fix Our Manager</h2>

<p>Remember we just left our Manager to return a boring ole <code>UIView</code>, lets go fix it up to return our <code>RNGradientView</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import Foundation
</span><span class='line'>
</span><span class='line'>@objc(RNLinearGradientSwift)
</span><span class='line'>class RNGradientViewManager : RCTViewManager {
</span><span class='line'>  override func view() -&gt; UIView! {
</span><span class='line'>    return RNGradientView();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>That sure was hard :)</p>

<h2>JavaScript code</h2>

<p>We will need to write some JavaScript code but it should be pretty harmless.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import React, { requireNativeComponent, processColor } from 'react-native';
</span><span class='line'>let RNLinearGradient = requireNativeComponent('RNLinearGradientSwift', LinearGradient);
</span><span class='line'>
</span><span class='line'>class LinearGradient extends React.Component {
</span><span class='line'>  render() {
</span><span class='line'>    let { colors, ...otherProps } = this.props;
</span><span class='line'>    return &lt;RNLinearGradient {...otherProps} colors={processColor(colors)} /&gt;;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>LinearGradient.propTypes = {
</span><span class='line'>  colors: React.PropTypes.array.isRequired,
</span><span class='line'>  locations: React.PropTypes.array,
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>export default LinearGradient;</span></code></pre></td></tr></table></div></figure>


<p>We bring in <code>React</code>, and our <code>requireNativeComponent</code> as well as <code>processColor</code> from React Native.</p>

<p>We create our <code>RNLinearGradient</code> component that we render, and as you can see once again there is our <code>RNLinearGradientSwift</code> that was externalized in our <code>RNGradientViewManager</code> as <code>RNLinearGradientSwift</code>.</p>

<p>We specify our <code>propTypes</code> as arrays.</p>

<p>Then we can pull of <code>colors</code> from <code>this.props</code>, and we call <code>processColor</code> with the array which will automatically map over and return a new array of all processed colors that will work nicely with the <code>RCTConvert.UIColor</code> call.</p>

<h2>HOW DO I USE THIS THING?</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    &lt;LinearGradient 
</span><span class='line'>      style={styles.gradient} 
</span><span class='line'>      locations={[0, 1.0]} 
</span><span class='line'>      colors={['#5ED2A0', '#339CB1']}
</span><span class='line'>    /&gt;</span></code></pre></td></tr></table></div></figure>


<p>To use we simply define some values. <code>locations</code> at <code>[0,1]</code> will specify the first color at 0 position and the second color at the end which is 1.
This can take more than just 2 colors and locations, it will take any number of colors and locations.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    &lt;LinearGradient 
</span><span class='line'>      style={styles.gradient} 
</span><span class='line'>      locations={[0, .5, 1.0]} 
</span><span class='line'>      colors={['#5ED2A0', 'red', '#339CB1']}
</span><span class='line'>    /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Our gradient style is just postioned absolutely so it is basically covering the background as a gradient.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  gradient: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0,
</span><span class='line'>    bottom: 0,
</span><span class='line'>    right: 0,
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h2>DONE</h2>

<p>Awesome, we&rsquo;re done! You can check the full code up here <a href="https://github.com/asamiller/react-native-gradient">https://github.com/asamiller/react-native-gradient</a>. Yes it&rsquo;s not on my github repo, it&rsquo;s on a friends repo which we collaborated on together. Deal with it.</p>

<p><img src="http://i.imgur.com/TsOMRom.png" title="Gradients are neatoooo" ></p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native - How to Bridge an Objective-C View Component]]></title>
		
		<link href="http://browniefed.com/blog/react-native-how-to-bridge-an-objective-c-view-component/"/>
		<updated>2015-11-24T14:15:00-08:00</updated>
		<id>http://browniefed.com/blog/react-native-how-to-bridge-an-objective-c-view-component</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>I am not an Objective-C developer so some of the things I say here may be wrong, so tell me if I&rsquo;m wrong!
React Native is young enough that some cool existing native components need to still be bridged to take advantage of.
There is plenty of information out there about bridging modules, and view components.</p>

<p>Here are a fiew</p>

<ul>
<li><a href="http://moduscreate.com/leverage-existing-ios-views-react-native-app/">Leverage Existing iOS Views In Your React Native App</a></li>
<li><a href="http://brentvatne.ca/react-native-view-component-1/">React Native View Components (&frac12;)</a></li>
<li><a href="http://brentvatne.ca/react-native-view-component-2/">React Native View Components (2/2)</a></li>
<li><a href="http://brentvatne.ca/packaging-react-native-component/">Packaging a React Native component</a></li>
<li><a href="http://facebook.github.io/react-native/docs/native-components-ios.html#content">Native UI Components &ndash; React Native Documentation</a></li>
</ul>


<p>Some of these are more up to date and in depth and others lesser so.</p>

<h2>What?</h2>

<p><img src="http://i.imgur.com/GFisosN.gif" title="NyanNyan Needs Performance" ></p>

<!-- more -->


<h2>What are we bridging?</h2>

<p>We are going to do a very basic bridge of <a href="https://github.com/Flipboard/FLAnimatedImage">FLAnimatedImage</a>.
Basically it&rsquo;s a performant component to render animated gifs.</p>

<p>Straight from their README.</p>

<p>FLAnimatedImage is a performant animated GIF engine for iOS:</p>

<ul>
<li>Plays multiple GIFs simultaneously with a playback speed comparable to desktop browsers</li>
<li>Honors variable frame delays</li>
<li>Behaves gracefully under memory pressure</li>
<li>Eliminates delays or blocking during the first playback loop</li>
<li>Interprets the frame delays of fast GIFs the same way modern browsers do</li>
</ul>


<h2>Creating a Component</h2>

<p>I tend to like to make my component as an application first and then I&rsquo;ll bust it out into a separate component. I already did that, so we&rsquo;ll just focus on the real process.</p>

<p>To do that we&rsquo;ll create a library.</p>

<p>In XCode go to <code>File &gt; New &gt; Project</code> and select <code>Static Library</code></p>

<p>Like so</p>

<p><img src="http://i.imgur.com/xFBkJfD.png" title="Stolen from Brent Vatne" ></p>

<p>Save that somewhere and call it <code>RNFLAnimatedImage</code> so that you can follow along with the tutorial.</p>

<h2>External Dependencies</h2>

<p>In our case we are depending on the FLAnimatedImage library. We have a few different choices, using pods?, using Carthage?, or just copy and pasting.
For the sake of this we&rsquo;re going to copy and paste. We&rsquo;ll get into this when the tutorial actually starts.</p>

<p>I essentially cloned the repo, and copied over the necessary files. You then go through the usual process of adding a library to an XCode project.
You can read about linking libraries here <a href="http://facebook.github.io/react-native/docs/linking-libraries-ios.html#content">http://facebook.github.io/react-native/docs/linking-libraries-ios.html#content</a>.</p>

<p>Basically do this.</p>

<p><img src="http://i.imgur.com/AfCMdHF.png" title="Find the FLAnimatedImage.xcodeporj" ></p>

<p>Then do this</p>

<p><img src="http://i.imgur.com/BySd9oD.png" title="Press + and add the framework" ></p>

<h2>Manager vs View</h2>

<p>The Manager is the orchestrator of this particular view we are bridging. It&rsquo;s essentially a singleton (there is just one of them) that when asked will produce a new view to use of whatever kind you define. In our case we have an <code>RNFLAnimatedImageManager</code> that when asked will create an <code>RNFLAnimateImage</code> which will create and setup our <code>FLAnimatedImage</code> Objective-C component.</p>

<p>The Manager is also where we setup the module bridge, and declare what sort of properties we need, event callbacks, and additional constants to export if we need any.</p>

<p>The View portion is just that, the View. This is what will be instantiated and hook into some lifecycle events so you can manipulate the Objective-C world.</p>

<p>Each View will need to do different things during these lifecycle events, it&rsquo;s up to you to implement them and figure out what exactly needs to be handled for the component that you are bridging.</p>

<h2>Life Cycles/Initializer in the Objective C World</h2>

<p>The main life cycle we need to implement is <code>- (void)layoutSubviews</code>.
The other non-lifecycle method that is important is <code>- (instancetype)initWithEventDispatcher:(RCTEventDispatcher *)eventDispatcher</code>.</p>

<p>Additional life cycle calls are <code>- (void)insertReactSubview:(UIView *)view atIndex:(NSInteger)atIndex</code> and <code>- (void)removeReactSubview:(UIView *)subview</code> but we won&rsquo;t talk about those.</p>

<p>The <code>layoutSubviews</code> method gives us an arbitrary hook to control the current view component. You can manipulate the view, add subviews, or add sublayers. In our case we&rsquo;ll add the FLAnimatedImage as a subview.</p>

<p>The <code>initWithEventDispatcher</code> method allows us to handle initialization of the View and additionally save off our <code>eventDispatcher</code> which means we can send messages back to the JavaScript world.</p>

<p>So when you see people sending back callback functions to the native world this is what is sending back the events. So things like <code>onLoad</code>, <code>onVideoProgress</code>, etc you would use this event dispatcher to send out a <code>onLoad</code> or <code>onVideoProgress</code> event name with a payload of data.</p>

<h2>Specifying callbacks</h2>

<p>In a manager file you would specify something like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSArray *) customDirectEventTypes {
</span><span class='line'>  return @[
</span><span class='line'>           @"onFrameChange"
</span><span class='line'>          ];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>In our case we may want to listen for when the GIF frame index changes.</p>

<p>We send stuff from Objective-C world to JavaScript like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  [_eventDispatcher sendInputEventWithName:@"onFrameChange" body:@{
</span><span class='line'>                                                                   @"currentFrameIndex":[NSNumber numberWithUnsignedInteger:[object currentFrameIndex]],
</span><span class='line'>                                                                   @"frameCount": [NSNumber numberWithUnsignedInteger:[_image frameCount]],
</span><span class='line'>                                                                   @"target": self.reactTag
</span><span class='line'>                                                                   }];</span></code></pre></td></tr></table></div></figure>


<p>Then in our JavaScript world we can do this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>      &lt;FLAnimatedImage 
</span><span class='line'>        style= 
</span><span class='line'>        src={this.state.url}
</span><span class='line'>        resizeMode={this.state.resizeMode} 
</span><span class='line'>        onFrameChange={(e) =&gt; console.log(e.nativeEvent.currentFrameIndex + '/' + e.nativeEvent.frameCount)}
</span><span class='line'>      /&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Properties from ObjC to JavaScript</h2>

<p>That looks something like</p>

<p><code>RCTFLAnimatedImageManager.m</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>RCT_EXPORT_VIEW_PROPERTY(src, NSString);
</span><span class='line'>RCT_EXPORT_VIEW_PROPERTY(contentMode, NSNumber);
</span></code></pre></td></tr></table></div></figure>


<p><code>RCTFLAnimatedImage.m</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>@property (nonatomic, assign) NSString *src;
</span><span class='line'>@property (nonatomic, assign) NSNumber *contentMode;
</span></code></pre></td></tr></table></div></figure>


<p>In the JavaScript world when we render our component whatever the <code>src</code> prop is will be put there.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;RNFlAnimatedImage src="http://someanimated.gif" resizeMode={1} /&gt;
</span></code></pre></td></tr></table></div></figure>


<p>In the JavaScript world we do need to define our <code>PropTypes</code> on the component.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  propTypes: {
</span><span class='line'>    /*
</span><span class='line'>      native only
</span><span class='line'>    */
</span><span class='line'>    contentMode: PropTypes.number,
</span><span class='line'>    /*
</span><span class='line'>
</span><span class='line'>    */
</span><span class='line'>    src: PropTypes.string,
</span><span class='line'>    resizeMode: PropTypes.string,
</span><span class='line'>    onFrameChange: PropTypes.func
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<h2>Exporting Constants</h2>

<p>Sometimes there are strings, numbers, enums, etc in the Objective-C world that you may want to use in the JavaScript world. To do this we use the <code>constantsToExport</code> method in our manager.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSDictionary *) constantsToExport {
</span><span class='line'>  return @{
</span><span class='line'>           @"ScaleAspectFit": @(UIViewContentModeScaleAspectFit),
</span><span class='line'>           @"ScaleAspectFill": @(UIViewContentModeScaleAspectFill),
</span><span class='line'>           @"ScaleToFill": @(UIViewContentModeScaleToFill)
</span><span class='line'>          };
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>We export some <code>NSIntegers</code> (converting them to <code>NSNumbers</code> with the <code>@</code>, thanks Google) and this will get put onto React Native <code>NativeModules</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>React.NativeModules.RNFLAnimatedImageManager;
</span><span class='line'>/*
</span><span class='line'>  {
</span><span class='line'>    ScaleToFill: 0,
</span><span class='line'>    ScaleAspectFit: 1,
</span><span class='line'>    ScaleAspectFill: 2
</span><span class='line'>  }
</span><span class='line'>*/</span></code></pre></td></tr></table></div></figure>


<h2>Stop?</h2>

<p>Alright that was all a preface to show you the little bits and areas that you can bridge. Maybe you just needed syntax, maybe you wondering about it&rsquo;s capabilities. Either way if you got enough information then no need to go any further. However I encourage you to read on.</p>

<h2>Tutorial Start</h2>

<p>So we have the empty <code>RNFLAnimatedImage</code> project you created right? Go do it now if you haven&rsquo;t already.</p>

<p>The first thing we are going to need to do is setup our <code>Header Search Paths</code> and add React to it.
We&rsquo;ll need to add various locations to tell Objective-C to look for all the <code>.h</code> and <code>.m</code> files.</p>

<p>add these 5</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(inherited)
</span><span class='line'>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include
</span><span class='line'>$(SRCROOT)/../../React
</span><span class='line'>$(SRCROOT)/../react-native/React
</span><span class='line'>$(SRCROOT)/node_modules/react-native/React</span></code></pre></td></tr></table></div></figure>


<p>It should look something like.</p>

<p><img src="http://i.imgur.com/GFfRgNV.png" title="Header Search Paths for all the Reacts" ></p>

<p><code>FLAnimatedImage</code> ships as a framework, I wasn&rsquo;t able to import the required <code>.h</code> and <code>.m</code> files until I told XCode where to look for <code>FLAnimatedImage</code>.
So lets set that up, add <code>$(SRCROOT)/FLAnimatedImage</code> the <code>Framework Search Paths</code> right above <code>Header Search Paths</code></p>

<p><img src="http://i.imgur.com/gkkZJ4d.png" title="I have no clue if this is correct" ></p>

<h2>Add Manager Files</h2>

<p>In creating this <code>RNFLAnimatedImage.m/.h</code> were created but lets create our manager files now.
Just right click on the folder select &ldquo;New File&rdquo; and create a <code>.m</code> and name in <code>RNFLAnimatedImageManager.m</code> , same for the <code>.h</code></p>

<p><img src="http://i.imgur.com/jEQdrce.png" title="Sponsored by H and M" ></p>

<p>We need to add our new manager files to our compile source.</p>

<p><img src="http://i.imgur.com/6Kzve8u.png" title="Compile sources, what are they good for" ></p>

<h2>RNFLAnimatedImageManager.h</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "RCTViewManager.h"
</span><span class='line'>
</span><span class='line'>@interface RNFLAnimatedImageManager : RCTViewManager
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it, we just have our <code>interface</code> we called <code>RNFLAnimatedImageManager</code> and inherit from <code>RCTViewManager</code> which is provided by React.</p>

<h2>RNFLAnimatedImageManager.m</h2>

<p>First we need to import some stuff</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;Foundation/Foundation.h&gt;
</span><span class='line'>#import "RCTBridge.h"
</span><span class='line'>#import "RNFLAnimatedImageManager.h"
</span><span class='line'>#import "RNFLAnimatedImage.h"
</span></code></pre></td></tr></table></div></figure>


<p>We bring in the bridging mechanism from React, the <code>Manager.h</code> file, and additionally the <code>.h</code> for the view we&rsquo;re bridging.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@implementation RNFLAnimatedImageManager
</span><span class='line'>
</span><span class='line'>RCT_EXPORT_MODULE();
</span><span class='line'>
</span><span class='line'>@synthesize bridge = _bridge;
</span></code></pre></td></tr></table></div></figure>


<p>Inside our implementation we call <code>RCT_EXPORT_MODULE()</code> that tells React we are exporting a module.</p>

<p>The <code>@synthesize bridge</code> stuff is declaring that we want to just auto generate some getters and setters for our bridge.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UIView *)view
</span><span class='line'>{
</span><span class='line'>  return [[RNFLAnimatedImage alloc] initWithEventDispatcher:self.bridge.eventDispatcher];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This is called to create a new view. We are allocating our view <code>RNFLAnimatedImage</code> and initializing it with the <code>eventDispatcher</code> so we can communicate back to the JavaScript world.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (dispatch_queue_t)methodQueue
</span><span class='line'>{
</span><span class='line'>  return dispatch_get_main_queue();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This has something to do with dispatching :). I think it says that when we dispatch it should go on the main queue?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RCT_EXPORT_VIEW_PROPERTY(src, NSString);
</span><span class='line'>RCT_EXPORT_VIEW_PROPERTY(contentMode, NSNumber);</span></code></pre></td></tr></table></div></figure>


<p>Define some properties to bridge.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSArray *) customDirectEventTypes {
</span><span class='line'>  return @[
</span><span class='line'>           @"onFrameChange"
</span><span class='line'>          ];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Define some function callback/events we can dispatch.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSDictionary *) constantsToExport {
</span><span class='line'>  return @{
</span><span class='line'>           @"ScaleAspectFit": @(UIViewContentModeScaleAspectFit),
</span><span class='line'>           @"ScaleAspectFill": @(UIViewContentModeScaleAspectFill),
</span><span class='line'>           @"ScaleToFill": @(UIViewContentModeScaleToFill)
</span><span class='line'>          };
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>Finally we define some constants to export and end our implementation.</p>

<p>Link to the file on github <a href="https://github.com/browniefed/react-native-flanimatedimage/blob/master/RNFLAnimatedImage/RNFLAnimatedImage/RNFLAnimatedImageManager.m">https://github.com/browniefed/react-native-flanimatedimage/blob/master/RNFLAnimatedImage/RNFLAnimatedImage/RNFLAnimatedImageManager.m</a>.</p>

<h2>RNFLAnimatedImage.h</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "RCTEventDispatcher.h"
</span><span class='line'>#import "FLAnimatedImage/FLAnimatedImage.h"
</span><span class='line'>
</span><span class='line'>@class RCTEventDispatcher;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>@interface RNFLAnimatedImage : UIView
</span><span class='line'>
</span><span class='line'>@property (nonatomic, assign) NSString *src;
</span><span class='line'>@property (nonatomic, assign) NSNumber *contentMode;
</span><span class='line'>
</span><span class='line'>- (instancetype)initWithEventDispatcher:(RCTEventDispatcher *)eventDispatcher NS_DESIGNATED_INITIALIZER;
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>We import our event dispatcher, and tell the compiler that the class <code>RCTEventDispatcher</code> will be defined.
We create our interface, give it the name <code>RNFLAniamtedImage</code> and inherit from the base <code>UIView</code>.</p>

<p>We add our properties, don&rsquo;t worry about the <code>nonatomic</code> stuff, if you want to know go le google it.</p>

<p>Finally we define our initWithEventDispatcher method that our <code>Manager</code> initialized with. The <code>NS_DESIGNATED_INITIALIZER</code> is to tell the compiler that this is our initializer vs the typical <code>init</code>.</p>

<h2>RNFlAnimatedImage.m</h2>

<p>Alright this will be where all of our bridging work comes into play. Read through the full source here <a href="https://github.com/browniefed/react-native-flanimatedimage/blob/master/RNFLAnimatedImage/RNFLAnimatedImage/RNFLAnimatedImage.m">https://github.com/browniefed/react-native-flanimatedimage/blob/master/RNFLAnimatedImage/RNFLAnimatedImage/RNFLAnimatedImage.m</a>.</p>

<p>So first we need to import stuff and define our basic implementation</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;Foundation/Foundation.h&gt;
</span><span class='line'>#import "FLAnimatedImage/FLAnimatedImage.h"
</span><span class='line'>
</span><span class='line'>#import "RCTBridgeModule.h"
</span><span class='line'>#import "RCTEventDispatcher.h"
</span><span class='line'>#import "UIView+React.h"
</span><span class='line'>
</span><span class='line'>#import "RNFLAnimatedImage.h"
</span><span class='line'>
</span><span class='line'>@implementation RNFLAnimatedImage : UIView  {
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t worry too much about what&rsquo;s getting imported. Most of them are just so React can do it&rsquo;s thing.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>@implementation RNFLAnimatedImage : UIView  {
</span><span class='line'>
</span><span class='line'>  RCTEventDispatcher *_eventDispatcher;
</span><span class='line'>  FLAnimatedImage *_image;
</span><span class='line'>  FLAnimatedImageView *_imageView;
</span><span class='line'>  
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>We now define our instance variables that we&rsquo;ll assign inside of this implementation. We setup our <code>eventDispatcher</code>, the <code>image</code> and <code>imageView</code> with their specific types.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (instancetype)initWithEventDispatcher:(RCTEventDispatcher *)eventDispatcher
</span><span class='line'>{
</span><span class='line'>  if ((self = [super init])) {
</span><span class='line'>    _eventDispatcher = eventDispatcher;
</span><span class='line'>    _imageView = [[FLAnimatedImageView alloc] init];
</span><span class='line'>    
</span><span class='line'>    [_imageView addObserver:self forKeyPath:@"currentFrameIndex" options:0 context:nil];
</span><span class='line'>  }
</span><span class='line'>    
</span><span class='line'>    return self;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This is our initializer that we had defined. It receives <code>eventDispatcher</code> as the only argument. We then save it off to the <code>eventDispatcher</code> variable we create up above. Then create a new <code>FLAnimatedImageView</code> and save that off. The <code>addObserver</code> we&rsquo;ll get into later, but this is going to allow us to asynchronously hook into the <code>currentFrameIndex</code> of our animated gif and call the callback.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#pragma mark - React View Management
</span><span class='line'>
</span><span class='line'>- (void)insertReactSubview:(UIView *)view atIndex:(NSInteger)atIndex
</span><span class='line'>{
</span><span class='line'>    RCTLogError(@"image cannot have any subviews");
</span><span class='line'>    return;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)removeReactSubview:(UIView *)subview
</span><span class='line'>{
</span><span class='line'>    RCTLogError(@"image cannot have any subviews");
</span><span class='line'>    return;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>- (void)layoutSubviews
</span><span class='line'>{
</span><span class='line'>  [super layoutSubviews];
</span><span class='line'>  _imageView.frame = self.bounds;
</span><span class='line'>  [self addSubview:_imageView];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>These are the important React added lifecylce methods. The <code>insertReactSubview</code> and <code>removeReactSubview</code> is how we would go about allowing <code>children</code>.</p>

<p>The <code>layoutSubviews</code> is the call that gives us the ability to add in our <code>FLAnimatedImageView</code> that we created into the <code>RNFLAnimatedImage</code> that we are creating. This method is going to be the one that is going to be mostly a custom implementation depending on what components you end up bridging.</p>

<p>The other import thing to call out is <code>self.bounds</code> this is a <code>CGRect</code> that contains <code>x,y</code> and <code>width/height</code> that is going to be provided from the <code>style</code> that is defined in the JavaScript world!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)setSrc:(NSString *)src
</span><span class='line'>{
</span><span class='line'>  if (![src isEqual:_src]) {
</span><span class='line'>    _src = [src copy];
</span><span class='line'>    [self reloadImage];
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)setContentMode:(NSNumber *)contentMode
</span><span class='line'>{
</span><span class='line'>  if(![contentMode isEqual:_contentMode]) {
</span><span class='line'>    _contentMode = [contentMode copy];
</span><span class='line'>    [self reloadImage];
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>These are setters that we hook into so that when a <code>setState</code> happens and a re-render is triggered in the JavaScript world these get called. We check if our <code>src</code> is different and or if our <code>contentMode</code> is different, if it is we set our instance variables to the new values and call <code>reloadImage</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void)reloadImage {
</span><span class='line'>  _image = [FLAnimatedImage animatedImageWithGIFData:[NSData dataWithContentsOfURL:[NSURL URLWithString:_src]]];
</span><span class='line'>  _imageView.contentMode = [_contentMode integerValue];
</span><span class='line'>  _imageView.animatedImage = _image;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Our reload image is more of a setup/modify image. We set our <code>image</code> to be the <code>FLAnimatedImage</code> with the gif data from a URL. We pass our <code>src</code> in there which comes from the bridged value from the JavaScript world.</p>

<p>We setup our contentMode on the <code>imageView</code> then set our <code>imageView.animatedImage</code> to be the <code>image</code> of the url.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context {
</span><span class='line'>  if (object == _imageView) {
</span><span class='line'>    if ([keyPath isEqualToString:@"currentFrameIndex"]) {
</span><span class='line'>      [_eventDispatcher sendInputEventWithName:@"onFrameChange" body:@{
</span><span class='line'>                                                                       @"currentFrameIndex":[NSNumber numberWithUnsignedInteger:[object currentFrameIndex]],
</span><span class='line'>                                                                       @"frameCount": [NSNumber numberWithUnsignedInteger:[_image frameCount]],
</span><span class='line'>                                                                       @"target": self.reactTag
</span><span class='line'>                                                                       }];
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>When observers get setup (like we did in the initializer) the <code>observerveValueForKeyPath</code> method will be called with the information about the thing that changed.
In our case <code>object</code> was setup to be our <code>imageView</code> and the <code>keyPath</code> was <code>currentFrameIndex</code>.</p>

<p>We do some checking to make sure that the <code>object</code> is in fact our <code>imageView</code>, and that the <code>keyPath</code> we are dealing with is the <code>currentFrameIndex</code>. If it is this when we send our event to be dispatched. It just so happens to be named <code>onFrameChange</code> and our <code>body</code> can be custom crafted and will be ultimately translated into JSON for us. We pass back the <code>currentFrameIndex</code> and the total <code>frameCount</code> as well as the React Component we are dealing with.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)removeFromSuperview
</span><span class='line'>{
</span><span class='line'>    
</span><span class='line'>    [_imageView removeObserver:self forKeyPath:@"currentFrameIndex"];
</span><span class='line'>    _eventDispatcher = nil;
</span><span class='line'>    _image = nil;
</span><span class='line'>    _imageView = nil;
</span><span class='line'>    [super removeFromSuperview];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Finally the <code>removeFromSuperview</code> function is called. This is the equivalence of <code>componentWillUnmount</code> in the React JavaScript world. Here we clean up the observer, as well as the other things we have created.</p>

<p>You are now done with Objective-C! Check out the full source code here <a href="https://github.com/browniefed/react-native-flanimatedimage/blob/master/RNFLAnimatedImage/RNFLAnimatedImage/RNFLAnimatedImage.m">https://github.com/browniefed/react-native-flanimatedimage/blob/master/RNFLAnimatedImage/RNFLAnimatedImage/RNFLAnimatedImage.m</a>.</p>

<h2>FLAnimatedImage.js</h2>

<p>Now we are back in our JavaScript world. We&rsquo;ve done the hard part.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var { requireNativeComponent, PropTypes, NativeModules, } = React;
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  ScaleToFill,
</span><span class='line'>  ScaleAspectFit,
</span><span class='line'>  ScaleAspectFill
</span><span class='line'>} = NativeModules.RNFLAnimatedImageManager;
</span><span class='line'>
</span><span class='line'>var MODES = {
</span><span class='line'>  'stretch': ScaleToFill,
</span><span class='line'>  'contain': ScaleAspectFit,
</span><span class='line'>  'cover': ScaleAspectFill
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var FLAnimatedImage = React.createClass({
</span><span class='line'>  propTypes: {
</span><span class='line'>    /*
</span><span class='line'>      native only
</span><span class='line'>    */
</span><span class='line'>    contentMode: PropTypes.number,
</span><span class='line'>    /*
</span><span class='line'>
</span><span class='line'>    */
</span><span class='line'>    src: PropTypes.string,
</span><span class='line'>    resizeMode: PropTypes.string,
</span><span class='line'>    onFrameChange: PropTypes.func
</span><span class='line'>  },
</span><span class='line'>  render() {
</span><span class='line'>    var contentMode = MODES[this.props.resizeMode] || MODES.stretch;
</span><span class='line'>    return (
</span><span class='line'>            &lt;RNFLAnimatedImage 
</span><span class='line'>                {...this.props} 
</span><span class='line'>                contentMode={contentMode}
</span><span class='line'>            /&gt;
</span><span class='line'>          );
</span><span class='line'>  },
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var RNFLAnimatedImage = requireNativeComponent('RNFLAnimatedImage', FLAnimatedImage);
</span><span class='line'>
</span><span class='line'>module.exports = FLAnimatedImage;</span></code></pre></td></tr></table></div></figure>


<p>The important parts to call out is that all values being passed to the component/native world need to have a <code>PropType</code> specified! If you noticed something a bit weird. We create a class called <code>FLAnimatedImage</code> which we call to <code>requireNativeComponent</code> that creates <code>RNFLAnimatedImage</code> which then <code>FLAnimatedImage</code> renders. Weird cyclic thing, but ultimately it allows us to tell React what component our class is going to need to be rendered.</p>

<p>The <code>MODES</code> thing is just so we can map a nice string the user can give us to one of the constants that we exported from our Objective-C world.</p>

<h2>DONE!</h2>

<p>Hey look you did it. We got through the weird brackted world of Objective-C. To use it we require it and pass in our props.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>      &lt;FLAnimatedImage 
</span><span class='line'>        style={{flex: 1}} 
</span><span class='line'>        src="http://raphaelschaad.com/static/nyan.gif"
</span><span class='line'>        resizeMode="contain" 
</span><span class='line'>        onFrameChange={(e) =&gt; console.log(e.nativeEvent.currentFrameIndex + '/' + e.nativeEvent.frameCount)}
</span><span class='line'>      /&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Final Code</h2>

<p>The code is all up on github, check the repo out here <a href="https://github.com/browniefed/react-native-flanimatedimage">https://github.com/browniefed/react-native-flanimatedimage</a> and the folder where the Objective-C code is at is right here <a href="https://github.com/browniefed/react-native-flanimatedimage/tree/master/RNFLAnimatedImage/RNFLAnimatedImage">https://github.com/browniefed/react-native-flanimatedimage/tree/master/RNFLAnimatedImage/RNFLAnimatedImage</a>.</p>

<p>Now we have a bridge AnimatedGif component at our exposure.</p>

<p><img src="http://i.imgur.com/GFisosN.gif" title="Now that is stuck in your head" ></p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native - How to create Twitter exploding hearts]]></title>
		
		<link href="http://browniefed.com/blog/react-native-how-to-create-twitter-exploding-hearts/"/>
		<updated>2015-11-07T08:55:00-08:00</updated>
		<id>http://browniefed.com/blog/react-native-how-to-create-twitter-exploding-hearts</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>So we&rsquo;re going to build this exploding heart, except just know Twitter kind of cheated. Not really but they used an image and played each frame adjusting <code>background-position</code> so it looked animated. Okay not cheated they used a really smart technique but what&rsquo;s the fun in doing that when we can build it for real!</p>

<p>I&rsquo;ve already built a Firework concept here <a href="http://browniefed.com/blog/2015/08/29/react-native-animated-with-react-art-firework-show/">http://browniefed.com/blog/2015/08/29/react-native-animated-with-react-art-firework-show/</a> and about Hearts here <a href="http://browniefed.com/blog/2015/09/07/react-native-periscope-hearts-animation/">http://browniefed.com/blog/2015/09/07/react-native-periscope-hearts-animation/</a> now we just need to bring them together.</p>

<p>For the record this is what theirs looks like here <a href="http://i.imgur.com/3a8PiSY.png">http://i.imgur.com/3a8PiSY.png</a></p>

<h2>What are we building</h2>

<p><img src="http://i.imgur.com/lMOxqIL.gif" title="So not lazy like Twitter" ></p>

<!-- more -->


<h2>Concept</h2>

<p>Rather than iterating over 28 separate image frames what we&rsquo;re going to do instead is make some pseudo-keyframe-animations. We&rsquo;ll use <code>Animated</code> of course. We&rsquo;ll define our range from <code>0</code> to <code>28</code>. Meaning we&rsquo;ll have 28 frames to deal with.</p>

<p>This makes the math easy, because we can walk through each frame, and describe what the animation should look like for each frame.</p>

<p>We could create separate animated values for each property and coordinate the animation with <code>Animated.sequence</code> and <code>Animated.parallel</code> but I prefer interpolation. YMMV</p>

<h2>Setup</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  View,
</span><span class='line'>  Dimensions,
</span><span class='line'>  TouchableWithoutFeedback,
</span><span class='line'>  Animated
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var Art = require('ReactNativeART');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  Surface,
</span><span class='line'>  Group,
</span><span class='line'>  Shape,
</span><span class='line'>  Path
</span><span class='line'>} = Art;
</span><span class='line'>
</span><span class='line'>var AnimatedShape = Animated.createAnimatedComponent(Shape);
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width: deviceWidth,
</span><span class='line'>  height: deviceHeight
</span><span class='line'>} = Dimensions.get('window');
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll need to setup <code>ReactNativeArt</code> in XCode, you can check out how to do that <a href="http://browniefed.com/blog/2015/05/03/getting-react-art-running-on-react-native/">here</a>.</p>

<p>Things to call out here is we are creating a custom animated view, called <code>AnimatedShape</code>. We pass in the <code>art</code> <code>Shape</code> component into <code>Animated.createAnimatedComponent</code>. This allows us to use <code>Animated</code> values in any component.</p>

<h2>More Setup</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var HEART_SVG = "M130.4-0.8c25.4 0 46 20.6 46 46.1 0 13.1-5.5 24.9-14.2 33.3L88 153.6 12.5 77.3c-7.9-8.3-12.8-19.6-12.8-31.9 0-25.5 20.6-46.1 46-46.2 19.1 0 35.5 11.7 42.4 28.4C94.9 11 111.3-0.8 130.4-0.8"
</span><span class='line'>var HEART_COLOR = 'rgb(226,38,77,1)';
</span><span class='line'>var GRAY_HEART_COLOR = "rgb(204,204,204,1)";
</span><span class='line'>
</span><span class='line'>var FILL_COLORS = [
</span><span class='line'>  'rgba(221,70,136,1)',
</span><span class='line'>  'rgba(212,106,191,1)',
</span><span class='line'>  'rgba(204,142,245,1)',
</span><span class='line'>  'rgba(204,142,245,1)',
</span><span class='line'>  'rgba(204,142,245,1)',
</span><span class='line'>  'rgba(0,0,0,0)'
</span><span class='line'>];
</span><span class='line'>
</span><span class='line'>var PARTICLE_COLORS = [
</span><span class='line'>  'rgb(158, 202, 250)',
</span><span class='line'>  'rgb(161, 235, 206)',
</span><span class='line'>  'rgb(208, 148, 246)',
</span><span class='line'>  'rgb(244, 141, 166)',
</span><span class='line'>  'rgb(234, 171, 104)',
</span><span class='line'>  'rgb(170, 163, 186)'
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>More setup here. We create our heart SVG path to render, and setup a bunch of colors that we will use in our animations later. We need to set stuff up as <code>rgb</code> or <code>rgba</code> so that <code>Animated</code> can interpolate it correctly as at the moment it cannot do hex values.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>function getXYParticle(total, i, radius) {
</span><span class='line'>  var angle = ( (2*Math.PI) / total ) * i;
</span><span class='line'>
</span><span class='line'>  var x = Math.round((radius*2) * Math.cos(angle - (Math.PI/2)));
</span><span class='line'>  var y = Math.round((radius*2) * Math.sin(angle - (Math.PI/2)));
</span><span class='line'>  return {
</span><span class='line'>    x: x,
</span><span class='line'>    y: y
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function getRandomInt(min, max) {
</span><span class='line'>  return Math.floor(Math.random() * (max - min)) + min;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function shuffleArray(array) {
</span><span class='line'>    for (var i = array.length - 1; i &gt; 0; i--) {
</span><span class='line'>        var j = Math.floor(Math.random() * (i + 1));
</span><span class='line'>        var temp = array[i];
</span><span class='line'>        array[i] = array[j];
</span><span class='line'>        array[j] = temp;
</span><span class='line'>    }
</span><span class='line'>    return array;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Yes more setup. <code>getXYParticle</code> is a function I&rsquo;ve modified from the fireworks particle blog post I wrote. This essentially distributes a random number of particles around a circle. This is what we will use for the little particles that blow up.</p>

<p>The <code>getRandomInt</code> is pretty self explanatory, but it just returns a random number and we&rsquo;ll use it to create some variance.</p>

<p><code>shuffleArray</code> also just shuffles things in an array, we&rsquo;ll use this to achieve random color effects later.</p>

<h2>Blank Canvas</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ExplodingHearts = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      animation: new Animated.Value(0) 
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  explode: function() {
</span><span class='line'>    Animated.timing(this.state.animation, {
</span><span class='line'>      duration: 1500,
</span><span class='line'>      toValue: 28
</span><span class='line'>    }).start(() =&gt; {
</span><span class='line'>      this.state.animation.setValue(0);
</span><span class='line'>      this.forceUpdate();
</span><span class='line'>    }.bind(this));
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;TouchableWithoutFeedback onPress={this.explode} style={styles.container}&gt; 
</span><span class='line'>          &lt;View&gt;
</span><span class='line'>            &lt;Surface width={deviceWidth} height={deviceHeight}&gt;
</span><span class='line'>            &lt;/Surface&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>        &lt;/TouchableWithoutFeedback&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>We setup a blank canvas. We need to create our initial <code>animation</code> value so we just do a <code>new Animated.Value(0)</code> in our <code>getInitialState</code>.</p>

<p>We setup a <code>TouchableWithoutFeedback</code> for the ability to use <code>onPress</code> to trigger our animation. We then setup our <code>ART</code> <code>Surface</code> to fill the screen.</p>

<p>Why are we using ART for this? Well it&rsquo;ll make our rendering and animations very efficient, we could use a bunch of <code>Views</code> for this demo but on a large scale with lots of graphics work you should use <code>ART</code></p>

<p>Our <code>explode</code> function kicks off our animation and we do it over 1.5 seconds. We will animate to 28 because that is how many &ldquo;frames&rdquo; we have.</p>

<p>Don&rsquo;t worry about the callback, that&rsquo;s just to reset the animation when it is done, and also the <code>forceUpdate</code> re-renders so we get new random values on each subsequent trigger.</p>

<h2>Render A Heart</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Surface width={deviceWidth} height={deviceHeight}&gt;
</span><span class='line'>    &lt;AnimatedShape
</span><span class='line'>      d={HEART_SVG}
</span><span class='line'>      x={0}
</span><span class='line'>      y={0}
</span><span class='line'>      scale={1}
</span><span class='line'>      fill={GRAY_HEART_COLOR}
</span><span class='line'>    /&gt;
</span><span class='line'>&lt;/Surface&gt;</span></code></pre></td></tr></table></div></figure>


<p>We just render a heart, pass in our SVG path, put it at the top left <code>0,0</code> coordinates. Scale is set to 1 and we fill it with our <code>GRAY_HEART_COLOR</code> we setup above.</p>

<h2>Talking Keyframes and Animations</h2>

<p>Before we dive in I want to explain what is about to happen. The original Twitter exploding has 28 frames. Our animation will start at <code>0</code>, and that is our default state. So we&rsquo;ll need to set everything up to default when we start <code>0</code> (initial render).</p>

<p>Then anytime from <code>1</code> to <code>28</code> we will need to design our values so that they produce the correct frame animation.</p>

<p><code>Animated</code> provides a way to interpolate. What that means is given a value, we want it to go through a formula and spit out another value. <code>Animated</code> does this via ranges, which can at times be a little inflexible and we have to hack around it&rsquo;s shortcomings to get desired effects.</p>

<p>All (well almost all) our animations will be interpolating from the single <code>this.state.animation</code> that we created earlier. This just makes it easy to comprehend and layout your animation frames. Because you can then specify that something happens at frame <code>10</code> instead of dividing <code>1/28</code> and say start at <code>0.03571428571</code>.</p>

<h2>Scale it up</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>render: function() {
</span><span class='line'>    var heart_scale = this.state.animation.interpolate({
</span><span class='line'>      inputRange: [0, .01, 6, 10, 12, 18, 28],
</span><span class='line'>      outputRange: [1, 0, .1, 1, 1.2, 1, 1],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    var heart_fill = this.state.animation.interpolate({
</span><span class='line'>      inputRange: [0, 2],
</span><span class='line'>      outputRange: [GRAY_HEART_COLOR, HEART_COLOR],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>    var heart_x = heart_scale.interpolate({
</span><span class='line'>      inputRange: [0, 1],
</span><span class='line'>      outputRange: [90, 0],
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>    var heart_y = heart_scale.interpolate({
</span><span class='line'>      inputRange: [0, 1],
</span><span class='line'>      outputRange: [75, 0],
</span><span class='line'>    })
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Alright there is a lot going on. Lets break it down.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var heart_scale = this.state.animation.interpolate({
</span><span class='line'>  inputRange: [0, .01, 6, 10, 12, 18],
</span><span class='line'>  outputRange: [1, 0, .1, 1, 1.2, 1],
</span><span class='line'>  extrapolate: 'clamp'
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>We <code>interpolate</code> on the <code>this.state.animation</code> and give it an <code>inputRange</code> and <code>outputRange</code> array. These must have the same amount of array values.</p>

<p>I talked about some weird things with <code>Animated</code> and setting up defaults. Well <code>inputRange: [0, .01], outputRange: [1, 0]</code> is the first example.</p>

<p>At 0 we want it to be fully scaled, so output at 1. However as soon as the animation is triggered we want it to be at 0. If we only specified <code>0, 1</code> as the inputRange, it would have the heart scale down from 1 to 0. So specifying the scale inputRange at <code>0 =&gt; .01</code> means it&rsquo;ll basically disappear.</p>

<p>It&rsquo;s essentially a way to make an animation not a whole frame, and or happen virtually immediately.</p>

<p>There is a slight spring in the heart. So from frame <code>10</code> to <code>12</code> it will spring up fast to <code>1.2</code> scale, and then slowly fall back from <code>1.2</code> to <code>1</code> from frames <code>12</code> to <code>18</code>.</p>

<p><code>extrapolate: 'clamp'</code> IS EXTREMELY IMPORTANT HERE. If we want it to just stay the same once it hits frame 18 and not do anything else until the end we must add the clamp. Otherwise it will continue to animate at the current stepping value, so it would scale down below 1 and we don&rsquo;t want that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var heart_fill = this.state.animation.interpolate({
</span><span class='line'>  inputRange: [0, 2],
</span><span class='line'>  outputRange: [GRAY_HEART_COLOR, HEART_COLOR],
</span><span class='line'>  extrapolate: 'clamp'
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>We have the heart hidden after frame <code>1</code>, so what this animation says is at <code>0</code> , inital render, be gray. Anytime from frame 2 and out be red, and always be read.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>    var heart_x = heart_scale.interpolate({
</span><span class='line'>      inputRange: [0, 1],
</span><span class='line'>      outputRange: [90, 0],
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>    var heart_y = heart_scale.interpolate({
</span><span class='line'>      inputRange: [0, 1],
</span><span class='line'>      outputRange: [75, 0],
</span><span class='line'>    })</span></code></pre></td></tr></table></div></figure>


<p>This is the one part where we don&rsquo;t want to base things on the key frame. Because there is no <code>transform-origin</code> like there is in CSS, the default scale will scale out to the top left.
That isn&rsquo;t what we want.</p>

<p>So to scale out to the center we need to animate the x/y while scaling, so we interpolate off the interpolate for scale. Remember we default our scale up above to 1, so we are reversing stuff here saying when the scale is scaling down from 0 to 1 adjust to 90 for x and 75 for y.</p>

<p>The 90/75 just has to deal with the current surface center.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>return (
</span><span class='line'>    &lt;Surface width={deviceWidth} height={deviceHeight}&gt;
</span><span class='line'>        &lt;AnimatedShape
</span><span class='line'>          d={HEART_SVG}
</span><span class='line'>          x={heart_x}
</span><span class='line'>          y={heart_y}
</span><span class='line'>          scale={heart_scale}
</span><span class='line'>          fill={heart_fill}
</span><span class='line'>        /&gt;
</span><span class='line'>    &lt;/Surface&gt;
</span><span class='line'>
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>We use our <code>AnimatedShape</code> and pass in the animated values we created. A lot of things I explain up above are the basic concepts through out this tutorial so I wont&#8217; explain them again.</p>

<h2>Add a Circle</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var AnimatedCircle = React.createClass({displayName: "Circle",
</span><span class='line'>  render: function() {
</span><span class='line'>    var radius = this.props.radius;
</span><span class='line'>    var path = Path().moveTo(0, -radius)
</span><span class='line'>        .arc(0, radius * 2, radius)
</span><span class='line'>        .arc(0, radius * -2, radius)
</span><span class='line'>        .close();
</span><span class='line'>    return React.createElement(AnimatedShape, React.__spread({},  this.props, {d: path}));
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>This is taken from previous firework demos and default ReactART, but I&rsquo;ve converted it to use our <code>AnimatedShape</code> we created up above.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Surface width={deviceWidth} height={deviceHeight}&gt;
</span><span class='line'>  &lt;Group x={100} y={200}&gt;
</span><span class='line'>    &lt;AnimatedShape
</span><span class='line'>      d={HEART_SVG}
</span><span class='line'>      x={heart_x}
</span><span class='line'>      y={heart_y}
</span><span class='line'>      scale={heart_scale}
</span><span class='line'>      fill={heart_fill}
</span><span class='line'>    /&gt;
</span><span class='line'>    &lt;AnimatedCircle
</span><span class='line'>      x={90}
</span><span class='line'>      y={75}
</span><span class='line'>      radius={150}
</span><span class='line'>      scale={1}
</span><span class='line'>      strokeWidth={3}
</span><span class='line'>      fill="#000"
</span><span class='line'>      opacity={1}
</span><span class='line'>    /&gt;
</span><span class='line'>  &lt;/Group&gt;
</span><span class='line'>&lt;/Surface&gt;</span></code></pre></td></tr></table></div></figure>


<p>We render an arbitrary circle, at <code>90</code> and <code>75</code> which is the center of our current surface.</p>

<h2>Blow that Circle Up</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var circle_scale = this.state.animation.interpolate({
</span><span class='line'>  inputRange: [0, 1, 4],
</span><span class='line'>  outputRange: [0, .3, 1],
</span><span class='line'>  extrapolate: 'clamp'
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var circle_stroke_width = this.state.animation.interpolate({
</span><span class='line'>  inputRange: [0, 5.99, 6, 7, 10],
</span><span class='line'>  outputRange: [0, 0, 15, 8, 0],
</span><span class='line'>  extrapolate: 'clamp'
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var circle_fill_colors = this.state.animation.interpolate({
</span><span class='line'>  inputRange: [1, 2, 3, 4, 4.99, 5],
</span><span class='line'>  outputRange: FILL_COLORS,
</span><span class='line'>  extrapolate: 'clamp'
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>var circle_opacity = this.state.animation.interpolate({
</span><span class='line'>  inputRange: [1,9.99, 10],
</span><span class='line'>  outputRange: [1, 1, 0],
</span><span class='line'>  extrapolate: 'clamp'
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>Alright so we scale up, based on the image we scale up to <code>.3</code> in a single frame, then over the course of 3 frames we scale up our circle to a scale of 1.</p>

<p>Our stroke width also changes however we won&rsquo;t always render it. We only need it for a few frames starting at frame 6. So we will specify that the stroke width stays at <code>0</code> from <code>0</code> to frame <code>5.99</code>.</p>

<p>Then over the course of 1 frame it goes to 15 which I chose at random, down to 8, and eventually 0 by frame 10.</p>

<p>We specify a range of colors in the array I talked about in setup. The weird part is that we have to specify the final color a few times before setting the fill to transparent. The reason is that if we specify just the transparent color the purple color will fade out to transparent but we want it to completely disappear and just show the stroke.</p>

<p>So we have to coordinate stroke frames appearing with the fill color disappearing.</p>

<p>Finally our opacity stays 1 until frame 9.99 (the end of our circle stroke) then we kill it on frame 10.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;AnimatedCircle
</span><span class='line'>  x={89}
</span><span class='line'>  y={75}
</span><span class='line'>  radius={150}
</span><span class='line'>  scale={circle_scale}
</span><span class='line'>  strokeWidth={circle_stroke_width}
</span><span class='line'>  stroke={FILL_COLORS[2]}
</span><span class='line'>  fill={circle_fill_colors}
</span><span class='line'>  opacity={circle_opacity}
</span><span class='line'>/&gt;</span></code></pre></td></tr></table></div></figure>


<p>We put those in and because our stroke color is always the same we just reference our fill colors.</p>

<h2>Bunch of Circles Blowing Up</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Surface width={deviceWidth} height={deviceHeight}&gt;
</span><span class='line'>  &lt;Group x={100} y={200}&gt;
</span><span class='line'>    &lt;AnimatedShape
</span><span class='line'>      d={HEART_SVG}
</span><span class='line'>      x={heart_x}
</span><span class='line'>      y={heart_y}
</span><span class='line'>      scale={heart_scale}
</span><span class='line'>      fill={heart_fill}
</span><span class='line'>    /&gt;
</span><span class='line'>    &lt;AnimatedCircle
</span><span class='line'>      x={90}
</span><span class='line'>      y={75}
</span><span class='line'>      radius={150}
</span><span class='line'>      scale={circle_scale}
</span><span class='line'>      strokeWidth={circle_stroke_width}
</span><span class='line'>      stroke={FILL_COLORS[2]}
</span><span class='line'>      fill={circle_fill_colors}
</span><span class='line'>      opacity={circle_opacity}
</span><span class='line'>    /&gt;
</span><span class='line'>
</span><span class='line'>    {this.getSmallExplosions(150, {x:90, y:75})}
</span><span class='line'>  &lt;/Group&gt;
</span><span class='line'>&lt;/Surface&gt;</span></code></pre></td></tr></table></div></figure>


<p>Alright now we setup our final piece. Calling <code>getSmallExplosions</code> with some data. In our case the radius of our circle and the central coordinates.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getSmallExplosions: function(radius, offset) {
</span><span class='line'>    return [0,1,2,3,4,5,6].map((v, i, t) =&gt; {
</span><span class='line'>
</span><span class='line'>      var scaleOut = this.state.animation.interpolate({
</span><span class='line'>        inputRange: [0, 5.99, 6, 13.99, 14, 21],
</span><span class='line'>        outputRange: [0, 0, 1, 1, 1, 0],
</span><span class='line'>        extrapolate: 'clamp'
</span><span class='line'>      });
</span><span class='line'>
</span><span class='line'>      var moveUp = this.state.animation.interpolate({
</span><span class='line'>        inputRange: [0, 5.99, 14],
</span><span class='line'>        outputRange: [0, 0, -15],
</span><span class='line'>        extrapolate: 'clamp'
</span><span class='line'>      });
</span><span class='line'>
</span><span class='line'>      var moveDown = this.state.animation.interpolate({
</span><span class='line'>        inputRange: [0, 5.99, 14],
</span><span class='line'>        outputRange: [0, 0, 15],
</span><span class='line'>        extrapolate: 'clamp'
</span><span class='line'>      });
</span><span class='line'>
</span><span class='line'>      var color_top_particle = this.state.animation.interpolate({
</span><span class='line'>        inputRange: [6, 8, 10, 12, 17, 21],
</span><span class='line'>        outputRange: shuffleArray(PARTICLE_COLORS)
</span><span class='line'>      })
</span><span class='line'>
</span><span class='line'>      var color_bottom_particle = this.state.animation.interpolate({
</span><span class='line'>        inputRange: [6, 8, 10, 12, 17, 21],
</span><span class='line'>        outputRange: shuffleArray(PARTICLE_COLORS)
</span><span class='line'>      })
</span><span class='line'>
</span><span class='line'>      var position = getXYParticle(7, i, radius)
</span><span class='line'>
</span><span class='line'>      return (
</span><span class='line'>        &lt;Group 
</span><span class='line'>          x={position.x + offset.x } 
</span><span class='line'>          y={position.y + offset.y} 
</span><span class='line'>          rotation={getRandomInt(0, 40) * i}
</span><span class='line'>        &gt;
</span><span class='line'>          &lt;AnimatedCircle 
</span><span class='line'>            x={moveUp}
</span><span class='line'>            y={moveUp}
</span><span class='line'>            radius={15} 
</span><span class='line'>            scale={scaleOut} 
</span><span class='line'>            fill={color_top_particle} 
</span><span class='line'>          /&gt;
</span><span class='line'>          &lt;AnimatedCircle 
</span><span class='line'>            x={moveDown}
</span><span class='line'>            y={moveDown}
</span><span class='line'>            radius={8} 
</span><span class='line'>            scale={scaleOut} 
</span><span class='line'>            fill={color_bottom_particle} 
</span><span class='line'>          /&gt;
</span><span class='line'>        &lt;/Group&gt;
</span><span class='line'>      )
</span><span class='line'>    }, this)
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Not going to explain this one too indepth or I&rsquo;ll keep repeating myself. We create a bunch of animations for each particle but add some randomness into the mix. We call <code>shuffleArray</code> on our <code>PARTICLE_COLORS</code> so over the course of the frames it is active it&rsquo;ll animate to random colors for each particle.</p>

<p>Also we add a bit of <code>rotation</code> to the group, so when we animate the particles up/down they&rsquo;ll go in all different directions.</p>

<h2>Done</h2>

<p>Now you too can add a new interaction that all of your users will despise! No this isn&rsquo;t a perfect replica of the the Twiter animation because I added color variance and some random rotation to the small exploding/shrinking circles.</p>

<p><img src="http://i.imgur.com/lMOxqIL.gif" title="That is hot" ></p>

<h3>Interactive Demo at <a href="https://rnplay.org/apps/nJjHdw">https://rnplay.org/apps/nJjHdw</a></h3>

<p>I&rsquo;m not posting the full code, this is a long one. Just check it out on RNPlay.</p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native - How to make Instagram]]></title>
		
		<link href="http://browniefed.com/blog/react-native-how-to-make-instagram/"/>
		<updated>2015-11-02T04:48:00-08:00</updated>
		<id>http://browniefed.com/blog/react-native-how-to-make-instagram</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h2>OUTDATED</h2>

<p>This blog is a bit outdated, and uses gl-react-native 1.3. I highly recommend checking out <a href="https://github.com/gre/gl-react-image-effects">https://github.com/gre/gl-react-image-effects</a> which was inspired by this post and uses gl-react-native 2.*!</p>

<h2>Intro</h2>

<p>Instagram is a fantastic app and a great concept to model after for learning fragment shaders. We won&rsquo;t get too deep into fragment shaders but I&rsquo;ll take a little bit about what they are and point you to some resources.</p>

<p>We&rsquo;ll take advantage of the awesome <a href="https://github.com/ProjectSeptemberInc/gl-react-native">gl-react-native</a> component library by <a href="https://twitter.com/greweb">Gaëtan Renaudeau</a>.</p>

<p>There are some fantastic resources on basic concepts of fragment shaders, check them out below. Much of the fragment shader code we&rsquo;ll write is taken from there and or slightly modified! I am not an expert on this stuff, I&rsquo;m just playing around.</p>

<ul>
<li>GL React documentation: <a href="https://projectseptemberinc.gitbooks.io/gl-react/content/">https://projectseptemberinc.gitbooks.io/gl-react/content/</a></li>
<li>Great explanation of fragment shader effects: <a href="https://github.com/yulu/GLtext">https://github.com/yulu/GLtext</a></li>
<li>Some Instagram fragment shader pre-sets: <a href="https://github.com/yulu/Instagram_Filter/tree/master/res/raw">https://github.com/yulu/Instagram_Filter/tree/master/res/raw</a></li>
<li>More Instagram pre-sets however they&rsquo;re in CSS: <a href="http://una.im/CSSgram/">http://una.im/CSSgram/</a></li>
</ul>


<h2>What are we building</h2>

<p><img src="http://i.imgur.com/IQDx6Ls.gif" title="More saturation please" ></p>

<!-- more -->


<h2>Concept</h2>

<p>We&rsquo;ll write a fragment shader that takes various values and adjust a child image. We&rsquo;ll throw some sliders on there so the user can control it.</p>

<h2>Disclaimer</h2>

<p>I have no clue if this is the correct way to do this. Once again, I&rsquo;m just playing around. The presets that I linked to above may not output the exact filter you are expecting. Yes you may have to adjust the shader code to make it perfectly match whatever Instagram actually does. Don&rsquo;t ask me to do this for you.</p>

<p>Want to save off what you did? Check out <a href="https://github.com/jsierles/react-native-view-snapshot">https://github.com/jsierles/react-native-view-snapshot</a> or check out <a href="https://github.com/BradLarson/GPUImage">https://github.com/BradLarson/GPUImage</a> for some powerful image manipulations on iOS!</p>

<h2>Install</h2>

<p>You&rsquo;ll need to do <code>npm install gl-react-native</code> and also add it to Xcode. <code>gl-react-native</code> has instructions on how to do that in the README at <a href="https://github.com/ProjectSeptemberInc/gl-react-native">https://github.com/ProjectSeptemberInc/gl-react-native</a>.</p>

<h2>Setup</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var GL = require('gl-react-native');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Text,
</span><span class='line'>  Image,
</span><span class='line'>  View,
</span><span class='line'>  ScrollView,
</span><span class='line'>  SliderIOS
</span><span class='line'>} = React;</span></code></pre></td></tr></table></div></figure>


<p>Nothing too special here.</p>

<h2>Create a GL.View</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Instagram = GL.createComponent(
</span><span class='line'>  ({ children, ...rest }) =&gt;
</span><span class='line'>  &lt;GL.View
</span><span class='line'>    {...rest}
</span><span class='line'>    shader={shaders.instagram}
</span><span class='line'>    uniforms=&gt;
</span><span class='line'>    &lt;GL.Uniform name="tex"&gt;{children}&lt;/GL.Uniform&gt;
</span><span class='line'>  &lt;/GL.View&gt;
</span><span class='line'>, { displayName: "Instagram" });
</span></code></pre></td></tr></table></div></figure>


<p><code>GL.createComponent</code> takes a function that returns and creates everything you need to render. It then provides the props to the function when it wants to render.</p>

<p><code>GL.View</code> is what receives the properties and the shader. The <code>GL.Uniform</code> is given a name that will be provided to the shader. The main purpose is to provide a texture to grab pixels from to feed the shader.</p>

<p>If you wanted a blank canvas to render arbitrary shaders then you would not need the <code>GL.Uniform</code>!</p>

<h2>Create an empty Shader</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const shaders = GL.Shaders.create({
</span><span class='line'>  instagram: {
</span><span class='line'>    frag: `
</span><span class='line'>      void main() {
</span><span class='line'>
</span><span class='line'>      }
</span><span class='line'>    `
</span><span class='line'>  }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>We call <code>GL.Shaders.create</code>. At some point <code>gl-react-native</code> may support Vertex shaders instead of just Fragment shaders. So we scope our <code>instagram</code> shader with another key <code>frag</code> and use ES2015/ES6 template strings so we can quickly edit and manipulate the shader rather than having to deal with quotes.</p>

<h2>Render Empty</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var rn_instagram = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      width:0,
</span><span class='line'>      height: 0,
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  renderWithDimensions: function(layout) {
</span><span class='line'>    var {
</span><span class='line'>      width,
</span><span class='line'>      height
</span><span class='line'>    } = layout.nativeEvent.layout;
</span><span class='line'>    this.setState({
</span><span class='line'>      width,
</span><span class='line'>      height
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>  getImage: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;Instagram 
</span><span class='line'>        width={this.state.width}
</span><span class='line'>        height={this.state.height}
</span><span class='line'>      &gt;
</span><span class='line'>        &lt;Image
</span><span class='line'>          source=
</span><span class='line'>          style={styles.cover}
</span><span class='line'>          resizeMode="cover"
</span><span class='line'>        /&gt;
</span><span class='line'>      &lt;/Instagram&gt;
</span><span class='line'>
</span><span class='line'>    )
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;View style={styles.container} onLayout={this.renderWithDimensions}&gt;
</span><span class='line'>          { this.state.width ? this.getImage() : null}
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>One limitation of <code>gl-react-native</code> is that width/height are almost always required. I say almost because I don&rsquo;t know for sure, but so far it seems to always be required.</p>

<p>So what that means is we need to create a container with <code>flex:1</code> so we can then use the <code>onLayout</code> function to get the measured width/height of whatever <code>flex:1</code> translates to. Once it is set in our <code>state</code> then we can render our <code>Instagram</code> component with our <code>Image</code>.</p>

<p><code>Image</code> has a <code>cover</code> class and <code>resizeMode</code> set to cover.
Our cover class looks like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cover: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0,
</span><span class='line'>    right: 0,
</span><span class='line'>    bottom: 0
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>This will have the image cover and resize to fit the space provided.</p>

<h2>Create the master shader</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const shaders = GL.Shaders.create({
</span><span class='line'>  instagram: {
</span><span class='line'>    frag: `
</span><span class='line'>      precision highp float;
</span><span class='line'>      varying vec2 uv;
</span><span class='line'>      uniform sampler2D tex;
</span><span class='line'>
</span><span class='line'>      uniform float saturation;
</span><span class='line'>      uniform float brightness;
</span><span class='line'>      uniform float contrast;
</span><span class='line'>      uniform float hue;
</span><span class='line'>      uniform float gray;
</span><span class='line'>      uniform float sepia;
</span><span class='line'>      uniform float mixFactor;
</span><span class='line'>
</span><span class='line'>      const vec3 W = vec3(0.2125, 0.7154, 0.0721);
</span><span class='line'>      const mat3 rgb2yiq = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);
</span><span class='line'>      const mat3 yiq2rgb = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.1070, 1.7046);
</span><span class='line'>      const vec3 SEPIA = vec3(1.2, 1.0, 0.8);
</span><span class='line'>
</span><span class='line'>      vec3 BrightnessContrastSaturation(vec3 color, float brt, float con, float sat)
</span><span class='line'>      {
</span><span class='line'>        vec3 black = vec3(0., 0., 0.);
</span><span class='line'>        vec3 middle = vec3(0.5, 0.5, 0.5);
</span><span class='line'>        float luminance = dot(color, W);
</span><span class='line'>        vec3 gray = vec3(luminance, luminance, luminance);
</span><span class='line'>        
</span><span class='line'>        vec3 brtColor = mix(black, color, brt);
</span><span class='line'>        vec3 conColor = mix(middle, brtColor, con);
</span><span class='line'>        vec3 satColor = mix(gray, conColor, sat);
</span><span class='line'>        return satColor;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      vec3 multiplyBlender(vec3 Color, vec3 filter){
</span><span class='line'>        vec3 filter_result;
</span><span class='line'>        float luminance = dot(filter, W);
</span><span class='line'>        
</span><span class='line'>        if(luminance &lt; 0.5)
</span><span class='line'>          filter_result = 2. * filter * Color;
</span><span class='line'>        else
</span><span class='line'>          filter_result = Color;
</span><span class='line'>            
</span><span class='line'>        return filter_result;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      vec3 ovelayBlender(vec3 Color, vec3 filter){
</span><span class='line'>        vec3 filter_result;
</span><span class='line'>
</span><span class='line'>        float luminance = dot(filter, W);
</span><span class='line'>        
</span><span class='line'>        if(luminance &lt; 0.5)
</span><span class='line'>          filter_result = 2. * filter * Color;
</span><span class='line'>        else
</span><span class='line'>          filter_result = 1. - (1. - (2. *(filter - 0.5)))*(1. - Color);
</span><span class='line'>          
</span><span class='line'>        return filter_result;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      vec3 applyHue(vec3 Color, float h) {
</span><span class='line'>        vec3 yColor = rgb2yiq * Color;
</span><span class='line'>        float originalHue = atan(yColor.b, yColor.g);
</span><span class='line'>        float finalHue = originalHue + (h);
</span><span class='line'>        float chroma = sqrt(yColor.b*yColor.b+yColor.g*yColor.g);
</span><span class='line'>        vec3 yFinalColor = vec3(yColor.r, chroma * cos(finalHue), chroma * sin(finalHue));
</span><span class='line'>        return vec3(yiq2rgb*yFinalColor);
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      vec3 applyGray(vec3 Color, float g) {
</span><span class='line'>        float gray = dot(Color, vec3(0.299, 0.587, 0.114));
</span><span class='line'>        return mix(Color, vec3(gray, gray, gray), g);
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      vec3 applySepia(vec3 Color, float s) {
</span><span class='line'>        float gray = dot(Color, vec3(0.299, 0.587, 0.114));
</span><span class='line'>        return mix(Color, vec3(gray) * SEPIA, s);
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      void main() {
</span><span class='line'>        vec2 st = uv.st;
</span><span class='line'>        vec3 irgb = texture2D(tex, st).rgb;
</span><span class='line'>        vec3 filter = texture2D(tex, st).rgb;
</span><span class='line'>
</span><span class='line'>        vec3 bcs_result = BrightnessContrastSaturation(irgb, brightness, contrast, saturation);
</span><span class='line'>        vec3 hue_result = applyHue(bcs_result, hue);
</span><span class='line'>        vec3 sepia_result = applySepia(hue_result, sepia);
</span><span class='line'>        vec3 gray_result = applyGray(sepia_result, gray);
</span><span class='line'>
</span><span class='line'>        vec3 after_filter = mix(gray_result, multiplyBlender(gray_result, filter), mixFactor);
</span><span class='line'>        
</span><span class='line'>        gl_FragColor = vec4(after_filter, 1.);
</span><span class='line'>      }
</span><span class='line'>    `
</span><span class='line'>  }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>I wont&#8217; go too indepth here since I don&rsquo;t know a ton about what is happening. But quick explanation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>varying vec2 uv;
</span><span class='line'>uniform sampler2D tex;
</span><span class='line'>
</span><span class='line'>uniform float saturation;
</span><span class='line'>uniform float brightness;
</span><span class='line'>uniform float contrast;
</span><span class='line'>uniform float hue;
</span><span class='line'>uniform float gray;
</span><span class='line'>uniform float sepia;
</span><span class='line'>uniform float mixFactor;</span></code></pre></td></tr></table></div></figure>


<p>When we declare <code>uniform</code> in our shader it means that it is a value that is coming in from the outside. In our case from the JS world to the Obj-C world and into our shader.</p>

<p>We need to define it&rsquo;s type, in our case it&rsquo;s a <code>float</code> for most input values.</p>

<p>The <code>varying vec2 uv</code> is what I believe is the outside world providing the texture coordinates of what  is currently being processed. That way you can do specific things based on the coordinates you are at&hellip; like transforming a pixel color from one thing to another, adding things like vignettes, or whatever else you want to do.</p>

<p>In our <code>texture</code> case we receive a <code>sampler2D</code>. This has a bunch of data that allows us to extract a <code>rgb</code> out of it using our coordinates from above.
This is where we get the <code>rgb</code> value to manipulate based upon our shader.</p>

<p>We get that <code>rgb</code> value here <code>texture2D(tex, st).rgb;</code>. Which is assigned to a <code>vec3</code> which just is an arbitrary container of <code>3</code> values. In JavaScript just think of it as an array like <code>[1,2,3]</code> but can be referenced like an object with <code>.</code> notation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void main() {
</span><span class='line'>    vec2 st = uv.st;
</span><span class='line'>    vec3 irgb = texture2D(tex, st).rgb;
</span><span class='line'>    vec3 filter = texture2D(tex, st).rgb;
</span><span class='line'>
</span><span class='line'>    vec3 bcs_result = BrightnessContrastSaturation(irgb, brightness, contrast, saturation);
</span><span class='line'>    vec3 hue_result = applyHue(bcs_result, hue);
</span><span class='line'>    vec3 sepia_result = applySepia(hue_result, sepia);
</span><span class='line'>    vec3 gray_result = applyGray(sepia_result, gray);
</span><span class='line'>
</span><span class='line'>    vec3 after_filter = mix(gray_result, multiplyBlender(gray_result, filter), mixFactor);
</span><span class='line'>
</span><span class='line'>    gl_FragColor = vec4(after_filter, 1.);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Our main function is called and is where things start. We extract our coordinates from <code>uv</code>. Get our <code>rgb</code> value at those specific coordiantes.</p>

<p>Then pass it through our functions. Each function takes one or more of our <code>uniform</code> values that gets passed in. It then returns a <code>vec3</code> which is just an <code>rgb</code> color value. That color then gets passed into the next function.</p>

<p>We essentially just keep passing and mutating an <code>rgb</code> color value until the end.</p>

<p>Eventually <code>gl_FragColor</code> is where we spit out our final color for that specific coordinate that our shader was called with.</p>

<h2>Add State</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      width:0,
</span><span class='line'>      height: 0,
</span><span class='line'>      saturation: 1,
</span><span class='line'>      brightness: 1,
</span><span class='line'>      contrast: 1,
</span><span class='line'>      hue: 0,
</span><span class='line'>      sepia: 0,
</span><span class='line'>      gray: 0,
</span><span class='line'>      mixFactor: 0
</span><span class='line'>    };
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>We should fix up our state to have all the values that our shader needs. In our case we just make up a values for each shader and set random defaults.</p>

<h2>Fix the GL.View</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Instagram = GL.createComponent(
</span><span class='line'>  ({ brightness, saturation, contrast, hue, gray, sepia, mixFactor, children, ...rest }) =&gt;
</span><span class='line'>  &lt;GL.View
</span><span class='line'>    {...rest}
</span><span class='line'>    shader={shaders.instagram}
</span><span class='line'>    uniforms=&gt;
</span><span class='line'>    &lt;GL.Uniform name="tex"&gt;{children}&lt;/GL.Uniform&gt;
</span><span class='line'>  &lt;/GL.View&gt;
</span><span class='line'>, { displayName: "Instagram" });</span></code></pre></td></tr></table></div></figure>


<p>Now that You can see we now pass in all the necessary uniforms. If they exist here they must exist in your shader. If they exist in your shader and aren&rsquo;t used you will get an error! Or vice versa. Ultimately if you forget something you&rsquo;ll know because your shader won&rsquo;t compile and you&rsquo;ll get a red error screen like you may be used to.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getImage: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;Instagram 
</span><span class='line'>        brightness={this.state.brightness}
</span><span class='line'>        saturation={this.state.saturation}
</span><span class='line'>        contrast={this.state.contrast}
</span><span class='line'>        hue={this.state.hue}
</span><span class='line'>        gray={this.state.gray}
</span><span class='line'>        sepia={this.state.sepia}
</span><span class='line'>        mixFactor={this.state.mixFactor}
</span><span class='line'>        width={this.state.width}
</span><span class='line'>        height={this.state.height}
</span><span class='line'>      &gt;
</span><span class='line'>        &lt;Image
</span><span class='line'>          source=
</span><span class='line'>          style={styles.cover}
</span><span class='line'>          resizeMode="cover"
</span><span class='line'>        /&gt;
</span><span class='line'>      &lt;/Instagram&gt;
</span><span class='line'>
</span><span class='line'>    )
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Pass in our state to the <code>GL.View</code> we created. We technically could have just used the <code>...</code> spread operator here but I&rsquo;m being explicity for the sake of this tutorial.</p>

<h2>Add Controls</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    &lt;ScrollView style={styles.container}&gt;
</span><span class='line'>      &lt;View&gt;
</span><span class='line'>        &lt;Text&gt;Blend Factor: {this.state.mixFactor}&lt;/Text&gt;
</span><span class='line'>        &lt;SliderIOS
</span><span class='line'>          value={this.state.mixFactor}
</span><span class='line'>          minimumValue={0}
</span><span class='line'>          maximumValue={2}
</span><span class='line'>          onValueChange={(mixFactor) =&gt; this.setState({mixFactor})}
</span><span class='line'>        /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>      &lt;View&gt;
</span><span class='line'>        &lt;Text&gt;Brightness: {this.state.brightness}&lt;/Text&gt;
</span><span class='line'>        &lt;SliderIOS
</span><span class='line'>          value={this.state.brightness}
</span><span class='line'>          minimumValue={0}
</span><span class='line'>          maximumValue={3}
</span><span class='line'>          onValueChange={(brightness) =&gt; this.setState({brightness})}
</span><span class='line'>        /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    //OTHER CONTROLS
</span><span class='line'>    &lt;/ScrollView&gt;</span></code></pre></td></tr></table></div></figure>


<p>Nothing too crazy here either. We just setup our controls. When stuff changes we&rsquo;ll set state with the new value. The <code>minimumValue</code> and <code>maximumValue</code> I chose at complete randomness.</p>

<h2>DONE!</h2>

<p>We can finally control different properties of shaders that wrap arbitrary images. Go us. Go Shaders. Go OpenGLES 2.X spec.</p>

<h3>As always, live demo on <a href="https://rnplay.org/apps/I9G83g">https://rnplay.org/apps/I9G83g</a></h3>

<p><img src="http://i.imgur.com/IQDx6Ls.gif" title="Guess the city and win" ></p>

<h2>Full Code</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var GL = require('gl-react-native');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Text,
</span><span class='line'>  Image,
</span><span class='line'>  Dimensions,
</span><span class='line'>  View,
</span><span class='line'>  ScrollView,
</span><span class='line'>  SliderIOS
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width,
</span><span class='line'>  height
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var rn_instagram = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      width:0,
</span><span class='line'>      height: 0,
</span><span class='line'>      saturation: 1,
</span><span class='line'>      brightness: 1,
</span><span class='line'>      contrast: 1,
</span><span class='line'>      hue: 0,
</span><span class='line'>      sepia: 0,
</span><span class='line'>      gray: 0,
</span><span class='line'>      mixFactor: 0
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  renderWithDimensions: function(layout) {
</span><span class='line'>    var {
</span><span class='line'>      width,
</span><span class='line'>      height
</span><span class='line'>    } = layout.nativeEvent.layout;
</span><span class='line'>    this.setState({
</span><span class='line'>      width,
</span><span class='line'>      height
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>  getImage: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;Instagram 
</span><span class='line'>        brightness={this.state.brightness}
</span><span class='line'>        saturation={this.state.saturation}
</span><span class='line'>        contrast={this.state.contrast}
</span><span class='line'>        hue={this.state.hue}
</span><span class='line'>        gray={this.state.gray}
</span><span class='line'>        sepia={this.state.sepia}
</span><span class='line'>        mixFactor={this.state.mixFactor}
</span><span class='line'>        width={this.state.width}
</span><span class='line'>        height={this.state.height}
</span><span class='line'>      &gt;
</span><span class='line'>        &lt;Image
</span><span class='line'>          source={{uri: 'http://i.imgur.com/dSIa9jl.jpg'}}
</span><span class='line'>          style={styles.cover}
</span><span class='line'>          resizeMode="cover"
</span><span class='line'>        /&gt;
</span><span class='line'>      &lt;/Instagram&gt;
</span><span class='line'>
</span><span class='line'>    )
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;View style={styles.container} onLayout={this.renderWithDimensions}&gt;
</span><span class='line'>          { this.state.width ? this.getImage() : null}
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>        &lt;ScrollView style={styles.container}&gt;
</span><span class='line'>          &lt;View&gt;
</span><span class='line'>            &lt;Text&gt;Blend Factor: {this.state.mixFactor}&lt;/Text&gt;
</span><span class='line'>            &lt;SliderIOS
</span><span class='line'>              value={this.state.mixFactor}
</span><span class='line'>              minimumValue={0}
</span><span class='line'>              maximumValue={2}
</span><span class='line'>              onValueChange={(mixFactor) =&gt; this.setState({mixFactor})}
</span><span class='line'>            /&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>          &lt;View&gt;
</span><span class='line'>            &lt;Text&gt;Brightness: {this.state.brightness}&lt;/Text&gt;
</span><span class='line'>            &lt;SliderIOS
</span><span class='line'>              value={this.state.brightness}
</span><span class='line'>              minimumValue={0}
</span><span class='line'>              maximumValue={3}
</span><span class='line'>              onValueChange={(brightness) =&gt; this.setState({brightness})}
</span><span class='line'>            /&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>          &lt;View&gt;
</span><span class='line'>            &lt;Text&gt;Saturation: {this.state.saturation}&lt;/Text&gt;
</span><span class='line'>            &lt;SliderIOS
</span><span class='line'>              value={this.state.saturation}
</span><span class='line'>              minimumValue={0}
</span><span class='line'>              maximumValue={3}
</span><span class='line'>              onValueChange={(saturation) =&gt; this.setState({saturation})}
</span><span class='line'>            /&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>          &lt;View&gt;
</span><span class='line'>            &lt;Text&gt;Contrast: {this.state.contrast}&lt;/Text&gt;
</span><span class='line'>            &lt;SliderIOS
</span><span class='line'>              value={this.state.contrast}
</span><span class='line'>              minimumValue={0}
</span><span class='line'>              maximumValue={3}
</span><span class='line'>              onValueChange={(contrast) =&gt; this.setState({contrast})}
</span><span class='line'>            /&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>          &lt;View&gt;
</span><span class='line'>            &lt;Text&gt;Sepia: {this.state.sepia}&lt;/Text&gt;
</span><span class='line'>            &lt;SliderIOS
</span><span class='line'>              value={this.state.sepia}
</span><span class='line'>              minimumValue={0}
</span><span class='line'>              maximumValue={1}
</span><span class='line'>              onValueChange={(sepia) =&gt; this.setState({sepia})}
</span><span class='line'>            /&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>          &lt;View&gt;
</span><span class='line'>            &lt;Text&gt;Grayscale: {this.state.gray}&lt;/Text&gt;
</span><span class='line'>            &lt;SliderIOS
</span><span class='line'>              value={this.state.gray}
</span><span class='line'>              minimumValue={0}
</span><span class='line'>              maximumValue={1}
</span><span class='line'>              onValueChange={(gray) =&gt; this.setState({gray})}
</span><span class='line'>            /&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>          &lt;View&gt;
</span><span class='line'>            &lt;Text&gt;Hue: {this.state.hue}&lt;/Text&gt;
</span><span class='line'>            &lt;SliderIOS
</span><span class='line'>              value={this.state.hue}
</span><span class='line'>              minimumValue={0}
</span><span class='line'>              maximumValue={10}
</span><span class='line'>              onValueChange={(hue) =&gt; this.setState({hue})}
</span><span class='line'>            /&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>        &lt;/ScrollView&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1
</span><span class='line'>  },
</span><span class='line'>  cover: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0,
</span><span class='line'>    right: 0,
</span><span class='line'>    bottom: 0
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>const shaders = GL.Shaders.create({
</span><span class='line'>  instagram: {
</span><span class='line'>    frag: `
</span><span class='line'>      precision highp float;
</span><span class='line'>      varying vec2 uv;
</span><span class='line'>      uniform sampler2D tex;
</span><span class='line'>      uniform float saturation;
</span><span class='line'>      uniform float brightness;
</span><span class='line'>      uniform float contrast;
</span><span class='line'>      uniform float hue;
</span><span class='line'>      uniform float gray;
</span><span class='line'>      uniform float sepia;
</span><span class='line'>      uniform float mixFactor;
</span><span class='line'>
</span><span class='line'>      const vec3 W = vec3(0.2125, 0.7154, 0.0721);
</span><span class='line'>      const mat3 rgb2yiq = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);
</span><span class='line'>      const mat3 yiq2rgb = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.1070, 1.7046);
</span><span class='line'>      const vec3 SEPIA = vec3(1.2, 1.0, 0.8);
</span><span class='line'>
</span><span class='line'>      vec3 BrightnessContrastSaturation(vec3 color, float brt, float con, float sat)
</span><span class='line'>      {
</span><span class='line'>        vec3 black = vec3(0., 0., 0.);
</span><span class='line'>        vec3 middle = vec3(0.5, 0.5, 0.5);
</span><span class='line'>        float luminance = dot(color, W);
</span><span class='line'>        vec3 gray = vec3(luminance, luminance, luminance);
</span><span class='line'>        
</span><span class='line'>        vec3 brtColor = mix(black, color, brt);
</span><span class='line'>        vec3 conColor = mix(middle, brtColor, con);
</span><span class='line'>        vec3 satColor = mix(gray, conColor, sat);
</span><span class='line'>        return satColor;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      vec3 multiplyBlender(vec3 Color, vec3 filter){
</span><span class='line'>        vec3 filter_result;
</span><span class='line'>        float luminance = dot(filter, W);
</span><span class='line'>        
</span><span class='line'>        if(luminance &lt; 0.5)
</span><span class='line'>          filter_result = 2. * filter * Color;
</span><span class='line'>        else
</span><span class='line'>          filter_result = Color;
</span><span class='line'>            
</span><span class='line'>        return filter_result;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      vec3 ovelayBlender(vec3 Color, vec3 filter){
</span><span class='line'>        vec3 filter_result;
</span><span class='line'>
</span><span class='line'>        float luminance = dot(filter, W);
</span><span class='line'>        
</span><span class='line'>        if(luminance &lt; 0.5)
</span><span class='line'>          filter_result = 2. * filter * Color;
</span><span class='line'>        else
</span><span class='line'>          filter_result = 1. - (1. - (2. *(filter - 0.5)))*(1. - Color);
</span><span class='line'>          
</span><span class='line'>        return filter_result;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      vec3 applyHue(vec3 Color, float h) {
</span><span class='line'>        vec3 yColor = rgb2yiq * Color;
</span><span class='line'>        float originalHue = atan(yColor.b, yColor.g);
</span><span class='line'>        float finalHue = originalHue + (h);
</span><span class='line'>        float chroma = sqrt(yColor.b*yColor.b+yColor.g*yColor.g);
</span><span class='line'>        vec3 yFinalColor = vec3(yColor.r, chroma * cos(finalHue), chroma * sin(finalHue));
</span><span class='line'>        return vec3(yiq2rgb*yFinalColor);
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      vec3 applyGray(vec3 Color, float g) {
</span><span class='line'>        float gray = dot(Color, vec3(0.299, 0.587, 0.114));
</span><span class='line'>        return mix(Color, vec3(gray, gray, gray), g);
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      vec3 applySepia(vec3 Color, float s) {
</span><span class='line'>        float gray = dot(Color, vec3(0.299, 0.587, 0.114));
</span><span class='line'>        return mix(Color, vec3(gray) * SEPIA, s);
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      void main() {
</span><span class='line'>        vec2 st = uv.st;
</span><span class='line'>        vec3 irgb = texture2D(tex, st).rgb;
</span><span class='line'>        vec3 filter = texture2D(tex, st).rgb;
</span><span class='line'>
</span><span class='line'>        vec3 bcs_result = BrightnessContrastSaturation(irgb, brightness, contrast, saturation);
</span><span class='line'>        vec3 hue_result = applyHue(bcs_result, hue);
</span><span class='line'>        vec3 sepia_result = applySepia(hue_result, sepia);
</span><span class='line'>        vec3 gray_result = applyGray(sepia_result, gray);
</span><span class='line'>
</span><span class='line'>        vec3 after_filter = mix(gray_result, multiplyBlender(gray_result, filter), mixFactor);
</span><span class='line'>        
</span><span class='line'>        gl_FragColor = vec4(after_filter, 1.);
</span><span class='line'>      }
</span><span class='line'>    `
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var Instagram = GL.createComponent(
</span><span class='line'>  ({ brightness, saturation, contrast, hue, gray, sepia, mixFactor, children, ...rest }) =&gt;
</span><span class='line'>  &lt;GL.View
</span><span class='line'>    {...rest}
</span><span class='line'>    shader={shaders.instagram}
</span><span class='line'>    uniforms={{ brightness, saturation, contrast, hue, gray, sepia, mixFactor }}&gt;
</span><span class='line'>    &lt;GL.Uniform name="tex"&gt;{children}&lt;/GL.Uniform&gt;
</span><span class='line'>  &lt;/GL.View&gt;
</span><span class='line'>, { displayName: "Instagram" });
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>module.exports = rn_instagram;
</span><span class='line'>
</span><span class='line'>AppRegistry.registerComponent('rn_instagram', () =&gt; rn_instagram);
</span></code></pre></td></tr></table></div></figure>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native - Recreating the Apple TV Icons]]></title>
		
		<link href="http://browniefed.com/blog/react-native-recreating-the-apple-tv-icons/"/>
		<updated>2015-10-23T20:53:00-07:00</updated>
		<id>http://browniefed.com/blog/react-native-recreating-the-apple-tv-icons</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>I had attempted to recreate this in the past but could never come up with anything elegant. I saw this post not too long ago <a href="https://medium.com/@nashvail/recreating-the-apple-tv-icons-in-javascript-and-css-eec306d41617">Recreating the Apple TV icons in JavaScript and CSS</a> by <a href="https://twitter.com/NashVail">Nash Vail</a>.</p>

<p>He then went on to create a <a href="https://github.com/nashvail/ATVIcons">jQuery plugin</a> to accomplish the effect. After reading the source and viewing the demos, it turns out re-making this in React Native is trivial.</p>

<p>So read the article, check out the <a href="http://nashvail.me/ATVIcons/">live demo</a> here and then we&rsquo;ll continue on.</p>

<h2>What are we building</h2>

<p><img src="http://i.imgur.com/3TLQtmE.gif" title="No 3D glasses required" ></p>

<!-- more -->


<h2>Setup</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Text,
</span><span class='line'>  View,
</span><span class='line'>  PanResponder,
</span><span class='line'>  Image,
</span><span class='line'>  Animated
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var width = 280;
</span><span class='line'>var height = 150;
</span></code></pre></td></tr></table></div></figure>


<p>Yes, Animated again. Can you believe I almost wrote this tutorial with out it? I had a <code>setState</code> implementation but I didn&rsquo;t take the lazy, non-performant way out, I built it with performance in mind! No thanks necessary, it would have weighed on my conscience had I released an animated tutorial using <code>setState</code>.</p>

<p>The card we&rsquo;re animating is <code>280</code> by <code>150</code>. It&rsquo;ll play into our calculations. This could be made dynamic though.</p>

<h2>Defaults</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      maxRotation: 12,
</span><span class='line'>      maxTranslation: 6,
</span><span class='line'>      perspective: 800
</span><span class='line'>    };
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>In our <code>getInitialState</code> we&rsquo;ll set up some defaults. We&rsquo;ll set our <code>maxRotation</code> to 12, this means the card can only rotate a maximum of 12 degrees. <code>maxTranslation</code> is the same thing, it can only shift the card a maximum of 6.</p>

<p>You can read more about <code>perspective</code> here <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/perspective">https://developer.mozilla.org/en-US/docs/Web/CSS/perspective</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The perspective CSS property determines the distance between the z=0 plane and the user in order to give to the 3D-positioned element some perspective</span></code></pre></td></tr></table></div></figure>


<h2>Borrowed Function</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function calculatePercentage(offset, dimension) {
</span><span class='line'>  return ((-2 / dimension) * offset) + 1;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This is the magic formula. Based upon what we pass in here it will spit out a value between <code>-1</code> and <code>1</code>. We use this to multiply by our <code>maxRotation</code> or <code>maxTranslation</code> to get the degree to apply. We won&rsquo;t do the multiplication though, we&rsquo;ll let <code>Animated</code> take care of that.</p>

<h2>PanResponder and Calculations</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._animations = {
</span><span class='line'>      xRotationPercentage: new Animated.Value(0),
</span><span class='line'>      yRotationPercentage: new Animated.Value(0),
</span><span class='line'>      xTranslationPercentage: new Animated.Value(0),
</span><span class='line'>      yTranslationPercentage: new Animated.Value(0)
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    this._panResponder = PanResponder.create({
</span><span class='line'>      onStartShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onStartShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onPanResponderMove: (e, gestureState) =&gt; {
</span><span class='line'>        e.persist();
</span><span class='line'>        var {
</span><span class='line'>          locationX: x,
</span><span class='line'>          locationY: y
</span><span class='line'>        } = e.nativeEvent;
</span><span class='line'>
</span><span class='line'>        this._animations.xRotationPercentage.setValue(calculatePercentage(y, height));
</span><span class='line'>        this._animations.yRotationPercentage.setValue(calculatePercentage(x, width) * -1);
</span><span class='line'>        this._animations.xTranslationPercentage.setValue(calculatePercentage(x, width));
</span><span class='line'>        this._animations.yTranslationPercentage.setValue(calculatePercentage(y, height));
</span><span class='line'>      }
</span><span class='line'>    })
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Alright there is sort of a lot here but not really. We setup an object to hold our animations called <code>this._animations</code>. We then setup our <code>PanResponder</code> defaults, and of course the one we care about is <code>onPanResponderMove</code>.</p>

<p>Here when it moves we get the <code>locationX</code> and <code>locationY</code> which is the <code>x/y</code> values relative to the <code>component</code> we attach it too.</p>

<p>Finally we run our calculations and call <code>setValue</code> on each <code>Animated.Value</code>. This is basically what <code>Animated.event</code> is doing under the hood for us, but instead we are performing calculations and calling <code>setValue</code> ourselves.</p>

<h2>Render-me-timbers</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;View style= {...this._panResponder.panHandlers}&gt;
</span><span class='line'>          &lt;Card  
</span><span class='line'>              style=
</span><span class='line'>              stackingFactor={1}
</span><span class='line'>              {...this.state}
</span><span class='line'>              {...this._animations}
</span><span class='line'>          &gt;
</span><span class='line'>            &lt;Card 
</span><span class='line'>              style=
</span><span class='line'>              stackingFactor={1.4}
</span><span class='line'>              {...this.state}
</span><span class='line'>              {...this._animations}
</span><span class='line'>            &gt;
</span><span class='line'>              &lt;Card
</span><span class='line'>                style= 
</span><span class='line'>                stackingFactor={1.8}
</span><span class='line'>                {...this.state}
</span><span class='line'>                {...this._animations}
</span><span class='line'>              /&gt;
</span><span class='line'>            &lt;/Card&gt;
</span><span class='line'>          &lt;/Card&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll get to the card component in a second. We attach our <code>PanResponder</code> we created to the outer wrap object. Then we nest each card. This is crucial otherwise our layer will 3D transform behind the red layer.
So this is forcing the <code>Card</code> to sit in front of the previous card no matter what. I don&rsquo;t know if this is true, but it was happening to me and this is how I fixed it.</p>

<p>We use a prop called <code>stackingFactor</code>. All this does is slightly amplify that cards movements more causing a slight offset and the 3D effect.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Card = React.createClass({
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>
</span><span class='line'>  var translateMax = (this.props.maxTranslation * this.props.stackingFactor);
</span><span class='line'>  var rotateMax = this.props.maxRotation;
</span><span class='line'>
</span><span class='line'>    this._xRotation = this.props.xRotationPercentage.interpolate({
</span><span class='line'>      inputRange: [-1, 1],
</span><span class='line'>      outputRange: [ (rotateMax * -1) + 'deg', rotateMax + 'deg'],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._yRotation = this.props.yRotationPercentage.interpolate({
</span><span class='line'>      inputRange: [-1, 1],
</span><span class='line'>      outputRange: [ (rotateMax * -1) + 'deg', rotateMax + 'deg'],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._translateX = this.props.xTranslationPercentage.interpolate({
</span><span class='line'>      inputRange: [-1, 1],
</span><span class='line'>      outputRange: [(translateMax * -1), translateMax],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>    this._translateY = this.props.yTranslationPercentage.interpolate({
</span><span class='line'>      inputRange: [-1, 1],
</span><span class='line'>      outputRange: [(translateMax * -1), translateMax],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  getTransform:function() {
</span><span class='line'>    return [
</span><span class='line'>      {perspective: this.props.perspective},
</span><span class='line'>      {rotateX: this._xRotation},
</span><span class='line'>      {rotateY: this._yRotation},
</span><span class='line'>      {translateX: this._translateX},
</span><span class='line'>      {translateY: this._translateY},
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;Animated.View 
</span><span class='line'>        {...this.props} 
</span><span class='line'>        style={[this.props.style, {transform: this.getTransform()}]}
</span><span class='line'>      &gt;
</span><span class='line'>        {this.props.children}
</span><span class='line'>      &lt;/Animated.View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s a lot of <code>interpolate</code>! Well not really they&rsquo;re mostly all doing the same thing here. Remember when I said our calculations up above could return a percentage between <code>-1</code> and <code>1</code>.</p>

<p>Well all we have to do is specify that as our <code>inputRange</code> and then our <code>outputRange</code> is just whatever our small <code>maxRotation</code> or <code>maxTranslation</code>. <code>Animated</code> will take care of all the multiplication for us! Thanks Animated!</p>

<p>The <code>extrapolate: 'clamp'</code> is EXTREMELY important. Without it the values will go past their maximums. This can be accomplished since <code>locationX</code> and <code>locationY</code> could go beyond the <code>width</code> and <code>height</code> of the container. Long story short, <code>extrapolate: 'clamp'</code> your interpolations!</p>

<p>You can see how the <code>translateMax</code> is affected when our <code>stackingFactor</code> is larger.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  var translateMax = (this.props.maxTranslation * this.props.stackingFactor);</span></code></pre></td></tr></table></div></figure>


<p>Our <code>getTransform</code> just maps the appropriate animated value to it&rsquo;s transform. Also so our <code>Card</code> can be nested we have to specify <code>{this.props.children}</code>.</p>

<h2>Look Ma&#8217; no setState</h2>

<p>That&rsquo;s right. We&rsquo;ve used all <code>Animated</code> here. No diffs are happening to cause re-render, so our animations should be quite performant.</p>

<h2>Done</h2>

<p>This is currently only supported on iOS but appropriate support for Android is being added here <a href="https://github.com/facebook/react-native/pull/3522">https://github.com/facebook/react-native/pull/3522</a></p>

<h3>As always live code <a href="https://rnplay.org/apps/qLNwNw">https://rnplay.org/apps/qLNwNw</a></h3>

<p><img src="http://i.imgur.com/3TLQtmE.gif" title="Cheaper than going to the movies" ></p>

<h2>Full Code</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Text,
</span><span class='line'>  View,
</span><span class='line'>  PanResponder,
</span><span class='line'>  Image,
</span><span class='line'>  Animated
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var width = 280;
</span><span class='line'>var height = 150;
</span><span class='line'>
</span><span class='line'>function calculatePercentage(offset, dimension) {
</span><span class='line'>  return ((-2 / dimension) * offset) + 1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var AppleTV = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      maxRotation: 12,
</span><span class='line'>      maxTranslation: 6,
</span><span class='line'>      perspective: 800
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._animations = {
</span><span class='line'>      xRotationPercentage: new Animated.Value(0),
</span><span class='line'>      yRotationPercentage: new Animated.Value(0),
</span><span class='line'>      xTranslationPercentage: new Animated.Value(0),
</span><span class='line'>      yTranslationPercentage: new Animated.Value(0)
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    this._panResponder = PanResponder.create({
</span><span class='line'>      onStartShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onStartShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onPanResponderMove: (e, gestureState) =&gt; {
</span><span class='line'>        e.persist();
</span><span class='line'>        var {
</span><span class='line'>          locationX: x,
</span><span class='line'>          locationY: y
</span><span class='line'>        } = e.nativeEvent;
</span><span class='line'>
</span><span class='line'>        this._animations.xRotationPercentage.setValue(calculatePercentage(y, height));
</span><span class='line'>        this._animations.yRotationPercentage.setValue(calculatePercentage(x, width) * -1);
</span><span class='line'>        this._animations.xTranslationPercentage.setValue(calculatePercentage(x, width));
</span><span class='line'>        this._animations.yTranslationPercentage.setValue(calculatePercentage(y, height));
</span><span class='line'>      }
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;View style= {...this._panResponder.panHandlers}&gt;
</span><span class='line'>          &lt;Card  
</span><span class='line'>              style=
</span><span class='line'>              stackingFactor={1}
</span><span class='line'>              {...this.state}
</span><span class='line'>              {...this._animations}
</span><span class='line'>          &gt;
</span><span class='line'>            &lt;Card 
</span><span class='line'>              style=
</span><span class='line'>              stackingFactor={1.4}
</span><span class='line'>              {...this.state}
</span><span class='line'>              {...this._animations}
</span><span class='line'>            &gt;
</span><span class='line'>              &lt;Card
</span><span class='line'>                style= 
</span><span class='line'>                stackingFactor={1.8}
</span><span class='line'>                {...this.state}
</span><span class='line'>                {...this._animations}
</span><span class='line'>              /&gt;
</span><span class='line'>            &lt;/Card&gt;
</span><span class='line'>          &lt;/Card&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var Card = React.createClass({
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>
</span><span class='line'>  var translateMax = (this.props.maxTranslation * this.props.stackingFactor);
</span><span class='line'>  var rotateMax = this.props.maxRotation;
</span><span class='line'>
</span><span class='line'>    this._xRotation = this.props.xRotationPercentage.interpolate({
</span><span class='line'>      inputRange: [-1, 1],
</span><span class='line'>      outputRange: [ (rotateMax * -1) + 'deg', rotateMax + 'deg'],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._yRotation = this.props.yRotationPercentage.interpolate({
</span><span class='line'>      inputRange: [-1, 1],
</span><span class='line'>      outputRange: [ (rotateMax * -1) + 'deg', rotateMax + 'deg'],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._translateX = this.props.xTranslationPercentage.interpolate({
</span><span class='line'>      inputRange: [-1, 1],
</span><span class='line'>      outputRange: [(translateMax * -1), translateMax],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>    this._translateY = this.props.yTranslationPercentage.interpolate({
</span><span class='line'>      inputRange: [-1, 1],
</span><span class='line'>      outputRange: [(translateMax * -1), translateMax],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  getTransform:function() {
</span><span class='line'>    return [
</span><span class='line'>      {perspective: this.props.perspective},
</span><span class='line'>      {rotateX: this._xRotation},
</span><span class='line'>      {rotateY: this._yRotation},
</span><span class='line'>      {translateX: this._translateX},
</span><span class='line'>      {translateY: this._translateY},
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;Animated.View 
</span><span class='line'>        {...this.props} 
</span><span class='line'>        style={[this.props.style, {transform: this.getTransform()}]}
</span><span class='line'>      &gt;
</span><span class='line'>        {this.props.children}
</span><span class='line'>      &lt;/Animated.View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    justifyContent: 'center',
</span><span class='line'>    alignItems: 'center'
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>AppRegistry.registerComponent('rn_dragtoshow', () =&gt; AppleTV);</span></code></pre></td></tr></table></div></figure>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native - Easy Overlay Modal with Navigator]]></title>
		
		<link href="http://browniefed.com/blog/react-native-easy-overlay-modal-with-navigator/"/>
		<updated>2015-10-18T01:43:00-07:00</updated>
		<id>http://browniefed.com/blog/react-native-easy-overlay-modal-with-navigator</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>It pays to have the <code>Navigator</code> at the root of your application. This allows you to tunnel back and render something at the root. In our case a custom Modal overlay component. You can pass anything on the route object, and anytime you render the same component at the same place it will just re-render that same component. So lets use the power of React to solve our problems.</p>

<h2>What are we making</h2>

<p><img src="http://i.imgur.com/5LhPD3l.gif" title="I should have made this loop" ></p>

<!-- more -->


<h2>Setup</h2>

<p>Lets setup our app</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Text,
</span><span class='line'>  View,
</span><span class='line'>  Navigator,
</span><span class='line'>  TouchableOpacity,
</span><span class='line'>  Animated,
</span><span class='line'>  Dimensions
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  height: deviceHeight
</span><span class='line'>} = Dimensions.get('window');</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll get our <code>deviceHeight</code> so we can manually animate our modal up. You could use <code>LayoutAnimation</code> here as well and not deal with getting the deviceHeight but I like <code>Animated</code> so deal with it.</p>

<h2>Route Stack</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var RouteStack = {
</span><span class='line'>    app: {
</span><span class='line'>      component: App 
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This is our super complex route stack. All we do is have a named route with the componet to render.</p>

<h2>Root Application</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ModalApp = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return { modal: false };
</span><span class='line'>  },
</span><span class='line'>  renderScene: function(route, navigator) {
</span><span class='line'>    var Component = route.component;
</span><span class='line'>    
</span><span class='line'>    return (
</span><span class='line'>      &lt;Component openModal={() =&gt; this.setState({modal: true})}/&gt;
</span><span class='line'>    );
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;Navigator
</span><span class='line'>            initialRoute={RouteStack.app}
</span><span class='line'>            renderScene={this.renderScene}
</span><span class='line'>        /&gt;
</span><span class='line'>        {this.state.modal ? &lt;TopModal closeModal={() =&gt; this.setState({modal: false}) }/&gt; : null }
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>This is the root of our application. Our render function is pretty basic. We render <code>Navigator</code> with our <code>intialRoute</code> being our only Route. Our <code>renderScene</code> function is going to control our logic.</p>

<p>When we render our component we pass down an <code>openModal</code> function. This will set <code>modal:true</code> on our state which will allow for us to open/close the modal over the current route. This will just cause <code>Navigator</code> to re-render at the current route. This means your rendered <code>Component</code> at the current route will have <code>componentWillReceiveProps</code> triggered. Our <code>TopModal</code> will receive a <code>closeModal</code> function to set <code>modal:false</code> on state and unmount our <code>TopModal</code>.</p>

<p>We put our modal after the <code>Navigator</code> so we can render on top of it.</p>

<h2>Open Modal</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var App = React.createClass({
</span><span class='line'>    render: function() {
</span><span class='line'>      return (
</span><span class='line'>        &lt;View style={styles.flexCenter}&gt;
</span><span class='line'>          &lt;TouchableOpacity onPress={this.props.openModal}&gt;
</span><span class='line'>            &lt;Text&gt;Open Modal&lt;/Text&gt;  
</span><span class='line'>          &lt;/TouchableOpacity&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>      )
</span><span class='line'>    }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>All we do is when we want to open the modal just call the <code>openModal</code> function on props. That will call up to the function in <code>Navigator</code> <code>renderScene</code> and pop open the modal over the existing app.</p>

<h2>The Modal</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var TopModal = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return { offset: new Animated.Value(deviceHeight) }
</span><span class='line'>  },
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>    Animated.timing(this.state.offset, {
</span><span class='line'>      duration: 100,
</span><span class='line'>      toValue: 0
</span><span class='line'>    }).start();
</span><span class='line'>  },
</span><span class='line'>  closeModal: function() {
</span><span class='line'>    Animated.timing(this.state.offset, {
</span><span class='line'>      duration: 100,
</span><span class='line'>      toValue: deviceHeight
</span><span class='line'>    }).start(this.props.closeModal);
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>        &lt;Animated.View style={[styles.modal, styles.flexCenter, {transform: [{translateY: this.state.offset}]}]}&gt;
</span><span class='line'>          &lt;TouchableOpacity onPress={this.closeModal}&gt;
</span><span class='line'>            &lt;Text style={{color: '#FFF'}}&gt;Close Menu&lt;/Text&gt;
</span><span class='line'>          &lt;/TouchableOpacity&gt;
</span><span class='line'>        &lt;/Animated.View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Here we have a basic modal. We set the <code>translateY</code> to the full device height so that it renders off screen, and on mount we slide it up in <code>100ms</code>. On close we slide it down, call the <code>closeModal</code> which will trigger the re-render in our <code>renderScene</code>. This case we won&rsquo;t have <code>modal: true</code> set so our <code>TopModal</code> will just unmount.</p>

<h2>Done</h2>

<p>Hey now go get your modal on. Just remember, React is flexible. Sometimes you need to pass something up to render at the top. Yes slightly a pain, but it&rsquo;s a manageable pain.</p>

<h4>Live Demo <a href="https://rnplay.org/apps/kF7avw">https://rnplay.org/apps/kF7avw</a></h4>

<p><img src="http://i.imgur.com/5LhPD3l.gif" title="I should have made this loop" ></p>

<h2>Full Code</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Text,
</span><span class='line'>  View,
</span><span class='line'>  Navigator,
</span><span class='line'>  TouchableOpacity,
</span><span class='line'>  Animated,
</span><span class='line'>  Dimensions
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  height: deviceHeight
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var TopModal = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return { offset: new Animated.Value(deviceHeight) }
</span><span class='line'>  },
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>    Animated.timing(this.state.offset, {
</span><span class='line'>      duration: 100,
</span><span class='line'>      toValue: 0
</span><span class='line'>    }).start();
</span><span class='line'>  },
</span><span class='line'>  closeModal: function() {
</span><span class='line'>    Animated.timing(this.state.offset, {
</span><span class='line'>      duration: 100,
</span><span class='line'>      toValue: deviceHeight
</span><span class='line'>    }).start(this.props.closeModal);
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>        &lt;Animated.View style={[styles.modal, styles.flexCenter, {transform: [{translateY: this.state.offset}]}]}&gt;
</span><span class='line'>          &lt;TouchableOpacity onPress={this.closeModal}&gt;
</span><span class='line'>            &lt;Text style={{color: '#FFF'}}&gt;Close Menu&lt;/Text&gt;
</span><span class='line'>          &lt;/TouchableOpacity&gt;
</span><span class='line'>        &lt;/Animated.View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var App = React.createClass({
</span><span class='line'>    render: function() {
</span><span class='line'>      return (
</span><span class='line'>        &lt;View style={styles.flexCenter}&gt;
</span><span class='line'>          &lt;TouchableOpacity onPress={this.props.openModal}&gt;
</span><span class='line'>            &lt;Text&gt;Open Modal&lt;/Text&gt;  
</span><span class='line'>          &lt;/TouchableOpacity&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>      )
</span><span class='line'>    }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var RouteStack = {
</span><span class='line'>  app: {
</span><span class='line'>    component: App 
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var ModalApp = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      modal: false 
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  renderScene: function(route, navigator) {
</span><span class='line'>    var Component = route.component;
</span><span class='line'>    return (
</span><span class='line'>      &lt;Component openModal={() =&gt; this.setState({modal: true})}/&gt;
</span><span class='line'>    )
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;Navigator
</span><span class='line'>          initialRoute={RouteStack.app}
</span><span class='line'>          renderScene={this.renderScene}
</span><span class='line'>        /&gt;
</span><span class='line'>        {this.state.modal ? &lt;TopModal closeModal={() =&gt; this.setState({modal: false}) }/&gt; : null }
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>  },
</span><span class='line'>  flexCenter: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    justifyContent: 'center', 
</span><span class='line'>    alignItems: 'center'
</span><span class='line'>  },
</span><span class='line'>  modal: {
</span><span class='line'>    backgroundColor: 'rgba(0,0,0,.8)',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    right: 0,
</span><span class='line'>    bottom: 0,
</span><span class='line'>    left: 0
</span><span class='line'>  }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>



]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native - Morphing SVG Paths with React Art]]></title>
		
		<link href="http://browniefed.com/blog/react-native-morphing-svg-paths-with-react-art/"/>
		<updated>2015-10-14T20:37:00-07:00</updated>
		<id>http://browniefed.com/blog/react-native-morphing-svg-paths-with-react-art</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>More paths, more React Art, and more animations. What else have you come to expect of me. A question was posed on Reactiflux about morphing one path to another with React Art. Of course I took this as a &ldquo;challenge&rdquo;.</p>

<p>I say &ldquo;challenge&rdquo; because it took all of a few moments to check out the ART repo and see the <a href="https://github.com/sebmarkbage/art/blob/master/demos/morph/morph.js">Morph Demo</a> which links to <code>art/morph/path</code>. That&rsquo;s of course what this all about, morphing a path. Sebastian Markbåge has thought of everything.</p>

<p>On Reactiflux the demo of morphing batman logos was proposed and linked to. You can read the orignal source with the linked SVG at <a href="http://tavmjong.free.fr/blog/?p=741">http://tavmjong.free.fr/blog/?p=741</a>.</p>

<h2>What are we building</h2>

<p><img src="http://i.imgur.com/KxNBQsb.gif" title="POW BAM KAPOW" ></p>

<!-- more -->


<h2>Concept</h2>

<p>We&rsquo;re going to take a path. In our case all of the Batman logos, and transform each SVG path into the next until we&rsquo;re all out. Then we&rsquo;re going to transform it into a square.</p>

<h2>Setup</h2>

<p>If you&rsquo;re unsure how to get React Art running on React Native checkout my previous blog post here <a href="http://browniefed.com/blog/2015/05/03/getting-react-art-running-on-react-native/">Getting react-art running on react-native</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var ReactART = require('ReactNativeART');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width,
</span><span class='line'>  height
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Text,
</span><span class='line'>  View,
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  Surface,
</span><span class='line'>  Shape
</span><span class='line'>} = ReactART;
</span><span class='line'>
</span><span class='line'>var Morph = require('art/morph/path');</span></code></pre></td></tr></table></div></figure>


<p>We bring in the usuals, but also require <code>art/morph/path</code> which will do our magic morphing.</p>

<h2>The SVG Paths</h2>

<p>Thanks to the blog post I just parsed out the SVG paths, and tossed them into an array. For the sake of parsing, I map over each and convert them into native React Art paths.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var BatmanLogoSVGs = [
</span><span class='line'>  'M 256,213 C 245,181 206,187 234,262 147,181 169,71.2 233,18   220,56   235,81   283,88   285,78.7 286,69.3 288,60   289,61.3 290,62.7 291,64   291,64   297,63   300,63   303,63   309,64   309,64   310,62.7 311,61.3 312,60   314,69.3 315,78.7 317,88   365,82   380,56   367,18   431,71   453,181 366,262 394,187 356,181 344,213 328,185 309,184 300,284 291,184 272,185 256,213 Z',         
</span><span class='line'>  'M 212,220 C 197,171 156,153 123,221 109,157 120,109  159,63.6 190,114  234,115  254,89.8 260,82.3 268,69.6 270,60.3 273,66.5 275,71.6 280,75.6 286,79.5 294,79.8 300,79.8 306,79.8 314,79.5 320,75.6 325,71.6 327,66.5 330,60.3 332,69.6 340,82.3 346,89.8 366,115  410,114  441,63.6 480,109  491,157 477,221 444,153 403,171 388,220 366,188 316,200 300,248 284,200 234,188 212,220 Z',        
</span><span class='line'>  'M 213,222 C 219,150 165,139 130,183 125,123 171,73.8 247,51.6 205,78   236,108  280,102  281,90.3 282,79   286,68.2 287,72   288,75.8 289,79.7 293,79.7 296,79.7 300,79.7 304,79.7 307,79.7 311,79.7 312,75.8 313,72   314,68.2 318,79   319,90.3 320,102  364,108  395,78   353,51.6 429,73.8 475,123 470,183 435,139 381,150 387,222 364,176 315,172 300,248 285,172 236,176 213,222 Z',        
</span><span class='line'>    // There are many more, truncated for blog reading purposes
</span><span class='line'>];
</span><span class='line'>
</span><span class='line'>var BatmanLogoPaths = BatmanLogoSVGs.map((svg) =&gt; Morph.Path(svg));
</span><span class='line'>
</span><span class='line'>var square = Morph.Path()
</span><span class='line'>  .move(100,0)
</span><span class='line'>  .line(100,0)
</span><span class='line'>  .line(0,100)
</span><span class='line'>  .line(-100,0)
</span><span class='line'>  .close();
</span><span class='line'>
</span><span class='line'>BatmanLogoPaths.push(square);
</span></code></pre></td></tr></table></div></figure>


<p>Then we throw a square on the end.</p>

<h2>Render</h2>

<p>There is nothing special here. We just add a <code>Surface</code> the full width/height of the phone and instead of a string SVG path we give it the transition which just happens to be a <code>MorphPath</code>, which extends from <code>Path</code> which React Art knows what to do with. Fancy.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;Surface width={width} height={height}&gt;
</span><span class='line'>          &lt;Shape x={-100} y={100} d={this.state.transition} fill="#000" /&gt;
</span><span class='line'>        &lt;/Surface&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>The person that created the SVGs made the central point the start of the SVG so we just set it back -100 to center it-ish. I don&rsquo;t know. We fill it with black. Batman likes black.</p>

<h2>Initial Setup</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      transition: Morph.Tween(BatmanLogoPaths[0], BatmanLogoPaths[1])
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._current = 1;
</span><span class='line'>  },
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>    this.animate(null, this.nextAnimation)
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>We start the intial render with a <code>Morph.Tween</code> of the first and second Batman logos. We do a little setup in <code>componentWillMount</code> to say we&rsquo;re currently animating to the second logo (it&rsquo;s a 1 since we have 0 based array indexes).</p>

<p>Then once the component is mounted we kick off the animation with our <code>this.animate</code> call.</p>

<h2>Animate it</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  animate: function(start, cb) {
</span><span class='line'>    requestAnimationFrame((timestamp) =&gt; {
</span><span class='line'>      if (!start) start = timestamp;
</span><span class='line'>      var delta = (timestamp - start) / 1000;
</span><span class='line'>
</span><span class='line'>      if (delta &gt; 1) return cb();
</span><span class='line'>
</span><span class='line'>      this.state.transition.tween(delta);
</span><span class='line'>      this.setState(this.state);
</span><span class='line'>      this.animate(start, cb);
</span><span class='line'>    })
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Our animate call takes a start, and a callback for when the animation is complete. Thanks to React Native with get a polyfilled <code>requestAnimationFrame</code>. If we don&rsquo;t have a start, then we set it to the timestamp that <code>requestAnimationFrame</code> provides us. The start allows us to compute how far along in the animation we are.</p>

<p>The <code>delta</code> is the current <code>timestamp</code> which is some amount of time in the future, minus the <code>start</code>. The <code>/1000</code> is the amount of time each animation will take. So each morph will take <code>1000ms</code> to complete.</p>

<p>If our change is greater than 1 then we know our animation is complete and trigger are callback, and also return so we don&rsquo;t keep animating a complete animation.</p>

<p>We tween our transition with the new <code>delta</code> progress, we trigger a <code>setState</code> to cause our UI to re-render, then we call ourself (aka <code>this.animate</code>), with our <code>start</code> and our <code>callback</code> so we can trigger the next animation frame.</p>

<p>A lot of this is just boilerplate logic you can see here <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame">https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame</a>.</p>

<h2>Animate it Again</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  nextAnimation: function() {
</span><span class='line'>    this._current += 1;
</span><span class='line'>    if (this._current &gt;= BatmanLogoPaths.length) return;
</span><span class='line'>
</span><span class='line'>    this.setState({
</span><span class='line'>      transition: Morph.Tween(BatmanLogoPaths[this._current - 1], BatmanLogoPaths[this._current])
</span><span class='line'>    }, () =&gt; this.animate(null, this.nextAnimation))
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Okay so we need a little logic around keeping track of which logo is transitioning to which other shape. If this function is called it means an animation has completed and we need to trigger the next one.</p>

<p>We add one to the current to setup that we&rsquo;re about to animate to the next logo path.</p>

<p>First we check if it&rsquo;s equal to or somehow greater than the amount of logos we have. If it is we stop animating and just leave the current render as the last shape in the array.</p>

<p>If not we trigger a setState to adjust the <code>this.state.transition</code> (which we pass into the <code>Shape</code>). This just gets set to the <code>this._current - 1</code> logo and then the <code>this._current</code> which is going to be the next logo. Because currently on screen is <code>this._current - 1</code> and we do a <code>setState</code>, nothing will flash/jump since you&rsquo;re rendering the same exact shape again.</p>

<p><code>setState</code> also takes a success callback, meaning the UI has updated, we then kick off the animation. TahDah. Batman Animating.</p>

<h2>More than Batman Logos?</h2>

<p>Of course. You can animate from anything to anything with <code>Morph.Tween</code>. See I animated Batman into a square at the end. But really you can do any sort of path to another path. If you&rsquo;re animating a complex path to another compelx path they not animate elegantly but they&rsquo;ll animate.</p>

<h2>Clean it up</h2>

<p><code>setState</code> is hacky for animations, you could wrap this up just like Animated to make it all nice and performant with <code>setNativeProps</code> but you can take care of that yourself. Vjeux shows how to do that in his React Rally talk, seriously watch it <a href="https://www.youtube.com/watch?v=xtqUJVqpKNo">https://www.youtube.com/watch?v=xtqUJVqpKNo</a>. Also slides here <a href="https://speakerdeck.com/vjeux/react-rally-animated-react-performance-toolbox">https://speakerdeck.com/vjeux/react-rally-animated-react-performance-toolbox</a></p>

<h2>Done</h2>

<p>Okay, so now you know how to morph paths. Go make cool animated transitions on React Native now!</p>

<h4>Live Demo: <a href="https://rnplay.org/apps/9txbFQ">https://rnplay.org/apps/9txbFQ</a></h4>

<h2>Final Code</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var ReactART = require('ReactNativeART');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width,
</span><span class='line'>  height
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Text,
</span><span class='line'>  View,
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  Surface,
</span><span class='line'>  Shape
</span><span class='line'>} = ReactART;
</span><span class='line'>
</span><span class='line'>var Morph = require('art/morph/path');
</span><span class='line'>
</span><span class='line'>var BatmanLogoSVGs = [
</span><span class='line'>  'M 256,213 C 245,181 206,187 234,262 147,181 169,71.2 233,18   220,56   235,81   283,88   285,78.7 286,69.3 288,60   289,61.3 290,62.7 291,64   291,64   297,63   300,63   303,63   309,64   309,64   310,62.7 311,61.3 312,60   314,69.3 315,78.7 317,88   365,82   380,56   367,18   431,71   453,181 366,262 394,187 356,181 344,213 328,185 309,184 300,284 291,184 272,185 256,213 Z',         
</span><span class='line'>  'M 212,220 C 197,171 156,153 123,221 109,157 120,109  159,63.6 190,114  234,115  254,89.8 260,82.3 268,69.6 270,60.3 273,66.5 275,71.6 280,75.6 286,79.5 294,79.8 300,79.8 306,79.8 314,79.5 320,75.6 325,71.6 327,66.5 330,60.3 332,69.6 340,82.3 346,89.8 366,115  410,114  441,63.6 480,109  491,157 477,221 444,153 403,171 388,220 366,188 316,200 300,248 284,200 234,188 212,220 Z',        
</span><span class='line'>  'M 213,222 C 219,150 165,139 130,183 125,123 171,73.8 247,51.6 205,78   236,108  280,102  281,90.3 282,79   286,68.2 287,72   288,75.8 289,79.7 293,79.7 296,79.7 300,79.7 304,79.7 307,79.7 311,79.7 312,75.8 313,72   314,68.2 318,79   319,90.3 320,102  364,108  395,78   353,51.6 429,73.8 475,123 470,183 435,139 381,150 387,222 364,176 315,172 300,248 285,172 236,176 213,222 Z',        
</span><span class='line'>  'M 218,231 C 191,238 165,252 140,266 144,209 156,153  193,93.7 218,106  249,105  280,102  282,90.3 284,78.6 289,67.8 290,71.6 291,75.8 292,79.7 292,79.7 297,79.7 300,79.7 303,79.7 308,79.7 308,79.7 309,75.8 310,71.6 311,67.8 316,78.6 318,90.3 320,102  351,105  382,106  407,93.7 444,153  456,209 460,266 435,252 409,238 382,231 355,224 328,223 300,223 272,223 245,224 218,231 Z',         
</span><span class='line'>  'M 258,243 C 220,201 221,220 253,281 154,243 150,108  229,61.9 242,83   257,98.1 275,110  278,88   282,65.8 285,43.6 287,49.9 288,56.2 290,62.5 293,62.7 297,62.9 300,62.9 303,62.9 307,62.7 310,62.5 312,56.2 313,49.9 315,43.6 318,65.8 322,88   325,110  343,98.1 358,83   371,61.9 450,108  446,243 347,281 379,220 380,201 342,243 330,187 329,202 300,271 271,202 270,187 258,243 Z',         
</span><span class='line'>  'M 235,210 C 214,139 143,145 183,229 108,175 135,70.1 242,48.3 190,85.6 245,142  278,95.5 281,80.2 281,62.7 284,48.7 287,53.9 287,59.1 289,64.5 292,64.7 297,64.2 300,64.2 303,64.2 308,64.7 311,64.5 313,59.1 313,53.9 316,48.7 319,62.7 319,80.2 322,95.5 355,142  410,85.6 358,48.3 465,70.1 492,175 417,229 457,145 386,139 365,210 357,147 309,190 300,271 291,190 243,147 235,210 Z',         
</span><span class='line'>  'M 249,157 C 214,157 201,203 273,255 157,221 157,69   274,32.8 188,87.2 211,140  256,140  291,140  289,128  291,98.1 293,107  293,116  295,125  297,125  298,125  300,125  302,125  305,125  305,125  307,116  307,107  309,98.1 311,128  309,140  344,140  389,140  412,87.2 326,32.8 443,69   443,221 327,255 399,203 386,157 351,157 317,157 300,195 300,238 300,195 283,157 249,157 Z',        
</span><span class='line'>  'M 264,212 C 213,138 150,171 232,244 101,217 112,55.1 257,36.9 182,86.6 222,106  266,106  285,106  284,66.7 286,36.8 288,42.6 289,48.4 291,54.2 291,54.2 297,54.2 300,54.2 303,54.2 309,54.2 309,54.2 311,48.4 312,42.6 314,36.8 316,66.7 315,106  334,106  378,106  418,86.6 343,36.9 488,55.1 499,217 368,244 450,171 387,138 336,212 354,161 300,163 300,249 300,163 246,161 264,212 Z',         
</span><span class='line'>  'M 223,217 C 194,153 165,168 133,219 143,158 161,99.2 189,38.4 214,69.8 241,84.7 272,86.2 272,70.2 273,53.5 273,37.5 275,47.9 278,58.4 280,68.8 287,64.9 292,62.4 300,62.4 308,62.4 313,64.9 320,68.8 322,58.4 325,47.9 327,37.5 327,53.5 328,70.2 328,86.2 359,84.7 386,69.8 411,38.4 439,99.2 457,158 467,219 435,168 406,153 377,217 350,162 319,176 300,245 281,176 250,162 223,217 Z',         
</span><span class='line'>  'M 231,185 C 186,159 161,180 190,215 86.2,180 92.6,99.6 211,68.9 195,112 254,141 279,96.7 279,83.2 279,69.8 279,56.3 283,63.6 288,70.8 292,78.1 295,78.1 297,78.1 300,78.1 303,78.1 305,78.1 308,78.1 312,70.8 317,63.6 321,56.3 321,69.8 321,83.2 321,96.7 346,141 405,112 389,68.9 507,99.6 514,180 410,215 439,180 414,159 369,185 351,165 324,167 300,216 276,167 249,165 231,185 Z',     
</span><span class='line'>  'M 194,146 C 192,107 164,76.4 136,45.6 166,55.7 196,65.7 226,75.8 238,107 265,163 279,136 282,130 281,108 281,94.8 285,103 288,111 293,115 295,116 298,117 300,117 302,117 305,116 307,115 312,111 315,103 319,94.8 319,108 318,130 321,136 335,163 362,107 374,75.8 404,65.7 434,55.7 464,45.6 436,76.4 408,107 406,146 355,158 323,189 300,231 277,189 245,158 194,146 Z',        
</span><span class='line'>  'M 209,182 C 184,132 176,138 113,161 140,136 168,111 196,86.5 221,104 247,115 278,115 281,99.9 285,85.5 287,70.2 289,78.5 292,88.4 294,96.7 296,96.7 298,96.7 300,96.7 302,96.7 304,96.7 306,96.7 308,88.4 311,78.5 313,70.2 315,85.5 319,99.9 322,115 353,115 379,104 404,86.5 432,111 460,136 487,161 424,138 416,132 391,182 332,150 341,161 300,214 259,161 268,150 209,182 Z',         
</span><span class='line'>  'M 198,171 C 189,131 150,120 113,140 142,104 182,74.4 249,70.2 208,89 248,125 278,106 285,101 286,93.5 286,74.2 288,78.1 291,81.5 294,83.2 296,84.2 298,84.7 300,84.7 302,84.7 304,84.2 306,83.2 309,81.5 312,78.1 314,74.2 314,93.5 315,101 322,106 352,125 392,89 351,70.2 418,74.4 458,104 487,140 450,120 411,131 402,171 357,147 322,171 300,214 278,171 243,147 198,171 Z',         
</span><span class='line'>  'M 202,170 C 188,115 157,108 124,105 146,84.3 171,71.5 199,70.2 211,98.6 243,103 277,106 279,99.3 281,92.6 283,86 285,91.9 287,97.9 290,104 293,104 297,104 300,104 303,104 307,104 310,104 313,97.9 315,91.9 317,86 319,92.6 321,99.3 323,106 357,103 389,98.6 401,70.2 429,71.5 454,84.3 476,105 443,108 412,115 398,170 349,157 318,175 300,214 282,175 251,157 202,170 Z',         
</span><span class='line'>  'M 220,179 C 200,127 150,130 123,175 122,110 160,85.1 201,64 208,99.2 243,111 268,92.9 278,86.1 284,68.2 287,40.7 289,49.6 292,58.4 294,67.3 296,67.3 298,67.3 300,67.3 302,67.3 304,67.3 306,67.3 308,58.4 311,49.6 313,40.7 316,68.2 322,86.1 332,92.9 357,111 392,99.3 399,64 440,85.1 478,110 477,175 450,130 400,127 380,179 355,155 305,208 300,247 295,208 245,155 220,179 Z',         
</span><span class='line'>  'M 166,154 C 179,119 154,95.4 114,79.3 155,79.1 197,78.9 239,78.7 242,103 250,109 283,109 289,109 290,93.9 291,83.7 292,88.3 292,92.9 293,97.5 295,97.5 298,97.5 300,97.5 302,97.5 305,97.5 307,97.5 308,92.9 308,88.3 309,83.7 310,93.9 311,109 317,109 350,109 358,103 361,78.7 403,78.9 445,79.1 486,79.3 446,95.4 421,119 434,154 377,151 320,151 300,207 280,151 223,151 166,154 Z'
</span><span class='line'>];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var BatmanLogoPaths = BatmanLogoSVGs.map((svg) =&gt; Morph.Path(svg));
</span><span class='line'>
</span><span class='line'>var square = Morph.Path()
</span><span class='line'>  .move(100,0)
</span><span class='line'>  .line(100,0)
</span><span class='line'>  .line(0,100)
</span><span class='line'>  .line(-100,0)
</span><span class='line'>  .close();
</span><span class='line'>
</span><span class='line'>BatmanLogoPaths.push(square);
</span><span class='line'>
</span><span class='line'>var rn_morph = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      transition: Morph.Tween(BatmanLogoPaths[0], BatmanLogoPaths[1])
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._current = 1;
</span><span class='line'>  },
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>    this.animate(null, this.nextAnimation)
</span><span class='line'>  },
</span><span class='line'>  nextAnimation: function() {
</span><span class='line'>    this._current += 1;
</span><span class='line'>    if (this._current &gt;= BatmanLogoPaths.length) return;
</span><span class='line'>
</span><span class='line'>    this.setState({
</span><span class='line'>      transition: Morph.Tween(BatmanLogoPaths[this._current - 1], BatmanLogoPaths[this._current])
</span><span class='line'>    }, () =&gt; this.animate(null, this.nextAnimation))
</span><span class='line'>  },
</span><span class='line'>  animate: function(start, cb) {
</span><span class='line'>    requestAnimationFrame((timestamp) =&gt; {
</span><span class='line'>      if (!start) start = timestamp;
</span><span class='line'>      var delta = (timestamp - start) / 1000;
</span><span class='line'>
</span><span class='line'>      if (delta &gt; 1) return cb();
</span><span class='line'>
</span><span class='line'>      this.state.transition.tween(delta);
</span><span class='line'>      this.setState(this.state);
</span><span class='line'>      this.animate(start, cb);
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;Surface width={width} height={height}&gt;
</span><span class='line'>          &lt;Shape x={-100} y={100} d={this.state.transition} fill="#000" /&gt;
</span><span class='line'>        &lt;/Surface&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>AppRegistry.registerComponent('rn_morph', () =&gt; rn_morph);
</span></code></pre></td></tr></table></div></figure>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native - How to make Facebook Reactions]]></title>
		
		<link href="http://browniefed.com/blog/react-native-how-to-make-facebook-reactions/"/>
		<updated>2015-10-11T11:35:00-07:00</updated>
		<id>http://browniefed.com/blog/react-native-how-to-make-facebook-reactions</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Facebook reactions is a new liking system that Facebook is trialing on a limited basis. Why wait for them to roll it out when we can roll it out ourselves</p>

<p>Thanks to <a href="http://www.engadget.com/2015/10/08/facebook-reactions/">Engadget</a> who created a gif of the animations from a youtube video. After a little slicing up and conversion from white to transparent we have a nice bunch of terrible animated gifs&hellip; but they&rsquo;re animated so deal with it. Like/Love aren&rsquo;t transparent since imagmagick was destroying the white in them.</p>

<p><strong>This code will target .12 and above, running on .11 seemed to cause some slightly different layout issues. I&rsquo;ve fixed them on RNPlay, so just a heads up. The difference is add <code>height:50</code> to our <code>likeContainer</code> </strong></p>

<p><strong>Update &ndash; Android:</strong></p>

<p>Animated Gifs are coming to React Native Android in .13. Also Android does not support <code>overflow: visible</code> so in order to get android to work we would need to get creative. On open they sit within the <code>overflow: hidden</code> container, once slid in we&rsquo;d have to move them outside. Although they are gifs, so you&rsquo;d have to find a way to sync em up.</p>

<p>Maybe 2 sets, one slides in, the other is rendered but hidden, then you toggle which is hidden and slide the other up. Fun stuff!</p>

<h2>What are we building</h2>

<p><img src="http://i.imgur.com/dFLU8SI.gif" title="Neato" ></p>

<!-- more -->


<p></p>

<h2>Concept</h2>

<p>While holding down a button a pop up will show up, animated gifs will slide up from the bottom. While sliding and hovering over an item it will slide up slightly and scale up in size. On release of the finger, that item is selected, the images slide down and the pop up disappears.</p>

<p>This doesn&rsquo;t sound too bad, there are a few slight issues we&rsquo;ll run into that I&rsquo;ll call out. The main one is just the border around the container. We get creative with the component structure so the images will animate over the top of the border and not underneath it.</p>

<h2>Setup</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var {
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Text,
</span><span class='line'>  Image,
</span><span class='line'>  View,
</span><span class='line'>  PanResponder,
</span><span class='line'>  TouchableOpacity,
</span><span class='line'>  Animated
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var images = [
</span><span class='line'>  {id: 'like', img: 'http://i.imgur.com/LwCYmcM.gif'},
</span><span class='line'>  {id: 'love', img: 'http://i.imgur.com/k5jMsaH.gif'},
</span><span class='line'>  {id: 'haha', img: 'http://i.imgur.com/f93vCxM.gif'},
</span><span class='line'>  {id: 'yay', img: 'http://i.imgur.com/a44ke8c.gif'},
</span><span class='line'>  {id: 'wow', img: 'http://i.imgur.com/9xTkN93.gif'},
</span><span class='line'>  {id: 'sad', img: 'http://i.imgur.com/tFOrN5d.gif'},
</span><span class='line'>  {id: 'angry', img: 'http://i.imgur.com/1MgcQg0.gif'}
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>var App = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      selected: '',
</span><span class='line'>      open: false
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._imgLayouts = {};
</span><span class='line'>    this._imageAnimations = {};
</span><span class='line'>    this._scaleAnimation = new Animated.Value(0);
</span><span class='line'>
</span><span class='line'>    images.forEach((img) =&gt; {
</span><span class='line'>      this._imageAnimations[img.id] = {
</span><span class='line'>        position: new Animated.Value(55),
</span><span class='line'>        scale: new Animated.Value(1)
</span><span class='line'>      };
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._panResponder = PanResponder.create({
</span><span class='line'>      onStartShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onStartShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>    });
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;View
</span><span class='line'>          style={styles.center}
</span><span class='line'>          {...this._panResponder.panHandlers}
</span><span class='line'>        &gt;
</span><span class='line'>          &lt;Text&gt;Like&lt;/Text&gt;
</span><span class='line'>          &lt;Text&gt;You selected: {this.state.selected}&lt;/Text&gt;
</span><span class='line'>          &lt;Animated.View 
</span><span class='line'>            style={[styles.likeContainer, this.getLikeContainerStyle()]}
</span><span class='line'>          &gt;
</span><span class='line'>            &lt;View style={styles.borderContainer} /&gt;
</span><span class='line'>            &lt;View style={styles.imgContainer}&gt;
</span><span class='line'>              {this.getImages()}
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>          &lt;/Animated.View&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>We setup our state, we have a <code>selected</code> which we will use to just display some selected text. Then we have an <code>open</code> which we set to false. I am not showing it yet, but we&rsquo;ll need to use <code>open</code> to dynamically control <code>overflow</code> for the container that holds our images so they can slide around correctly.</p>

<p>In our <code>componentWillMount</code> we setup some objects and create some animations. We&rsquo;ll need the coordinates of each image for selection purposes, we&rsquo;ll also have a map of our image animations, and we&rsquo;ll setup <code>_scaleAnimation</code> which we&rsquo;ll use to scale up the container when a user presses down.</p>

<p>Then we loop over each image, create a position, and scale animation for each. Why <code>55</code> and why not <code>ValueXY</code>? Well we are only animating the Y value so no need to have an extra animation. The <code>55</code> is our initial position, which we pass to <code>translateY</code> meaning, start this image <code>55</code> pixels down so we can eventually slide it up.</p>

<p>Finally we&rsquo;ll create a PanResponder to handle users pressing.</p>

<h2>Handle Press and Open</h2>

<p>So we&rsquo;ll put our <code>panHandlers</code> on our wrapping view so our coordinates are correct relatively for the images. That looks like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   &lt;View
</span><span class='line'>      style={styles.center}
</span><span class='line'>      {...this._panResponder.panHandlers}
</span><span class='line'>    &gt;
</span><span class='line'>    ///Other views
</span><span class='line'>    &lt;/View&gt;</span></code></pre></td></tr></table></div></figure>


<p>Then we need to adjust our PanResponder to call an open function on grant. Grant being the first thing that gets called when the touch is allowed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>this._panResponder = PanResponder.create({
</span><span class='line'>      onStartShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onStartShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onPanResponderGrant: this.open
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>Lets adjust our <code>Animated.View</code> container.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getLikeContainerStyle: function() {
</span><span class='line'>    return {
</span><span class='line'>            transform: [{scaleY: this._scaleAnimation}],
</span><span class='line'>            overflow: this.state.open ? 'visible': 'hidden'
</span><span class='line'>          };
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  //other render components
</span><span class='line'>  &lt;Animated.View 
</span><span class='line'>    style={[styles.likeContainer, this.getLikeContainerStyle()]}
</span><span class='line'>  &gt;
</span><span class='line'>    &lt;View style={styles.borderContainer} /&gt;
</span><span class='line'>    &lt;View style={styles.imgContainer}&gt;
</span><span class='line'>      {this.getImages()}
</span><span class='line'>    &lt;/View&gt;
</span><span class='line'>  &lt;/Animated.View&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now our open function.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  open: function() {
</span><span class='line'>    Animated.parallel([
</span><span class='line'>      Animated.timing(this._scaleAnimation, {
</span><span class='line'>        duration: 100,
</span><span class='line'>        toValue: 1
</span><span class='line'>      }),
</span><span class='line'>      Animated.stagger(50, this.getImageAnimationArray(0))
</span><span class='line'>    ]).start(() =&gt; this.setState({open: true}));
</span><span class='line'>  },
</span><span class='line'>  getImageAnimationArray: function(toValue) {
</span><span class='line'>    return images.map((img) =&gt; {
</span><span class='line'>      return Animated.timing(this._imageAnimations[img.id].position, {
</span><span class='line'>        duration: 200,
</span><span class='line'>        toValue: toValue
</span><span class='line'>      })
</span><span class='line'>    });
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll queue up some <code>parallel</code> animations so they run at the same time. The first is the initial scaling of the container. We&rsquo;ll do it over <code>100ms</code>, and go from 0 to 1.
The next thing we&rsquo;ll do is use <code>Animated.stagger</code>, this will trigger an array of animations, but with a delay in between each one. That means we can easily slide up each image reaction separately with <code>50ms</code> inbetween. What a handy function.</p>

<p>So we&rsquo;ll do a little forward thinking and create a <code>getImageAnimationArray</code> function because we&rsquo;ll have to do the exact opposite for the <code>close</code> so lets make a reusable function.</p>

<p>Finally we&rsquo;ll <code>setState</code> AFTER the animation is complete. This will not cause a jitter in our animation. This also allows the container to hide the images to start so they slide up. Then after the container is open we set <code>overflow: visible</code> so we can scale and slide them up and they&rsquo;ll actually be visible. If we don&rsquo;t do this then the images won&rsquo;t be able visible when the user tries to select them.</p>

<h2>Handle release and close</h2>

<p>Now modify the <code>_panResponder</code> for the release to close it, we basically just do the exact opposite of open.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  onPanResponderRelease: (evt, gestureState) =&gt; {
</span><span class='line'>     this.close()
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>And our close function</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  close: function(cb) {
</span><span class='line'>    this.setState({open: false}, () =&gt; {
</span><span class='line'>      Animated.stagger(100,[
</span><span class='line'>        Animated.parallel(this.getImageAnimationArray(55, 0).reverse() ),
</span><span class='line'>        Animated.timing(this._scaleAnimation, {
</span><span class='line'>          duration: 100,
</span><span class='line'>          toValue: 0
</span><span class='line'>        })
</span><span class='line'>      ]).start(cb);
</span><span class='line'>    })
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>We need to do a setState to make the containers overflow hidden. This is tricky because it&rsquo;ll instantly cause anything selected to be hidden. So we&rsquo;ll need to account for this in our release function later. But at the moment, we set <code>open</code> to false.</p>

<p>Rather than parallel we&rsquo;ll stagger our 2 animations. Our first will start and cause our reaction gifs to all slide down at the same time. Then <code>100ms</code> later we&rsquo;ll scale the container down to 0. This just adds a slight disappearing effect.</p>

<h2>Calculate image positions</h2>

<p>Before we can do image selections we need to know where our images coordinates are. Luckily we can do that with the <code>onLayout</code> callback.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getImages: function() {
</span><span class='line'>    return images.map((img) =&gt; {
</span><span class='line'>      return (
</span><span class='line'>        &lt;Animated.Image 
</span><span class='line'>          onLayout={this.handleLayoutPosition.bind(this, img.id)}
</span><span class='line'>          key={img.id} 
</span><span class='line'>          source={{uri: img.img}} 
</span><span class='line'>          style={[
</span><span class='line'>              styles.img,
</span><span class='line'>              {
</span><span class='line'>                transform: [
</span><span class='line'>                  {scale: this._imageAnimations[img.id].scale},
</span><span class='line'>                  {translateY: this._imageAnimations[img.id].position}
</span><span class='line'>                ]
</span><span class='line'>              }
</span><span class='line'>          ]} 
</span><span class='line'>        /&gt;
</span><span class='line'>      );
</span><span class='line'>    })
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>This is our image rendering function. It iterates over our images, passes in all necesary info and binds our <code>onLayout</code> function with the <code>image.id</code> which is just the reaction name. You can see here we also pass in our transform animations for <code>scale</code> and <code>translateY</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  handleLayoutPosition: function(img, position) {
</span><span class='line'>    this._imgLayouts[img] = {
</span><span class='line'>      left: position.nativeEvent.layout.x,
</span><span class='line'>      right: position.nativeEvent.layout.x + position.nativeEvent.layout.width
</span><span class='line'>    }
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Here we setup a map, we&rsquo;ll set the <code>left</code> which is just the relative <code>x</code> coordinate, then setup our <code>right</code> which is <code>x + width</code>.</p>

<h2>Add in hover abilities</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  onPanResponderMove: (evt, gestureState) =&gt; {
</span><span class='line'>    var hoveredImg = this.getHoveredImg(Math.ceil(evt.nativeEvent.locationX));
</span><span class='line'>
</span><span class='line'>    if (hoveredImg && this._hoveredImg !== hoveredImg) {
</span><span class='line'>      this.animateSelected(this._imageAnimations[hoveredImg])
</span><span class='line'>    }
</span><span class='line'>    if (this._hoveredImg !== hoveredImg && this._hoveredImg) {
</span><span class='line'>      this.animateFromSelect(this._imageAnimations[this._hoveredImg]);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    this._hoveredImg = hoveredImg;
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>We just do some basic logic here. If we have a <code>hoveredImg</code> and it&rsquo;s different than before, then call the animate function to make the image slide and scale up.
Also if we have a current <code>this._hoveredImg</code> and it&rsquo;s different then that means there is a new hovered image, so lets animate the previous image and scale it back down.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  animateSelected: function(imgAnimations) {
</span><span class='line'>    Animated.parallel([
</span><span class='line'>      Animated.timing(imgAnimations.position, {
</span><span class='line'>        duration: 150,
</span><span class='line'>        toValue: -30
</span><span class='line'>      }),
</span><span class='line'>      Animated.timing(imgAnimations.scale, {
</span><span class='line'>        duration: 150,
</span><span class='line'>        toValue: 1.8
</span><span class='line'>      })
</span><span class='line'>    ]).start();
</span><span class='line'>  },
</span><span class='line'>  animateFromSelect: function(imgAnimations, cb) {
</span><span class='line'>    Animated.parallel([
</span><span class='line'>      Animated.timing(imgAnimations.position, {
</span><span class='line'>        duration: 50,
</span><span class='line'>        toValue: 0
</span><span class='line'>      }),
</span><span class='line'>      Animated.timing(imgAnimations.scale, {
</span><span class='line'>        duration: 50,
</span><span class='line'>        toValue: 1
</span><span class='line'>      })
</span><span class='line'>    ]).start(cb);
</span><span class='line'>  },
</span><span class='line'>  getHoveredImg: function(x) {
</span><span class='line'>    return Object.keys(this._imgLayouts).find((key) =&gt; {
</span><span class='line'>      return x &gt;= this._imgLayouts[key].left && x &lt;= this._imgLayouts[key].right;
</span><span class='line'>    })
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Nothing too much here to call out. Our <code>getHoveredImg</code> function runs through our layouts, and just checks if the <code>x</code> coordinate of the finger press is between the <code>left</code> and <code>right</code>. If it finds one it returns the reaction id.</p>

<p>The <code>animateSelected</code> and <code>animatedFromSelect</code> both take one the image animation objects and applies different animations to each.</p>

<h2>Add in selection text</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  onPanResponderRelease: (evt, gestureState) =&gt; {
</span><span class='line'>    if (this._hoveredImg) {
</span><span class='line'>      this.animateFromSelect(this._imageAnimations[this._hoveredImg], this.close.bind(this, this.afterClose) )
</span><span class='line'>    } else {
</span><span class='line'>      this.close(this.afterClose);
</span><span class='line'>    }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>I had mentioned this before. On the release if we have a current selection, then we need to first animate the selected image back to it&rsquo;s original position, which we have <code>animateFromSelect</code> already. Then when that is complete the callback is called which is our close function, which has a callback to trigger after close.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  afterClose: function() {
</span><span class='line'>    if (this._hoveredImg) {
</span><span class='line'>      this.setState({
</span><span class='line'>        selected: this._hoveredImg
</span><span class='line'>      })
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    this._hoveredImg = '';
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Our after close just sets some text of the hovered img and clears it. This may not be necessary for an actual app, but this is just so I can have some text to show a user they selected a reaction.</p>

<h2>Weird setup and styles</h2>

<p>I&rsquo;ll just point out some &ldquo;weird&rdquo; things I&rsquo;m doing to make things work correctly. Mainly rather than adding in the border on the <code>likeContainer</code> we need to add in 2 separate containers.</p>

<p>Our element structure</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Animated.View 
</span><span class='line'>            style={[styles.likeContainer, this.getLikeContainerStyle()]}
</span><span class='line'>          &gt;
</span><span class='line'>            &lt;View style={styles.borderContainer} /&gt;
</span><span class='line'>            &lt;View style={styles.imgContainer}&gt;
</span><span class='line'>              {this.getImages()}
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>          &lt;/Animated.View&gt;</span></code></pre></td></tr></table></div></figure>


<p>Our weird styling.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  likeContainer: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left: -10,
</span><span class='line'>    top: -30,
</span><span class='line'>    padding: 5,
</span><span class='line'>    flex: 1,
</span><span class='line'>    backgroundColor: '#FFF',
</span><span class='line'>    borderColor: 'transparent',
</span><span class='line'>    borderWidth: 0,
</span><span class='line'>    borderRadius: 20,
</span><span class='line'>  },
</span><span class='line'>  borderContainer: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left: 0,
</span><span class='line'>    right: 0,
</span><span class='line'>    top: 0,
</span><span class='line'>    bottom: 0,
</span><span class='line'>    borderWidth: 1,
</span><span class='line'>    borderColor: '#444',
</span><span class='line'>    borderRadius: 20
</span><span class='line'>  },
</span><span class='line'>  imgContainer: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    flexDirection: 'row',
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>The <code>borderContainer</code> is absolutely positioned inside of the <code>likeContainer</code>. The <code>borderContainer</code> is just that, a bunch of border data.</p>

<p>The <code>likeContainer</code> also has border radius, transparent border styling so that it is shaped perfectly for overflow when the images slide down.</p>

<h2>DONE</h2>

<p>And there we have it. This is by no means an exact replica. It needs some serious polish and also needs to add a delay before opening when the users presses. It&rsquo;s good enough for me though. So go forth and add reactions to your app!</p>

<p>I didn&rsquo;t do anything crazy and assumed it would work on android. There a few issues with it so I&rsquo;m not sure exactly what&rsquo;s going on.</p>

<h4>Check it out live on RNPlay <a href="https://rnplay.org/apps/lIVMng">https://rnplay.org/apps/lIVMng</a></h4>

<p>As stated before there are minor tweaks from the code to make it work with react .11, not entirely certain why there are differences but there are.</p>

<p><img src="http://i.imgur.com/dFLU8SI.gif" title="Neato" ></p>

<p>Full code here</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var {
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Text,
</span><span class='line'>  Image,
</span><span class='line'>  View,
</span><span class='line'>  PanResponder,
</span><span class='line'>  TouchableOpacity,
</span><span class='line'>  Animated
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var images = [
</span><span class='line'>  {id: 'like', img: 'http://i.imgur.com/LwCYmcM.gif'},
</span><span class='line'>  {id: 'love', img: 'http://i.imgur.com/k5jMsaH.gif'},
</span><span class='line'>  {id: 'haha', img: 'http://i.imgur.com/f93vCxM.gif'},
</span><span class='line'>  {id: 'yay', img: 'http://i.imgur.com/a44ke8c.gif'},
</span><span class='line'>  {id: 'wow', img: 'http://i.imgur.com/9xTkN93.gif'},
</span><span class='line'>  {id: 'sad', img: 'http://i.imgur.com/tFOrN5d.gif'},
</span><span class='line'>  {id: 'angry', img: 'http://i.imgur.com/1MgcQg0.gif'}
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>var App = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      selected: '',
</span><span class='line'>      open: false
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._imgLayouts = {};
</span><span class='line'>    this._imageAnimations = {};
</span><span class='line'>    this._hoveredImg = '';
</span><span class='line'>
</span><span class='line'>    this._scaleAnimation = new Animated.Value(0);
</span><span class='line'>
</span><span class='line'>    images.forEach((img) =&gt; {
</span><span class='line'>      this._imageAnimations[img.id] = {
</span><span class='line'>        position: new Animated.Value(55),
</span><span class='line'>        scale: new Animated.Value(1)
</span><span class='line'>      };
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>    this._panResponder = PanResponder.create({
</span><span class='line'>      onStartShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onStartShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onPanResponderGrant: this.open,
</span><span class='line'>      onPanResponderMove: (evt, gestureState) =&gt; {
</span><span class='line'>        var hoveredImg = this.getHoveredImg(Math.ceil(evt.nativeEvent.locationX));
</span><span class='line'>
</span><span class='line'>        if (hoveredImg && this._hoveredImg !== hoveredImg) {
</span><span class='line'>          this.animateSelected(this._imageAnimations[hoveredImg])
</span><span class='line'>        }
</span><span class='line'>        if (this._hoveredImg !== hoveredImg && this._hoveredImg) {
</span><span class='line'>          this.animateFromSelect(this._imageAnimations[this._hoveredImg]);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        this._hoveredImg = hoveredImg;
</span><span class='line'>      },
</span><span class='line'>      onPanResponderRelease: (evt, gestureState) =&gt; {
</span><span class='line'>        if (this._hoveredImg) {
</span><span class='line'>          this.animateFromSelect(this._imageAnimations[this._hoveredImg], this.close.bind(this, this.afterClose) )
</span><span class='line'>        } else {
</span><span class='line'>          this.close(this.afterClose);
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    });
</span><span class='line'>  },
</span><span class='line'>  afterClose: function() {
</span><span class='line'>    if (this._hoveredImg) {
</span><span class='line'>      this.setState({
</span><span class='line'>        selected: this._hoveredImg
</span><span class='line'>      })
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    this._hoveredImg = '';
</span><span class='line'>  },
</span><span class='line'>  animateSelected: function(imgAnimations) {
</span><span class='line'>    Animated.parallel([
</span><span class='line'>      Animated.timing(imgAnimations.position, {
</span><span class='line'>        duration: 150,
</span><span class='line'>        toValue: -30
</span><span class='line'>      }),
</span><span class='line'>      Animated.timing(imgAnimations.scale, {
</span><span class='line'>        duration: 150,
</span><span class='line'>        toValue: 1.8
</span><span class='line'>      })
</span><span class='line'>    ]).start();
</span><span class='line'>  },
</span><span class='line'>  animateFromSelect: function(imgAnimations, cb) {
</span><span class='line'>    Animated.parallel([
</span><span class='line'>      Animated.timing(imgAnimations.position, {
</span><span class='line'>        duration: 50,
</span><span class='line'>        toValue: 0
</span><span class='line'>      }),
</span><span class='line'>      Animated.timing(imgAnimations.scale, {
</span><span class='line'>        duration: 50,
</span><span class='line'>        toValue: 1
</span><span class='line'>      })
</span><span class='line'>    ]).start(cb);
</span><span class='line'>  },
</span><span class='line'>  getHoveredImg: function(x) {
</span><span class='line'>    return Object.keys(this._imgLayouts).find((key) =&gt; {
</span><span class='line'>      return x &gt;= this._imgLayouts[key].left && x &lt;= this._imgLayouts[key].right;
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  getImageAnimationArray: function(toValue) {
</span><span class='line'>    return images.map((img) =&gt; {
</span><span class='line'>      return Animated.timing(this._imageAnimations[img.id].position, {
</span><span class='line'>        duration: 200,
</span><span class='line'>        toValue: toValue
</span><span class='line'>      })
</span><span class='line'>    });
</span><span class='line'>  },
</span><span class='line'>  open: function() {
</span><span class='line'>    Animated.parallel([
</span><span class='line'>      Animated.timing(this._scaleAnimation, {
</span><span class='line'>        duration: 100,
</span><span class='line'>        toValue: 1
</span><span class='line'>      }),
</span><span class='line'>      Animated.stagger(50, this.getImageAnimationArray(0))
</span><span class='line'>    ]).start(() =&gt; this.setState({open: true}));
</span><span class='line'>  },
</span><span class='line'>  close: function(cb) {
</span><span class='line'>    this.setState({open: false}, () =&gt; {
</span><span class='line'>      Animated.stagger(100,[
</span><span class='line'>        Animated.parallel(this.getImageAnimationArray(55, 0).reverse() ),
</span><span class='line'>        Animated.timing(this._scaleAnimation, {
</span><span class='line'>          duration: 100,
</span><span class='line'>          toValue: 0
</span><span class='line'>        })
</span><span class='line'>      ]).start(cb);
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>  handleLayoutPosition: function(img, position) {
</span><span class='line'>    this._imgLayouts[img] = {
</span><span class='line'>      left: position.nativeEvent.layout.x,
</span><span class='line'>      right: position.nativeEvent.layout.x + position.nativeEvent.layout.width
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  getImages: function() {
</span><span class='line'>    return images.map((img) =&gt; {
</span><span class='line'>      return (
</span><span class='line'>        &lt;Animated.Image 
</span><span class='line'>          onLayout={this.handleLayoutPosition.bind(this, img.id)}
</span><span class='line'>          key={img.id} 
</span><span class='line'>          source={{uri: img.img}} 
</span><span class='line'>          style={[
</span><span class='line'>              styles.img,
</span><span class='line'>              {
</span><span class='line'>                transform: [
</span><span class='line'>                  {scale: this._imageAnimations[img.id].scale},
</span><span class='line'>                  {translateY: this._imageAnimations[img.id].position}
</span><span class='line'>                ]
</span><span class='line'>              }
</span><span class='line'>          ]} 
</span><span class='line'>        /&gt;
</span><span class='line'>      );
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>  getLikeContainerStyle: function() {
</span><span class='line'>    return {
</span><span class='line'>            transform: [{scaleY: this._scaleAnimation}],
</span><span class='line'>            overflow: this.state.open ? 'visible': 'hidden',
</span><span class='line'>          };
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;View
</span><span class='line'>          style={styles.center}
</span><span class='line'>          {...this._panResponder.panHandlers}
</span><span class='line'>        &gt;
</span><span class='line'>          &lt;Text&gt;Like&lt;/Text&gt;
</span><span class='line'>          &lt;Text&gt;You selected: {this.state.selected}&lt;/Text&gt;
</span><span class='line'>          &lt;Animated.View 
</span><span class='line'>            style={[styles.likeContainer, this.getLikeContainerStyle()]}
</span><span class='line'>          &gt;
</span><span class='line'>            &lt;View style={styles.borderContainer} /&gt;
</span><span class='line'>            &lt;View style={styles.imgContainer}&gt;
</span><span class='line'>              {this.getImages()}
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>          &lt;/Animated.View&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>  },
</span><span class='line'>  center: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left: 50,
</span><span class='line'>    top: 300
</span><span class='line'>  },
</span><span class='line'>  likeContainer: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left: -10,
</span><span class='line'>    top: -30,
</span><span class='line'>    padding: 5,
</span><span class='line'>    flex: 1,
</span><span class='line'>    backgroundColor: '#FFF',
</span><span class='line'>    borderColor: 'transparent',
</span><span class='line'>    borderWidth: 0,
</span><span class='line'>    borderRadius: 20,
</span><span class='line'>  },
</span><span class='line'>  borderContainer: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left: 0,
</span><span class='line'>    right: 0,
</span><span class='line'>    top: 0,
</span><span class='line'>    bottom: 0,
</span><span class='line'>    borderWidth: 1,
</span><span class='line'>    borderColor: '#444',
</span><span class='line'>    borderRadius: 20
</span><span class='line'>  },
</span><span class='line'>  imgContainer: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    flexDirection: 'row',
</span><span class='line'>  },
</span><span class='line'>  img: {
</span><span class='line'>    marginLeft: 5,
</span><span class='line'>    marginRight: 5,
</span><span class='line'>    width: 30,
</span><span class='line'>    height: 30,
</span><span class='line'>    overflow: 'visible'
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>module.exports = App;</span></code></pre></td></tr></table></div></figure>



]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native - Pan Responder inside of a ScrollView]]></title>
		
		<link href="http://browniefed.com/blog/react-native-pan-responder-inside-of-a-scrollview/"/>
		<updated>2015-10-10T06:59:00-07:00</updated>
		<id>http://browniefed.com/blog/react-native-pan-responder-inside-of-a-scrollview</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<p>Lets talk <code>PanResponder</code> in a <code>ScrollView</code>. This gets brought up frequently, so lets address it.</p>

<h2>Scenario</h2>

<p>You&rsquo;ve got a <code>PanResponder</code> in your <code>ScrollView</code>. When you scroll you want it to scroll, when you interact with the component with the <code>PanResponder</code> you want it to do <code>PanResponder</code> things.</p>

<h2>What happens</h2>

<p>Things start scrolling just fine. You attemp to drag, all goes swimmingly, then the <code>ScrollView</code> scrolls, your drag stops working and it just sits there stuck until you go re-interact with it. Yikes. You curse the react native gods and begrudgingly start learning Objective-C.</p>

<h2>Janky</h2>

<p><img src="http://i.imgur.com/2d8nB6u.gif" title="Screw it, lets just go native" ></p>

<!-- more -->


<h2>Solution</h2>

<p>The magic solution is <code>scrollEnabled={false}</code>. That&rsquo;s it. Seriously. Sadly it&rsquo;s only supported on <code>ios</code> as of me writing this blog post. I&rsquo;m sure it&rsquo;ll be supported in the future for <code>android</code>.</p>

<p><img src="http://i.imgur.com/Z34hsmN.gif" title="Sort of acceptable" ></p>

<h2>Done</h2>

<h4>Play with it here <a href="https://rnplay.org/apps/we3HnA">https://rnplay.org/apps/we3HnA</a></h4>

<h2>Full Code Here</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict';
</span><span class='line'>
</span><span class='line'>var React = require('react-native');
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  PanResponder,
</span><span class='line'>  ScrollView,
</span><span class='line'>  View,
</span><span class='line'>  Animated,
</span><span class='line'>  Text
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var SampleApp = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>        return {
</span><span class='line'>      scroll: true,
</span><span class='line'>      pan: new Animated.ValueXY()
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._panResponder = PanResponder.create({
</span><span class='line'>      onStartShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onStartShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onPanResponderGrant: () =&gt; this.setState({scroll: false}),
</span><span class='line'>      onPanResponderMove: Animated.event([null, {dx: this.state.pan.x, dy: this.state.pan.y}]),
</span><span class='line'>        onPanResponderRelease: () =&gt; this.setState({scroll: true})
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>                &lt;ScrollView 
</span><span class='line'>            style={{flex: 1}}
</span><span class='line'>          scrollEnabled={this.state.scroll}                      
</span><span class='line'>        &gt;
</span><span class='line'>            &lt;Animated.View 
</span><span class='line'>                style={{transform: this.state.pan.getTranslateTransform(), position: 'absolute', left: 150, top: 150}}
</span><span class='line'>                {...this._panResponder.panHandlers}
</span><span class='line'>            &gt;
</span><span class='line'>                &lt;Text&gt;Drag Me&lt;/Text&gt;
</span><span class='line'>            &lt;/Animated.View&gt;
</span><span class='line'>        &lt;/ScrollView&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>AppRegistry.registerComponent('SampleApp', () =&gt; SampleApp);</span></code></pre></td></tr></table></div></figure>



]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[The Shapes of React Native]]></title>
		
		<link href="http://browniefed.com/blog/the-shapes-of-react-native/"/>
		<updated>2015-09-10T08:21:00-07:00</updated>
		<id>http://browniefed.com/blog/the-shapes-of-react-native</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h1>Introduction</h1>

<p>After drawing a bit of inspiration from <a href="https://css-tricks.com/examples/ShapesOfCSS/">The Shapes of CSS</a> I decided to see if I could remake some of these shapes with a subset of css. If you haven&rsquo;t been on css-tricks check them out, <a href="http://chriscoyier.net/">Chris Coyier</a> is fantastic!</p>

<p>Of course we have access to <code>react-art</code> here so drawing shapes is pretty simple but my goal is to see if I can just use normal <code>Views</code> and all of the styles I have at my exposure to make as many shapes as I can off of the Shapes of CSS list.</p>

<p>Some of these are obvious and some of them get a little crazy but most of them are all hacks in the first place!</p>

<p>I&rsquo;m going on vacation for a month. So this shall be dubbed &ldquo;One of the more pointless blog posts on my blog written out of sheer tiredness&rdquo;.</p>

<p><img src="http://i.imgur.com/cWR7FKh.gif" title="What am doing with my life" ></p>

<!-- more -->


<h2>Live Code <a href="https://rnplay.org/apps/58FEmw">https://rnplay.org/apps/58FEmw</a></h2>

<h1>Key Takeaways</h1>

<ul>
<li>I wish border-radius worked a little more like the web</li>
<li>Box Shadow would be nice to have as well.</li>
<li>Skew transform would be a nice to have.</li>
<li>Just use SVGs&hellip;</li>
</ul>


<h1>Shapes</h1>

<h3>Square</h3>

<p>Pretty simple&hellip;</p>

<p><img src="http://i.imgur.com/yNqQt2q.png" title="Yeah what were you expecting" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Square = React.createClass({
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;View style={styles.square} /&gt;
</span><span class='line'>        )
</span><span class='line'>    }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>square: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 100,
</span><span class='line'>    backgroundColor: 'red'
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>Rectangle</h3>

<p>Nothing too crazy here either</p>

<p><img src="http://i.imgur.com/Eiw8qTZ.png" title="It is a longer square" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Rectangle = React.createClass({
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;View style={styles.rectangle} /&gt;
</span><span class='line'>        )
</span><span class='line'>    }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>rectangle: {
</span><span class='line'>    width: 100 * 2,
</span><span class='line'>    height: 100,
</span><span class='line'>    backgroundColor: 'red'
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>Circle</h3>

<p>One note to mention about border radius is that it doesn&rsquo;t work like the web. So if you go more than 50% you&rsquo;ll start forming a weird diamondy shape.</p>

<p><img src="http://i.imgur.com/Monc4Mx.png" title="The circle was invented in 1925" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Circle = React.createClass({
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;View style={styles.circle} /&gt;
</span><span class='line'>        )
</span><span class='line'>    }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>circle: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 100,
</span><span class='line'>    borderRadius: 100/2,
</span><span class='line'>    backgroundColor: 'red'
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>Oval</h3>

<p>Border radius wasn&rsquo;t working, lets just do a circle and scale it&hellip;</p>

<p><img src="http://i.imgur.com/pHxlyNn.png" title="Not a circle" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var Oval = React.createClass({
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;View style={styles.oval} /&gt;
</span><span class='line'>        )
</span><span class='line'>    }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>  oval: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 100,
</span><span class='line'>    borderRadius: 50,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    transform: [
</span><span class='line'>      {scaleX: 2}
</span><span class='line'>    ]
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<h3>Triangle Up</h3>

<p>CSS border triangles still work in React Native.</p>

<p><img src="http://i.imgur.com/cejjWpe.png" title="Pyramid in 2d" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Triangle = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={[styles.triangle, this.props.style]} /&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  triangle: {
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    borderStyle: 'solid',
</span><span class='line'>    borderLeftWidth: 50,
</span><span class='line'>    borderRightWidth: 50,
</span><span class='line'>    borderBottomWidth: 100,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderBottomColor: 'red'
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<p>Here we get to cheat a bit. You could do this on the web too, but rather than adjust the borders we&rsquo;ll just rotate it.</p>

<h3>Triangle Down</h3>

<p><img src="http://i.imgur.com/gwJ9EdU.png" title="Rotate" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var TriangleDown = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;Triangle style={styles.triangleDown}/&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  triangleDown: {
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '180deg'}
</span><span class='line'>    ]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Triangle Left</h3>

<p><img src="http://i.imgur.com/SlY2Bvf.png" title="Rotate" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var TriangleLeft = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;Triangle style={styles.triangleLeft}/&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  triangleLeft: {
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '-90deg'}
</span><span class='line'>    ]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Triangle Right</h3>

<p><img src="http://i.imgur.com/UTFvVL6.png" title="Konami Code" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var TriangleRight = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;Triangle style={styles.triangleRight}/&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  triangleRight: {
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '90deg'}
</span><span class='line'>    ]
</span><span class='line'>  },
</span></code></pre></td></tr></table></div></figure>


<p>Again we&rsquo;ll cheat here and go for the rotation!</p>

<h3>Triangle Top Left</h3>

<p><img src="http://i.imgur.com/aToWUAu.png" title="Pythagorean theory" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var TriangleCorner = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={[styles.triangleCorner, this.props.style]} /&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>  triangleCorner: {
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    borderStyle: 'solid',
</span><span class='line'>    borderRightWidth: 100,
</span><span class='line'>    borderTopWidth: 100,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderTopColor: 'red'
</span><span class='line'>  },
</span></code></pre></td></tr></table></div></figure>


<h3>Triangle Top Right</h3>

<p><img src="http://i.imgur.com/Ei1GaY4.png" title="sohcahtoa" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var TriangleCornerTopRight = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;TriangleCorner style={styles.triangleCornerTopRight}/&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>triangleCornerTopRight: {
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '90deg'}
</span><span class='line'>    ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>Triangle Bottom Left</h3>

<p><img src="http://i.imgur.com/tDtSN8B.png" title="ninety degree angle" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var TriangleCornerBottomLeft = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;TriangleCorner style={styles.triangleCornerBottomLeft}/&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  triangleCornerBottomLeft: {
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '270deg'}
</span><span class='line'>    ]
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<h3>Triangle Bottom Right</h3>

<p><img src="http://i.imgur.com/JbnkwkK.png" title="sick ramp bro" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var TriangleCornerBottomRight = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;TriangleCorner style={styles.triangleCornerBottomRight}/&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  triangleCornerBottomRight: {
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '180deg'}
</span><span class='line'>    ]
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<h3>Curved Tail Arrow</h3>

<p>Well we don&rsquo;t have the ability to do pseudo elements but they were just hacks anyway so we&rsquo;ll just create a wrapping <code>View</code> with 2 elements and style them.
Now this is not exactly the same, and it&rsquo;s partially due to the way <code>border-radius</code> are managed in react-native vs the web but it&rsquo;s closeish.</p>

<p><img src="http://i.imgur.com/Y2IEMxh.png" title="Just use an image" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var CurvedTailArrow = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.curvedTailArrow}&gt;
</span><span class='line'>        &lt;View style={styles.curvedTailArrowTail} /&gt;
</span><span class='line'>        &lt;View style={styles.curvedTailArrowTriangle} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  curvedTailArrow: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    overflow: 'visible',
</span><span class='line'>    width: 30,
</span><span class='line'>    height: 25
</span><span class='line'>  },
</span><span class='line'>  curvedTailArrowTriangle: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderTopWidth: 9,
</span><span class='line'>    borderTopColor: 'transparent',
</span><span class='line'>    borderRightWidth: 9,
</span><span class='line'>    borderRightColor: 'red',
</span><span class='line'>    borderStyle: 'solid',
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '10deg'}
</span><span class='line'>    ],
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    bottom: 9,
</span><span class='line'>    right: 3,
</span><span class='line'>    overflow: 'visible'
</span><span class='line'>  },
</span><span class='line'>  curvedTailArrowTail: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    borderBottomColor: 'transparent',
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderBottomWidth: 0,
</span><span class='line'>    borderLeftWidth: 0,
</span><span class='line'>    borderRightWidth: 0,
</span><span class='line'>    borderTopWidth: 3,
</span><span class='line'>    borderTopColor: 'red',
</span><span class='line'>    borderStyle: 'solid',
</span><span class='line'>    borderTopLeftRadius: 12,
</span><span class='line'>    top: 1,
</span><span class='line'>    left: 0,
</span><span class='line'>    width: 20,
</span><span class='line'>    height: 20,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '45deg'}
</span><span class='line'>    ]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Trapezoid</h3>

<p>The difference with this one is we had to double our width. Why? I don&rsquo;t know.</p>

<p><img src="http://i.imgur.com/Mu3NLyN.png" title="Trapezoid" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Trapezoid = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.trapezoid} /&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  trapezoid: {
</span><span class='line'>    width: 200,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderBottomWidth: 100,
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderLeftWidth: 50,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderRightWidth: 50,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderStyle: 'solid'
</span><span class='line'>  } </span></code></pre></td></tr></table></div></figure>


<h3>Parallelogram</h3>

<p>If only we had skew. :(
Luckily we have the triangles we created earlier.</p>

<p><img src="http://i.imgur.com/AtXb6rq.png" title="Dont try this at home" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var Parallelogram = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.parallelogram}&gt;
</span><span class='line'>        &lt;TriangleUp style={styles.parallelogramRight} /&gt;
</span><span class='line'>        &lt;View style={styles.parallelogramInner} /&gt;
</span><span class='line'>        &lt;TriangleDown style={styles.parallelogramLeft} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  parallelogram: {
</span><span class='line'>    width: 150,
</span><span class='line'>    height: 100
</span><span class='line'>  },
</span><span class='line'>  parallelogramInner: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left: 0,
</span><span class='line'>    top: 0,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    width: 150,
</span><span class='line'>    height: 100,
</span><span class='line'>  },
</span><span class='line'>  parallelogramRight: {
</span><span class='line'>    top: 0,
</span><span class='line'>    right: -50,
</span><span class='line'>    position: 'absolute'
</span><span class='line'>  },
</span><span class='line'>  parallelogramLeft: {
</span><span class='line'>    top: 0,
</span><span class='line'>    left: -50,
</span><span class='line'>    position: 'absolute'
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<h3>Star (6-points)</h3>

<p>These Triangles sure are coming in handy.</p>

<p><img src="http://i.imgur.com/XEPeWjV.png" title="This is really ugly, someone should make it look better" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var StarSix = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.starsix}&gt;
</span><span class='line'>        &lt;TriangleUp style={styles.starSixUp} /&gt;
</span><span class='line'>        &lt;TriangleDown style={styles.starSixDown} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  starsix: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 100
</span><span class='line'>  },
</span><span class='line'>  starSixUp: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0
</span><span class='line'>  },
</span><span class='line'>  starSixDown: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 25,
</span><span class='line'>    left: 0
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<h3>Star (5-points)</h3>

<p>Yaye <code>TriangleUp</code> is killing it. This one is REALLY hacky with the placement, could use some fine tuning.</p>

<p><img src="http://i.imgur.com/hUvOTUx.png" title="Basically a starfish" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var StarFive = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.starfive}&gt;
</span><span class='line'>        &lt;TriangleUp style={styles.starfiveTop} /&gt;
</span><span class='line'>        &lt;View style={styles.starfiveBefore} /&gt;
</span><span class='line'>        &lt;View style={styles.starfiveAfter} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  starfive: {
</span><span class='line'>    width: 150,
</span><span class='line'>    height: 150,
</span><span class='line'>  },
</span><span class='line'>  starfiveTop: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: -45,
</span><span class='line'>    left: 37
</span><span class='line'>  },
</span><span class='line'>  starfiveBefore: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left: 0,
</span><span class='line'>    top: 0,
</span><span class='line'>    borderStyle: 'solid',
</span><span class='line'>    borderRightWidth: 100,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderBottomWidth: 70,
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderLeftWidth: 100,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    transform: [
</span><span class='line'>      { rotate: '35deg'}
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  starfiveAfter: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: -25,
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderStyle: 'solid',
</span><span class='line'>    borderRightWidth: 100,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderBottomWidth: 70,
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderLeftWidth: 100,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    transform: [
</span><span class='line'>      { rotate: '-35deg'}
</span><span class='line'>    ]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Pentagon</h3>

<p>No <code>TriangleUp</code> here but we could have used a Corner Triangle with rotate.</p>

<p><img src="http://i.imgur.com/LEDmb24.png" title="I hate geometry" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Pentagon = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.pentagon}&gt;
</span><span class='line'>        &lt;View style={styles.pentagonInner} /&gt;
</span><span class='line'>        &lt;View style={styles.pentagonBefore} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  pentagon: {
</span><span class='line'>    backgroundColor: 'transparent'
</span><span class='line'>  },
</span><span class='line'>  pentagonInner: {
</span><span class='line'>    width: 90,
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderBottomWidth: 0,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderLeftWidth: 18,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderRightWidth: 18,
</span><span class='line'>    borderTopColor: 'red',
</span><span class='line'>    borderTopWidth: 50
</span><span class='line'>  },
</span><span class='line'>  pentagonBefore: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    height: 0,
</span><span class='line'>    width: 0,
</span><span class='line'>    top: -35,
</span><span class='line'>    left: 0,
</span><span class='line'>    borderStyle: 'solid',
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderBottomWidth: 35,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderLeftWidth: 45,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderRightWidth: 45,
</span><span class='line'>    borderTopWidth: 0,
</span><span class='line'>    borderTopColor: 'transparent',
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Hexagon</h3>

<p>2 Triangles and a square. Everything is just shapes.</p>

<p><img src="http://i.imgur.com/djNMGNg.png" title="Honeycomb" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var Hexagon = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.hexagon}&gt;
</span><span class='line'>        &lt;View style={styles.hexagonInner} /&gt;
</span><span class='line'>        &lt;View style={styles.hexagonBefore} /&gt;
</span><span class='line'>        &lt;View style={styles.hexagonAfter} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  hexagon: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 55
</span><span class='line'>  },
</span><span class='line'>  hexagonInner: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 55,
</span><span class='line'>    backgroundColor: 'red'
</span><span class='line'>  },
</span><span class='line'>  hexagonAfter: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    bottom: -25,
</span><span class='line'>    left: 0,
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderStyle: 'solid',
</span><span class='line'>    borderLeftWidth: 50,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderRightWidth: 50,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderTopWidth: 25,
</span><span class='line'>    borderTopColor: 'red'
</span><span class='line'>  },
</span><span class='line'>  hexagonBefore: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: -25,
</span><span class='line'>    left: 0,
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderStyle: 'solid',
</span><span class='line'>    borderLeftWidth: 50,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderRightWidth: 50,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderBottomWidth: 25,
</span><span class='line'>    borderBottomColor: 'red'
</span><span class='line'>
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<h3>Octagon</h3>

<p>I attempted copied the css on this one but it required setting a background color, so I did 4 bars and just rotated them. Slightly more markup but this is just for fun.</p>

<p><img src="http://i.imgur.com/i5drMtB.png" title="Stop!" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Octagon = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.octagon}&gt;
</span><span class='line'>        &lt;View style={[styles.octagonUp, styles.octagonBar]} /&gt;
</span><span class='line'>        &lt;View style={[styles.octagonFlat, styles.octagonBar]} /&gt;
</span><span class='line'>        &lt;View style={[styles.octagonLeft, styles.octagonBar]} /&gt;
</span><span class='line'>        &lt;View style={[styles.octagonRight, styles.octagonBar]} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  octagon: {},
</span><span class='line'>  octagonBar: {
</span><span class='line'>    width: 42,  
</span><span class='line'>    height: 100,
</span><span class='line'>    backgroundColor: 'red'
</span><span class='line'>  },
</span><span class='line'>  octagonUp: {},
</span><span class='line'>  octagonFlat: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '90deg'}
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  octagonLeft: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '-45deg'}
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  octagonRight: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '45deg'}
</span><span class='line'>    ]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Heart</h3>

<p>This one is easy since well I already had it done for my previous tutorial.</p>

<p><img src="http://i.imgur.com/uBAv2eJ.png" title="in the name of love" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Heart = React.createClass({
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;View {...this.props} style={[styles.heart, this.props.style]}&gt;
</span><span class='line'>                &lt;View style={styles.leftHeart} /&gt;
</span><span class='line'>                &lt;View style={styles.rightHeart} /&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>        )
</span><span class='line'>    }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  heart: {
</span><span class='line'>    width: 50,
</span><span class='line'>    height: 50
</span><span class='line'>  },
</span><span class='line'>  heartShape: {
</span><span class='line'>    width: 30,
</span><span class='line'>    height: 45,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    borderTopLeftRadius: 15,
</span><span class='line'>    borderTopRightRadius: 15,
</span><span class='line'>    backgroundColor: '#6427d1',
</span><span class='line'>  },
</span><span class='line'>  leftHeart: {
</span><span class='line'>    transform: [
</span><span class='line'>        {rotate: '-45deg'}
</span><span class='line'>    ],
</span><span class='line'>    left: 5
</span><span class='line'>  },
</span><span class='line'>  rightHeart: {
</span><span class='line'>    transform: [
</span><span class='line'>        {rotate: '45deg'}
</span><span class='line'>    ],
</span><span class='line'>    right: 5
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Infinity</h3>

<p>Width and border radius all work oddly together. So baby infinity? Scale it up if you want it bigger.</p>

<p><img src="http://i.imgur.com/7Ykpa06.png" title="This could be animated and you would have no idea" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Infinity = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.infinity}&gt;
</span><span class='line'>        &lt;View style={styles.infinityBefore} /&gt;
</span><span class='line'>        &lt;View style={styles.infinityAfter} /&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  infinity: {
</span><span class='line'>    width: 80,
</span><span class='line'>    height: 100,
</span><span class='line'>  },
</span><span class='line'>  infinityBefore: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0,
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderWidth: 20,
</span><span class='line'>    borderColor: 'red',
</span><span class='line'>    borderStyle: 'solid',
</span><span class='line'>    borderTopLeftRadius: 50,
</span><span class='line'>    borderTopRightRadius: 50,
</span><span class='line'>    borderBottomRightRadius: 50,
</span><span class='line'>    borderBottomLeftRadius: 0,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '-135deg'}
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  infinityAfter: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    right: 0,
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderWidth: 20,
</span><span class='line'>    borderColor: 'red',
</span><span class='line'>    borderStyle: 'solid',
</span><span class='line'>    borderTopLeftRadius: 50,
</span><span class='line'>    borderTopRightRadius: 0,
</span><span class='line'>    borderBottomRightRadius: 50,
</span><span class='line'>    borderBottomLeftRadius: 50,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '-135deg'}
</span><span class='line'>    ]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Diamond Square</h3>

<p>This was more than just a rotated square. Am I missing something?</p>

<p><img src="http://i.imgur.com/gAL9dfq.png" title="Not a blood diamond" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var Diamond = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.diamond} /&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  diamond:{
</span><span class='line'>    width: 50,
</span><span class='line'>    height: 50,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '45deg'}
</span><span class='line'>    ]    
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<h3>Diamond Shield</h3>

<p>Just 2 triangles, thought this one was going to be harder.</p>

<p><img src="http://i.imgur.com/4S6FDMo.png" title="also just a kite" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var DiamondShield = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.diamondShield}&gt;
</span><span class='line'>        &lt;View style={styles.diamondShieldTop} /&gt;
</span><span class='line'>        &lt;View style={styles.diamondShieldBottom} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  diamondShield: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 100
</span><span class='line'>  },
</span><span class='line'>  diamondShieldTop: {
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderTopWidth: 50,
</span><span class='line'>    borderTopColor: 'transparent',
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderLeftWidth: 50,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderRightWidth: 50,
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderBottomWidth: 20,
</span><span class='line'>  },
</span><span class='line'>  diamondShieldBottom: {
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderTopWidth: 70,
</span><span class='line'>    borderTopColor: 'red',
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderLeftWidth: 50,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderRightWidth: 50,
</span><span class='line'>    borderBottomColor: 'transparent',
</span><span class='line'>    borderBottomWidth: 50,
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Diamond Narrow</h3>

<p>Another 2 triangles that could have been the same and rotated. This way works too.</p>

<p><img src="http://i.imgur.com/cRwI61S.png" title="Diamond on a diet" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var DiamondNarrow = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.diamondNarrow}&gt;
</span><span class='line'>        &lt;View style={styles.diamondNarrowTop} /&gt;
</span><span class='line'>        &lt;View style={styles.diamondNarrowBottom} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  diamondNarrow: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 100
</span><span class='line'>  },
</span><span class='line'>  diamondNarrowTop: {
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderTopWidth: 50,
</span><span class='line'>    borderTopColor: 'transparent',
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderLeftWidth: 50,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderRightWidth: 50,
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderBottomWidth: 70,  
</span><span class='line'>  },
</span><span class='line'>  diamondNarrowBottom: {
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderTopWidth: 70,
</span><span class='line'>    borderTopColor: 'red',
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderLeftWidth: 50,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderRightWidth: 50,
</span><span class='line'>    borderBottomColor: 'transparent',
</span><span class='line'>    borderBottomWidth: 50, 
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<h3>Cut Diamond</h3>

<p>The top could have been used for the octagon, I chose a different way though.</p>

<p><img src="http://i.imgur.com/yZNHZP0.png" title="Now that is a diamond" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>
</span><span class='line'>var CutDiamond = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.cutDiamond}&gt;
</span><span class='line'>        &lt;View style={styles.cutDiamondTop} /&gt;
</span><span class='line'>        &lt;View style={styles.cutDiamondBottom} /&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  cutDiamond: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 100,
</span><span class='line'>  },
</span><span class='line'>  cutDiamondTop: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderTopWidth: 0,
</span><span class='line'>    borderTopColor: 'transparent',
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderLeftWidth: 25,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderRightWidth: 25,
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderBottomWidth: 25, 
</span><span class='line'>  },
</span><span class='line'>  cutDiamondBottom: {
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderTopWidth: 70,
</span><span class='line'>    borderTopColor: 'red',
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderLeftWidth: 50,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderRightWidth: 50,
</span><span class='line'>    borderBottomColor: 'transparent',
</span><span class='line'>    borderBottomWidth: 0, 
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Egg</h3>

<p>Circular things are hard to do in RN. This is eggish.</p>

<p><img src="http://i.imgur.com/0v5tH4x.png" title="Her?" ></p>

<p><img src="http://i.imgur.com/27Rbo3x.gif" title="Egg?" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Egg = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.egg} /&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  egg: {
</span><span class='line'>    width: 126,
</span><span class='line'>    height: 180,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    borderTopLeftRadius: 108,
</span><span class='line'>    borderTopRightRadius: 108,
</span><span class='line'>    borderBottomLeftRadius: 95,
</span><span class='line'>    borderBottomRightRadius: 95
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Pac-Man</h3>

<p>This one is so simple but always so fun.</p>

<p><img src="http://i.imgur.com/TZHjuxw.png" title="Pixels was a teribel movie" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var PacMan = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.pacman}/&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  pacman: {
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderTopWidth: 60,
</span><span class='line'>    borderTopColor: 'red',
</span><span class='line'>    borderLeftColor: 'red',
</span><span class='line'>    borderLeftWidth: 60,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderRightWidth: 60,
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderBottomWidth: 60, 
</span><span class='line'>    borderTopLeftRadius: 60,
</span><span class='line'>    borderTopRightRadius: 60,
</span><span class='line'>    borderBottomRightRadius: 60,
</span><span class='line'>    borderBottomLeftRadius: 60
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Talk Bubble</h3>

<p>This one is also simple, triangle and a rounded square.</p>

<p><img src="http://i.imgur.com/1LIwGEQ.png" title="Perfect for your billion dollar slack clone" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var TalkBubble = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.talkBubble}&gt;
</span><span class='line'>        &lt;View style={styles.talkBubbleSquare} /&gt;
</span><span class='line'>        &lt;View style={styles.talkBubbleTriangle} /&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  talkBubble: {
</span><span class='line'>    backgroundColor: 'transparent'
</span><span class='line'>  },
</span><span class='line'>  talkBubbleSquare: {
</span><span class='line'>    width: 120,
</span><span class='line'>    height: 80,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    borderRadius: 10
</span><span class='line'>  },
</span><span class='line'>  talkBubbleTriangle: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left: -26,
</span><span class='line'>    top: 26,
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderTopColor: 'transparent',
</span><span class='line'>    borderTopWidth: 13,
</span><span class='line'>    borderRightWidth: 26,
</span><span class='line'>    borderRightColor: 'red',
</span><span class='line'>    borderBottomWidth: 13,
</span><span class='line'>    borderBottomColor: 'transparent'
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>12 Point Burst</h3>

<p>I will admit this one confused be a little bit, then I realized it&rsquo;s just a couple of rotated squares.</p>

<p><img src="http://i.imgur.com/FHx0WVH.png" title="NOW 90% OFF!!" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var TwelvePointBurst = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.twelvePointBurst}&gt;
</span><span class='line'>        &lt;View style={styles.twelvePointBurstMain} /&gt;
</span><span class='line'>        &lt;View style={styles.twelvePointBurst30} /&gt;
</span><span class='line'>        &lt;View style={styles.twelvePointBurst60} /&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> twelvePointBurst: {},
</span><span class='line'>  twelvePointBurstMain: {
</span><span class='line'>    width: 80,
</span><span class='line'>    height: 80,
</span><span class='line'>    backgroundColor: 'red'
</span><span class='line'>  },
</span><span class='line'>  twelvePointBurst30: {
</span><span class='line'>    width: 80, 
</span><span class='line'>    height: 80,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    top: 0,
</span><span class='line'>    right: 0,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '30deg'}
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  twelvePointBurst60: {
</span><span class='line'>    width: 80, 
</span><span class='line'>    height: 80,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    top: 0,
</span><span class='line'>    right: 0,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '60deg'}
</span><span class='line'>    ]
</span><span class='line'>  },
</span></code></pre></td></tr></table></div></figure>


<h3>8 Point Burst</h3>

<p>Just like the 12, but one less square and different rotations. Only thing here is because the pseudo element was positionined relative to the first 20 degree rotation and ours isn&rsquo;t we&rsquo;ll just bump it up to 155.</p>

<p><img src="http://i.imgur.com/IITGOMB.png" title="Sun" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var EightPointBurst = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.eightPointBurst}&gt;
</span><span class='line'>        &lt;View style={styles.eightPointBurst20} /&gt;
</span><span class='line'>        &lt;View style={styles.eightPointBurst155} /&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  eightPointBurst: {},
</span><span class='line'>  eightPointBurst20: {
</span><span class='line'>    width: 80, 
</span><span class='line'>    height: 80,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '20deg'}
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  eightPointBurst155: {
</span><span class='line'>    width: 80, 
</span><span class='line'>    height: 80,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '155deg'}
</span><span class='line'>    ]
</span><span class='line'>  },
</span></code></pre></td></tr></table></div></figure>


<h3>Yin Yang</h3>

<p>This one I don&rsquo;t like because you can&rsquo;t accomplish it without setting a background. Ohwell.
Also weird border issue causing outlines.</p>

<p><img src="http://i.imgur.com/z9cUqaz.png" title="Yin and Yang and see through background borders" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var YinYang = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.yinyang}&gt;
</span><span class='line'>        &lt;View style={styles.yinyangMain} /&gt;
</span><span class='line'>        &lt;View style={styles.yinyangBefore} /&gt;
</span><span class='line'>        &lt;View style={styles.yinyangAfter} /&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  yinyang: {
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>  yinyangMain: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 100,
</span><span class='line'>    borderColor: 'red',
</span><span class='line'>    borderTopWidth: 2,
</span><span class='line'>    borderLeftWidth: 2,
</span><span class='line'>    borderBottomWidth: 50,
</span><span class='line'>    borderRightWidth: 2,
</span><span class='line'>    borderRadius: 50
</span><span class='line'>  },
</span><span class='line'>  yinyangBefore: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 24,
</span><span class='line'>    left: 0,
</span><span class='line'>    borderColor: 'red',
</span><span class='line'>    borderWidth: 24,
</span><span class='line'>    borderRadius: 30,
</span><span class='line'>  },
</span><span class='line'>  yinyangAfter: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 24,
</span><span class='line'>    right: 2,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    borderColor: 'white',
</span><span class='line'>    borderWidth: 25,
</span><span class='line'>    borderRadius: 30,
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Badge Ribbon</h3>

<p>Remember, always add <code>backgroundColor: 'transparent'</code> when you are overlapping things.</p>

<p><img src="http://i.imgur.com/3V4K2B3.png" title="Well I did get first place" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var BadgeRibbon = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.badgeRibbon}&gt;
</span><span class='line'>        &lt;View style={styles.badgeRibbonCircle} /&gt;
</span><span class='line'>        &lt;View style={styles.badgeRibbonNeg140} /&gt;
</span><span class='line'>        &lt;View style={styles.badgeRibbon140} /&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>  badgeRibbonCircle: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 100,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    borderRadius: 50
</span><span class='line'>  },
</span><span class='line'>  badgeRibbon140: {
</span><span class='line'>    backgroundColor:'transparent',
</span><span class='line'>    borderBottomWidth: 70,
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderLeftWidth: 40,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderRightWidth: 40,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 70,
</span><span class='line'>    right: -10,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '140deg'}
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  badgeRibbonNeg140: {
</span><span class='line'>    backgroundColor:'transparent',
</span><span class='line'>    borderBottomWidth: 70,
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderLeftWidth: 40,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderRightWidth: 40,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 70,
</span><span class='line'>    left: -10,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '-140deg'}
</span><span class='line'>    ]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Space Invader</h3>

<p> <code>WUTTTTTTTTTTT</code></p>

<h3>TV Screen</h3>

<p>Stupid border radius making this one hard. We&rsquo;ll just use a bunch of ovals.</p>

<p><img src="http://i.imgur.com/ffJdfqM.png" title="CRT" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var TvScreen = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.tvscreen}&gt;
</span><span class='line'>        &lt;View style={styles.tvscreenMain} /&gt;
</span><span class='line'>        &lt;View style={styles.tvscreenTop} /&gt;
</span><span class='line'>        &lt;View style={styles.tvscreenBottom} /&gt;
</span><span class='line'>        &lt;View style={styles.tvscreenLeft} /&gt;
</span><span class='line'>        &lt;View style={styles.tvscreenRight} /&gt;
</span><span class='line'>
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  tvscreen: {},
</span><span class='line'>  tvscreenMain: {
</span><span class='line'>    width: 150,
</span><span class='line'>    height: 75,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    borderTopLeftRadius: 15,
</span><span class='line'>    borderTopRightRadius: 15,
</span><span class='line'>    borderBottomRightRadius: 15,
</span><span class='line'>    borderBottomLeftRadius: 15,
</span><span class='line'>  },
</span><span class='line'>  tvscreenTop: {
</span><span class='line'>    width: 73,
</span><span class='line'>    height: 70,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: -26,
</span><span class='line'>    left: 39,
</span><span class='line'>    borderRadius: 35,
</span><span class='line'>    transform: [
</span><span class='line'>      {scaleX: 2},
</span><span class='line'>      {scaleY: .5}
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  tvscreenBottom: {
</span><span class='line'>    width: 73,
</span><span class='line'>    height: 70,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    bottom: -26,
</span><span class='line'>    left: 39,
</span><span class='line'>    borderRadius: 35,
</span><span class='line'>    transform: [
</span><span class='line'>      {scaleX: 2},
</span><span class='line'>      {scaleY: .5}
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  tvscreenLeft: {
</span><span class='line'>    width: 20,
</span><span class='line'>    height: 38,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left: -7,
</span><span class='line'>    top: 18,
</span><span class='line'>    borderRadius: 35,
</span><span class='line'>    transform: [
</span><span class='line'>      {scaleX: .5},
</span><span class='line'>      {scaleY: 2},
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  tvscreenRight: {
</span><span class='line'>    width: 20,
</span><span class='line'>    height: 38,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    right: -7,
</span><span class='line'>    top: 18,
</span><span class='line'>    borderRadius: 35,
</span><span class='line'>    transform: [
</span><span class='line'>      {scaleX: .5},
</span><span class='line'>      {scaleY: 2},
</span><span class='line'>    ]
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<h3>Chevron</h3>

<p>Once again we don&rsquo;t have skew, but we&rsquo;ll use triangles. Also magical negative scale to flip stuff around!</p>

<p><img src="http://i.imgur.com/HEfbLbS.png" title="get techron with chevron" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var Chevron = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.chevron}&gt;
</span><span class='line'>        &lt;View style={styles.chevronMain} /&gt;
</span><span class='line'>        &lt;View style={[styles.chevronTriangle, styles.chevronTopLeft]} /&gt;
</span><span class='line'>        &lt;View style={[styles.chevronTriangle, styles.chevronTopRight]} /&gt;
</span><span class='line'>        &lt;View style={[styles.chevronTriangle, styles.chevronBottomLeft]} /&gt;
</span><span class='line'>        &lt;View style={[styles.chevronTriangle, styles.chevronBottomRight]} /&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  chevron: {
</span><span class='line'>    width: 150,
</span><span class='line'>    height: 50
</span><span class='line'>  },
</span><span class='line'>  chevronMain: {
</span><span class='line'>    width: 150,
</span><span class='line'>    height: 50,
</span><span class='line'>    backgroundColor: 'red'
</span><span class='line'>  },
</span><span class='line'>  chevronTriangle: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    borderTopWidth: 20,
</span><span class='line'>    borderRightWidth: 0,
</span><span class='line'>    borderBottomWidth: 0,
</span><span class='line'>    borderLeftWidth: 75,
</span><span class='line'>    borderTopColor: 'transparent',
</span><span class='line'>    borderBottomColor: 'transparent',
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderLeftColor: 'red',
</span><span class='line'>  },
</span><span class='line'>  chevronTopLeft: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: -20,
</span><span class='line'>    left: 0
</span><span class='line'>  },
</span><span class='line'>  chevronTopRight: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: -20,
</span><span class='line'>    right: 0,
</span><span class='line'>    transform: [
</span><span class='line'>      {scaleX: -1}
</span><span class='line'>    ]
</span><span class='line'>  },
</span><span class='line'>  chevronBottomLeft: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    bottom: -20,
</span><span class='line'>    left: 0,
</span><span class='line'>    transform: [
</span><span class='line'>      {scale: -1 }
</span><span class='line'>    ]
</span><span class='line'>  },     
</span><span class='line'>  chevronBottomRight: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    bottom: -20,
</span><span class='line'>    right: 0,
</span><span class='line'>    transform: [
</span><span class='line'>      {scaleY: -1}
</span><span class='line'>    ]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Magnifying Glass</h3>

<p>Border around a circle with a stick. Nothing to it.</p>

<p><img src="http://i.imgur.com/1aCNZLk.png" title="Blow bubbles" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var MagnifyingGlass = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.magnifyingGlass}&gt;
</span><span class='line'>        &lt;View style={styles.magnifyingGlassCircle} /&gt;
</span><span class='line'>        &lt;View style={styles.magnifyingGlassStick} /&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  magnifyingGlass: {
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>  magnifyingGlassCircle: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 100,
</span><span class='line'>    borderRadius: 50,
</span><span class='line'>    borderWidth: 15,
</span><span class='line'>    borderColor: 'red'
</span><span class='line'>  },
</span><span class='line'>  magnifyingGlassStick: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    right: -20,
</span><span class='line'>    bottom: -10,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    width: 50,
</span><span class='line'>    height: 10,
</span><span class='line'>    transform: [
</span><span class='line'>      {rotate: '45deg'}
</span><span class='line'>    ]</span></code></pre></td></tr></table></div></figure>


<h3>Facebook Icon</h3>

<p>This one seems appropriate but couldn&rsquo;t get it to work well. I attempted it and failed.</p>

<p><img src="http://i.imgur.com/Y9lyxN7.png" title="React Native brought to you by" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Facebook = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.facebook}&gt;
</span><span class='line'>        &lt;View style={styles.facebookMain}&gt;          
</span><span class='line'>          &lt;View style={styles.facebookCurve} /&gt;
</span><span class='line'>          &lt;View style={styles.facebookBefore} /&gt;
</span><span class='line'>          &lt;View style={styles.facebookAfter} /&gt;
</span><span class='line'>          &lt;View style={styles.facebookRedCover} /&gt;
</span><span class='line'>        &lt;/View&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  facebook: {
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 110,
</span><span class='line'>  },
</span><span class='line'>  facebookMain: {
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    width: 100,
</span><span class='line'>    height: 110,
</span><span class='line'>    borderRadius: 5,
</span><span class='line'>    borderColor: 'red',
</span><span class='line'>    borderTopWidth: 15,
</span><span class='line'>    borderLeftWidth: 15,
</span><span class='line'>    borderRightWidth: 15,
</span><span class='line'>    borderBottomWidth: 0,
</span><span class='line'>    overflow: 'hidden'
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>  facebookRedCover: {
</span><span class='line'>    width: 10,
</span><span class='line'>    height: 20,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    right: 0,
</span><span class='line'>    top: 5
</span><span class='line'>  },
</span><span class='line'>  facebookCurve: {
</span><span class='line'>    width: 50,
</span><span class='line'>    borderWidth: 20,
</span><span class='line'>    borderTopWidth: 20,
</span><span class='line'>    borderTopColor: 'white',
</span><span class='line'>    borderBottomColor: 'transparent',
</span><span class='line'>    borderLeftColor: 'white',
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderRadius: 20,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    right: -8,
</span><span class='line'>    top: 5
</span><span class='line'>  },
</span><span class='line'>  facebookBefore: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    backgroundColor: 'white',
</span><span class='line'>    width: 20,
</span><span class='line'>    height: 70,
</span><span class='line'>    bottom: 0,
</span><span class='line'>    right: 22,
</span><span class='line'>  },
</span><span class='line'>  facebookAfter: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    width: 55,
</span><span class='line'>    top: 50,
</span><span class='line'>    height: 20,
</span><span class='line'>    backgroundColor: 'white',
</span><span class='line'>    right: 5
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Moon</h3>

<p>Box shadow&hellip;</p>

<h3>Flag</h3>

<p>The one on css-tricks inferred a background, we&rsquo;ll just flip it around and say the center is transparent and the outer triangles are red.</p>

<p><img src="http://i.imgur.com/7AMJ3sj.png" title="Have they ever seen a flag?" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>var Flag = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.flag}&gt;
</span><span class='line'>        &lt;View style={styles.flagTop} /&gt;
</span><span class='line'>        &lt;View style={styles.flagBottom} /&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  flag: {},
</span><span class='line'>  flagTop: {
</span><span class='line'>    width: 110,
</span><span class='line'>    height: 56,
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>  },
</span><span class='line'>  flagBottom: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left: 0,
</span><span class='line'>    bottom: 0,
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderBottomWidth: 13,
</span><span class='line'>    borderBottomColor: 'transparent',
</span><span class='line'>    borderLeftWidth: 55,
</span><span class='line'>    borderLeftColor: 'red',
</span><span class='line'>    borderRightWidth: 55,
</span><span class='line'>    borderRightColor: 'red'
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Cone</h3>

<p>Had to modify the css on this one a bit to get the same look, 70 => 55.</p>

<p><img src="http://i.imgur.com/04f26Kl.png" title="needs more icecream" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Cone = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.cone} /&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  cone: {
</span><span class='line'>    width: 0,
</span><span class='line'>    height: 0,
</span><span class='line'>    borderLeftWidth: 55,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderRightWidth: 55,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    borderTopWidth: 100,
</span><span class='line'>    borderTopColor: 'red',
</span><span class='line'>    borderRadius: 55
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Cross</h3>

<p>More of a plus then a cross.</p>

<p><img src="http://i.imgur.com/0IerLuP.png" title="across from where?" ></p>

<p><img src="http://i.imgur.com/zfWtpTN.gif" title="heh" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Cross = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.cross}&gt;
</span><span class='line'>        &lt;View style={styles.crossUp} /&gt;
</span><span class='line'>        &lt;View style={styles.crossFlat} /&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>  cross: {
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>  crossUp: {
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    height: 100,
</span><span class='line'>    width: 20
</span><span class='line'>  },
</span><span class='line'>  crossFlat: {
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    height: 20,
</span><span class='line'>    width: 100,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    left: -40,
</span><span class='line'>    top: 40
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>Base</h3>

<p>Base&hellip; Home .. Home Base, whichever all the same.</p>

<p><img src="http://i.imgur.com/LGQEIvS.png" title="that's all folks" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Base = React.createClass({
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.base}&gt;
</span><span class='line'>        &lt;View style={styles.baseTop} /&gt;
</span><span class='line'>        &lt;View style={styles.baseBottom} /&gt;
</span><span class='line'>      &lt;/View&gt;   
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>  base: {
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>  baseTop: {
</span><span class='line'>    borderBottomWidth: 35,
</span><span class='line'>    borderBottomColor: 'red',
</span><span class='line'>    borderLeftWidth: 50,
</span><span class='line'>    borderLeftColor: 'transparent',
</span><span class='line'>    borderRightWidth: 50,
</span><span class='line'>    borderRightColor: 'transparent',
</span><span class='line'>    height: 0,
</span><span class='line'>    width: 0,
</span><span class='line'>    left: 0,
</span><span class='line'>    top: -35,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>  },
</span><span class='line'>  baseBottom: {
</span><span class='line'>    backgroundColor: 'red',
</span><span class='line'>    height: 55,
</span><span class='line'>    width: 100
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h1>Final</h1>

<p>Wow what a fun waste of time. Modeling React Native after the web spec is of course a great idea, I just wish it conformed a little nicer on border radius.</p>

<p>Also I hate geometry now.</p>

<h2>Live Code <a href="https://rnplay.org/apps/58FEmw">https://rnplay.org/apps/58FEmw</a></h2>

<p>I&rsquo;m not posting the full code here because it&rsquo;s just too long.</p>

<p><img src="http://i.imgur.com/cWR7FKh.gif" title="Stay in school kids" ></p>
]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native Periscope Hearts Animation]]></title>
		
		<link href="http://browniefed.com/blog/react-native-periscope-hearts-animation/"/>
		<updated>2015-09-07T11:02:00-07:00</updated>
		<id>http://browniefed.com/blog/react-native-periscope-hearts-animation</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h1>Introduction</h1>

<p>I was contacted asking if it was possible to recreate the periscope heart animations in react-native. I was also linked to someone rebuilding the same effect in Framer.js, you can check out the linked video here <a href="https://www.youtube.com/watch?v=qFUXxqzZytU">https://www.youtube.com/watch?v=qFUXxqzZytU</a>.</p>

<p>Periscope not only has an iPhone/Android app but it also has a web app with the same heart effect. I could take a look at the animations being done on it but we&rsquo;ll just eye ball it.</p>

<h1>What we are building</h1>

<p><img src="http://i.imgur.com/5JhgzQV.gif" title="Purple floating fading swaying rotating hearts" ></p>

<h3>Live code: <a href="https://rnplay.org/apps/8VhSjw">https://rnplay.org/apps/8VhSjw</a></h3>

<!-- more -->


<h1>What it looks like on Periscope</h1>

<p>If you don&rsquo;t know what I&rsquo;m talking about, the heart animation looks like this.</p>

<p><img src="http://i.imgur.com/sEJf9Md.gif" title="Periscope hearts" ></p>

<h1>Break Down</h1>

<p>In order to replicate the animation we have to break it down into it&rsquo;s parts.</p>

<ul>
<li>Heart appears and scales up then quickly scales back down. Animation <code>Scale 0 =&gt; Scale 1.2 =&gt; Scale 1</code></li>
<li>Heart moves upwards with a slight sway to the left then back to the right. <code>X/Y from 0 =&gt; deviceHeight/2</code></li>
<li>Slight rotation of the heart through out each sway <code>rotate -15deg =&gt; 0 =&gt; 15deg</code></li>
<li>Heart opacity fades out over entire animation <code>opacity 1 =&gt; 0</code></li>
</ul>


<p>We likely won&rsquo;t need <code>Animated</code> values for all of these, the goal of Animating is to attempt to interpolate other values from one <code>Animated.Value</code>. In our case that one constant is the <code>X/Y</code> values. All of the other animations are dependent on where the heart is currently located.</p>

<p>The opacity is derived from the <code>X/Y</code> that it can be an interpolated value. The scale could be interpolated too, with 3 small input ranges, and output ranges of <code>[0, 1.2, 1]</code>. The rotation can also be interpolated based upon the <code>X</code> value. Even the X can be interpolated based upon the Y if we determine that we want 2 sways to happen before the animation is complete.</p>

<h1>Make the Heart</h1>

<p>Now we have to decide how to make the heart. One option is to use an <code>&lt;Image /&gt;</code> however this means I have to open up an image editor and I&rsquo;m a developer, not a designer! If you haven&rsquo;t seen <a href="https://css-tricks.com/examples/ShapesOfCSS/">The Shapes of CSS</a> I recommend checking it out. For basics shapes CSS will work great, and in our case a heart is a simple shape.</p>

<p>It&rsquo;s composed of 2 objects overlayed on top of each other. Two squares, with top left / top right border radiuses and then drop them on top of each other.</p>

<p>Apart they look like this</p>

<p><img src="http://i.imgur.com/mUu1Yt8.png" title="Two squares not slammed together" ></p>

<p>Then together we get a heart!</p>

<p><img src="http://i.imgur.com/o8WOlDU.png" title="Now it's a heart" ></p>

<p>This also gives us control over the color more easily, the sizing, and anything else you can do with a simple view.</p>

<h1>Setup</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width: deviceWidth,
</span><span class='line'>  height: deviceHeight
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  View,
</span><span class='line'>  Animated,
</span><span class='line'>  TouchableWithoutFeedback
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var ANIMATION_END_Y = Math.ceil(deviceHeight * .5);
</span><span class='line'>var NEGATIVE_END_Y = ANIMATION_END_Y * -1;
</span><span class='line'>var startCount = 1;</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll bring in the necessary includes. The <code>ANIMATION_END_Y</code> and the reverse <code>NEGATIVE_END_Y</code> will become apparent as what they are later. Due to some interpolation we&rsquo;ll need to do some trickery to make our animation interpolations make more sense.</p>

<h1>Create The Heart</h1>

<p>As we showed before the heart is 2 pieces. These pieces will have to be absolutely positioned so lets creating a wrapping view, and 2 pieces. We&rsquo;ll style each piece <code>leftHeart</code> and <code>rightHeat</code>. Then setup some styles.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Heart = React.createClass({
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;View {...this.props} style={[styles.heart, this.props.style]}&gt;
</span><span class='line'>                &lt;View style={styles.leftHeart} /&gt;
</span><span class='line'>                &lt;View style={styles.rightHeart} /&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>        )
</span><span class='line'>    }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>//Styles
</span><span class='line'>
</span><span class='line'>  heart: {
</span><span class='line'>    width: 50,
</span><span class='line'>    height: 50
</span><span class='line'>  },
</span><span class='line'>  heartShape: {
</span><span class='line'>    width: 30,
</span><span class='line'>    height: 45,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    borderTopLeftRadius: 15,
</span><span class='line'>    borderTopRightRadius: 15,
</span><span class='line'>    backgroundColor: '#6427d1',
</span><span class='line'>  },
</span><span class='line'>  leftHeart: {
</span><span class='line'>    transform: [
</span><span class='line'>        {rotate: '-45deg'}
</span><span class='line'>    ],
</span><span class='line'>    left: 5
</span><span class='line'>  },
</span><span class='line'>  rightHeart: {
</span><span class='line'>    transform: [
</span><span class='line'>        {rotate: '45deg'}
</span><span class='line'>    ],
</span><span class='line'>    right: 5
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<p>We set a width and height on the wrapping heart so it takes up space. We move all default styling into <code>heartShape</code> style and give it a nice purple color. Then we just adjust each left and right heart. The <code>leftHeart</code> piece will be on the left side, and rotated <code>-45deg</code> aka <code>45deg</code> towards the left, and the right will be the reverse.</p>

<h1>Setup Base Rendering</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var HeartFloater = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {};
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;Animated.View style={styles.heartWrap}&gt;
</span><span class='line'>          &lt;Heart /&gt;
</span><span class='line'>        &lt;/Animated.View&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1
</span><span class='line'>  },
</span><span class='line'>  heartWrap: {
</span><span class='line'>      position: 'absolute',
</span><span class='line'>      bottom: 50,
</span><span class='line'>      right: (deviceWidth/2) - 25
</span><span class='line'>  },
</span><span class='line'>  heart: {
</span><span class='line'>    width: 50,
</span><span class='line'>    height: 50
</span><span class='line'>  },
</span><span class='line'>  heartShape: {
</span><span class='line'>    width: 30,
</span><span class='line'>    height: 45,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    borderTopLeftRadius: 15,
</span><span class='line'>    borderTopRightRadius: 15,
</span><span class='line'>    backgroundColor: '#6427d1',
</span><span class='line'>  },
</span><span class='line'>  leftHeart: {
</span><span class='line'>    transform: [
</span><span class='line'>        {rotate: '-45deg'}
</span><span class='line'>    ],
</span><span class='line'>    left: 5
</span><span class='line'>  },
</span><span class='line'>  rightHeart: {
</span><span class='line'>    transform: [
</span><span class='line'>        {rotate: '45deg'}
</span><span class='line'>    ],
</span><span class='line'>    right: 5
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Nothing much to call out here, except we add a new <code>heartWrap</code> class. We&rsquo;ll leave the heart be a static heart and then just animate a wrapper. The <code>heartWrap</code> is positioned absolutely and centered.</p>

<h1>Move the Heart</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var HeartFloater = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      position: new Animated.Value(0)
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>    Animated.timing(this.state.position, {
</span><span class='line'>      duration: 2000,
</span><span class='line'>      toValue: NEGATIVE_END_Y
</span><span class='line'>    }).start();
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>  getHeartAnimationStyle: function() {
</span><span class='line'>    return {
</span><span class='line'>      transform: [
</span><span class='line'>        {translateY: this.state.position},
</span><span class='line'>      ]
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;Animated.View style={[styles.heartWrap, this.getHeartAnimationStyle()]}&gt;
</span><span class='line'>          &lt;Heart /&gt;
</span><span class='line'>        &lt;/Animated.View&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>We only setup a basic <code>Animated.Value</code> instead of an <code>Animated.ValueXY</code> because we will interpolate all the necessary effects and even the <code>X</code> position from the <code>Y</code> value.</p>

<p>We kick off an animation when the component mounts to animate the heart from <code>0</code> to negative half <code>deviceHeight</code>. We do this since translateY moves up when it is negative, and moves down when it is positive. We do this animation for 2 seconds.</p>

<h1>Fade the Heart</h1>

<p>Now this is where we are going to get a little tricky with interpolation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._yAnimation = this.state.position.interpolate({
</span><span class='line'>      inputRange: [NEGATIVE_END_Y, 0],
</span><span class='line'>      outputRange: [ANIMATION_END_Y, 0]
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._opacityAnimation = this._yAnimation.interpolate({
</span><span class='line'>      inputRange: [0, ANIMATION_END_Y],
</span><span class='line'>      outputRange: [1, 0]
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  getHeartAnimationStyle: function() {
</span><span class='line'>    return {
</span><span class='line'>      transform: [
</span><span class='line'>        {translateY: this.state.position},
</span><span class='line'>      ],
</span><span class='line'>      opacity: this._opacityAnimation
</span><span class='line'>    }
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>You can interpolate on an interpolated value. So we&rsquo;ll map our negative values, directly to positive values and also flip the step scale.</p>

<p>Our animation would typically go from <code>0</code> to <code>-300</code> but our new <code>_yAnimation</code> will flip that and stay we are animation goes from <code>0</code> to <code>300</code>.</p>

<p>This allows our animations like <code>opacity</code> to make more sense. We can interpolate on our <code>this._yAnimation</code> and specify <code>[0, ANIMATION_END_Y]</code> is tied to the opacity values <code>[1,0]</code>. So <code>0</code> aka the start is at <code>opacity</code> of <code>1</code> and moves to <code>0</code> which is tied to the <code>ANIMATION_END_Y</code> (roughly 300 depending on your device).</p>

<p>Then we pass the interpolated opacity value in <code>opacity</code>.</p>

<h1>Scale the Heart</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>this._scaleAnimation = this._yAnimation.interpolate({
</span><span class='line'>  inputRange: [0, 15, 30],
</span><span class='line'>  outputRange: [0, 1.2, 1],
</span><span class='line'>  extrapolate: 'clamp'
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>getHeartAnimationStyle: function() {
</span><span class='line'>return {
</span><span class='line'>  transform: [
</span><span class='line'>    {translateY: this.state.position},
</span><span class='line'>    {scale: this._scaleAnimation}
</span><span class='line'>  ],
</span><span class='line'>  opacity: this._opacityAnimation
</span><span class='line'>}
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;ll add another animation below the other that will handle the scale. Because our now interpolated value runs positively we can just define pixel scale steps. So <code>0</code> maps to <code>0</code> so on creation the heart doesn&rsquo;t exist. The heart will quickly scale from <code>0</code> to <code>1.2x</code> it&rsquo;s size over the first <code>15</code> pixels it travels, then from <code>15</code> to <code>30</code> pixels it&rsquo;ll scale back down from <code>1.2</code> to <code>1</code>.</p>

<p>This gives us a quick little pulse of the heart. We must add the <code>extrapolate: clamp</code> otherwise the heart will start scaling down and eventually go negative causing the heart to flip.</p>

<h1>Rotate/Sway the Heart</h1>

<p>Almost done! Now lets make it sway a little bit. This one is a little difficult to fine tune, but I errored on the less dramtic side of things.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>this._xAnimation = this._yAnimation.interpolate({
</span><span class='line'>  inputRange: [0, ANIMATION_END_Y/2, ANIMATION_END_Y],
</span><span class='line'>  outputRange: [0, 15, 0]
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>this._rotateAnimation = this._yAnimation.interpolate({
</span><span class='line'>  inputRange: [0, ANIMATION_END_Y/4, ANIMATION_END_Y/3, ANIMATION_END_Y/2, ANIMATION_END_Y],
</span><span class='line'>  outputRange: ['0deg', '-2deg', '0deg', '2deg', '0deg']
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>getHeartAnimationStyle: function() {
</span><span class='line'>  return {
</span><span class='line'>    transform: [
</span><span class='line'>      {translateY: this.state.position},
</span><span class='line'>      {translateX: this._xAnimation},
</span><span class='line'>      {scale: this._scaleAnimation},
</span><span class='line'>      {rotate: this._rotateAnimation}
</span><span class='line'>    ],
</span><span class='line'>    opacity: this._opacityAnimation
</span><span class='line'>  }
</span><span class='line'>},</span></code></pre></td></tr></table></div></figure>


<p>This causes one sway to happen for <code>15</code> pixels then come back to the center. There are three rotations that happen that will make it look like it&rsquo;s wobbling a bit more.</p>

<p>The <code>_xAnimation</code> input range is from <code>0</code> to half the animation, to the end. Since our value of the <code>_xAnimation</code> interpolation is the end value of the animation we don&rsquo;t need to <code>extrapolate: clamp</code> here.</p>

<p>The <code>_rotateAnimation</code> takes <code>5</code> different steps. We just divide by each step. We start at <code>0</code>, then divide by 4 for quarter of the height animation, then a third of animation, half of the animation, then finally rotate back to 0 to finish the animation off. I pulled these out of thin air, and it looks okay but could use some fine tuning.</p>

<h1>Make AnimatedHeart component</h1>

<p>Now lets make it show a bunch of hearts when we press down. Each press should put another heart onto an array, and when the heart is done animating we should remove it.</p>

<p>First move all the code to an <code>AnimatedHeart</code> like so.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var AnimatedHeart = React.createClass({
</span><span class='line'>  getDefaultProps: function() {
</span><span class='line'>    return {
</span><span class='line'>      onComplete: function() {}
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      position: new Animated.Value(0)
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._yAnimation = this.state.position.interpolate({
</span><span class='line'>      inputRange: [NEGATIVE_END_Y, 0],
</span><span class='line'>      outputRange: [ANIMATION_END_Y, 0]
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._opacityAnimation = this._yAnimation.interpolate({
</span><span class='line'>      inputRange: [0, ANIMATION_END_Y],
</span><span class='line'>      outputRange: [1, 0]
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._scaleAnimation = this._yAnimation.interpolate({
</span><span class='line'>      inputRange: [0, 15, 30],
</span><span class='line'>      outputRange: [0, 1.2, 1],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._xAnimation = this._yAnimation.interpolate({
</span><span class='line'>      inputRange: [0, ANIMATION_END_Y/2, ANIMATION_END_Y],
</span><span class='line'>      outputRange: [0, 15, 0]
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>    this._rotateAnimation = this._yAnimation.interpolate({
</span><span class='line'>      inputRange: [0, ANIMATION_END_Y/4, ANIMATION_END_Y/3, ANIMATION_END_Y/2, ANIMATION_END_Y],
</span><span class='line'>      outputRange: ['0deg', '-2deg', '0deg', '2deg', '0deg']
</span><span class='line'>    });
</span><span class='line'>  },
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>    Animated.timing(this.state.position, {
</span><span class='line'>      duration: 2000,
</span><span class='line'>      toValue: NEGATIVE_END_Y
</span><span class='line'>    }).start(this.props.onComplete);
</span><span class='line'>  },
</span><span class='line'>  getHeartAnimationStyle: function() {
</span><span class='line'>    return {
</span><span class='line'>      transform: [
</span><span class='line'>        {translateY: this.state.position},
</span><span class='line'>        {translateX: this._xAnimation},
</span><span class='line'>        {scale: this._scaleAnimation},
</span><span class='line'>        {rotate: this._rotateAnimation}
</span><span class='line'>      ],
</span><span class='line'>      opacity: this._opacityAnimation
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>        &lt;Animated.View style={[styles.heartWrap, this.getHeartAnimationStyle(), this.props.style]}&gt;
</span><span class='line'>          &lt;Heart /&gt;
</span><span class='line'>        &lt;/Animated.View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>We modified a few things. We adjusted our <code>style</code> to include <code>this.props.style</code>.
Also we added a callback when the animation is finished.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  componentDidMount: function() {
</span><span class='line'>    Animated.timing(this.state.position, {
</span><span class='line'>      duration: 2000,
</span><span class='line'>      toValue: NEGATIVE_END_Y
</span><span class='line'>    }).start(this.props.onComplete);
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<h1>Add AnimatedHeart on press</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
</span><span class='line'>function getRandomNumber(min, max) {
</span><span class='line'>  return Math.random() * (max - min) + min;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var HeartFloater = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      hearts: [] 
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  addHeart: function() {
</span><span class='line'>    startCount += 1;
</span><span class='line'>    this.state.hearts.push({
</span><span class='line'>      id: startCount,
</span><span class='line'>      right: getRandomNumber(50, 150)
</span><span class='line'>    });
</span><span class='line'>    this.setState(this.state);
</span><span class='line'>  },
</span><span class='line'>  removeHeart: function(v) {
</span><span class='line'>    var index = this.state.hearts.findIndex(function(heart) { return heart.id === v});
</span><span class='line'>    this.state.hearts.splice(index, 1);
</span><span class='line'>    this.setState(this.state);
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;TouchableWithoutFeedback style={styles.container} onPress={this.addHeart}&gt;
</span><span class='line'>          &lt;View style={styles.container}&gt;
</span><span class='line'>            {
</span><span class='line'>              this.state.hearts.map(function(v, i) {
</span><span class='line'>                return (
</span><span class='line'>                    &lt;AnimatedHeart 
</span><span class='line'>                      key={v.id}
</span><span class='line'>                      onComplete={this.removeHeart.bind(this, v.id)}
</span><span class='line'>                      style=
</span><span class='line'>                    /&gt;
</span><span class='line'>                ) 
</span><span class='line'>              }, this)
</span><span class='line'>            }
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>        &lt;/TouchableWithoutFeedback&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Our HeartFloater, now has a hearts array to hold our hearts for state. We&rsquo;ve adjusted our <code>render</code> to use <code>TouchableWithoutFeedback</code> to call <code>addHeart</code> on press.</p>

<p>Each press will increase our <code>startCount</code> which we use as an id generator. Also we add a random <code>right</code> style. a</p>

<p>Our render just loops over each heart, and renders the <code>AnimatedHeart</code> with a <code>key</code> which is essential for performance, an <code>onComplete</code> which is called when our animation is finished, and the right style we randomly generated.</p>

<p>On complete we call remove. Which finds the index of the heart, splices it, and sets state.</p>

<h1>Fix Background Colors and Styles</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  heartWrap: {
</span><span class='line'>      position: 'absolute',
</span><span class='line'>      bottom: 30,
</span><span class='line'>      backgroundColor: 'transparent'
</span><span class='line'>  },
</span><span class='line'>  heart: {
</span><span class='line'>    width: 50,
</span><span class='line'>    height: 50,
</span><span class='line'>    backgroundColor: 'transparent'
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Without setting the background to transparent the background will be white causing one heart to clip another. This will prevent that.</p>

<p>We also removed the <code>right</code> position since we generate random positions between <code>50</code> and <code>150</code>.</p>

<h1>Final</h1>

<p>Thank you to Anthony Webb for the submission. As always check out the live code on RNPlay.</p>

<h3>Live code: <a href="https://rnplay.org/apps/8VhSjw">https://rnplay.org/apps/8VhSjw</a></h3>

<p>If you any other inquiries do let me know and I&rsquo;ll show you how to build them.</p>

<p><img src="http://i.imgur.com/5JhgzQV.gif" title="Purple floating fading swaying rotating hearts" ></p>

<h1>Final Code</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width: deviceWidth,
</span><span class='line'>  height: deviceHeight
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  View,
</span><span class='line'>  Animated,
</span><span class='line'>  TouchableWithoutFeedback
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var ANIMATION_END_Y = Math.ceil(deviceHeight * .5);
</span><span class='line'>var NEGATIVE_END_Y = ANIMATION_END_Y * -1;
</span><span class='line'>var startCount = 1;
</span><span class='line'>
</span><span class='line'>function getRandomNumber(min, max) {
</span><span class='line'>  return Math.random() * (max - min) + min;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var Heart = React.createClass({
</span><span class='line'>    render: function() {
</span><span class='line'>        return (
</span><span class='line'>            &lt;View {...this.props} style={[styles.heart, this.props.style]}&gt;
</span><span class='line'>                &lt;View style={[styles.leftHeart, styles.heartShape]} /&gt;
</span><span class='line'>                &lt;View style={[styles.rightHeart, styles.heartShape]} /&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>        )
</span><span class='line'>    }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var AnimatedHeart = React.createClass({
</span><span class='line'>  getDefaultProps: function() {
</span><span class='line'>    return {
</span><span class='line'>      onComplete: function() {}
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      position: new Animated.Value(0)
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._yAnimation = this.state.position.interpolate({
</span><span class='line'>      inputRange: [NEGATIVE_END_Y, 0],
</span><span class='line'>      outputRange: [ANIMATION_END_Y, 0]
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._opacityAnimation = this._yAnimation.interpolate({
</span><span class='line'>      inputRange: [0, ANIMATION_END_Y],
</span><span class='line'>      outputRange: [1, 0]
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._scaleAnimation = this._yAnimation.interpolate({
</span><span class='line'>      inputRange: [0, 15, 30],
</span><span class='line'>      outputRange: [0, 1.2, 1],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._xAnimation = this._yAnimation.interpolate({
</span><span class='line'>      inputRange: [0, ANIMATION_END_Y/2, ANIMATION_END_Y],
</span><span class='line'>      outputRange: [0, 15, 0]
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>    this._rotateAnimation = this._yAnimation.interpolate({
</span><span class='line'>      inputRange: [0, ANIMATION_END_Y/4, ANIMATION_END_Y/3, ANIMATION_END_Y/2, ANIMATION_END_Y],
</span><span class='line'>      outputRange: ['0deg', '-2deg', '0deg', '2deg', '0deg']
</span><span class='line'>    });
</span><span class='line'>  },
</span><span class='line'>  componentDidMount: function() {
</span><span class='line'>    Animated.timing(this.state.position, {
</span><span class='line'>      duration: 2000,
</span><span class='line'>      toValue: NEGATIVE_END_Y
</span><span class='line'>    }).start(this.props.onComplete);
</span><span class='line'>  },
</span><span class='line'>  getHeartAnimationStyle: function() {
</span><span class='line'>    return {
</span><span class='line'>      transform: [
</span><span class='line'>        {translateY: this.state.position},
</span><span class='line'>        {translateX: this._xAnimation},
</span><span class='line'>        {scale: this._scaleAnimation},
</span><span class='line'>        {rotate: this._rotateAnimation}
</span><span class='line'>      ],
</span><span class='line'>      opacity: this._opacityAnimation
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>        &lt;Animated.View style={[styles.heartWrap, this.getHeartAnimationStyle(), this.props.style]}&gt;
</span><span class='line'>          &lt;Heart /&gt;
</span><span class='line'>        &lt;/Animated.View&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>var HeartFloater = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      hearts: [] 
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  addHeart: function() {
</span><span class='line'>    startCount += 1;
</span><span class='line'>    this.state.hearts.push({
</span><span class='line'>      id: startCount,
</span><span class='line'>      right: getRandomNumber(50, 150)
</span><span class='line'>    });
</span><span class='line'>    this.setState(this.state);
</span><span class='line'>  },
</span><span class='line'>  removeHeart: function(v) {
</span><span class='line'>    var index = this.state.hearts.findIndex(function(heart) { return heart.id === v});
</span><span class='line'>    this.state.hearts.splice(index, 1);
</span><span class='line'>    this.setState(this.state);
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;TouchableWithoutFeedback style={styles.container} onPress={this.addHeart}&gt;
</span><span class='line'>          &lt;View style={styles.container}&gt;
</span><span class='line'>            {
</span><span class='line'>              this.state.hearts.map(function(v, i) {
</span><span class='line'>                return (
</span><span class='line'>                    &lt;AnimatedHeart 
</span><span class='line'>                      key={v.id}
</span><span class='line'>                      onComplete={this.removeHeart.bind(this, v.id)}
</span><span class='line'>                      style=
</span><span class='line'>                    /&gt;
</span><span class='line'>                ) 
</span><span class='line'>              }, this)
</span><span class='line'>            }
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>        &lt;/TouchableWithoutFeedback&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1
</span><span class='line'>  },
</span><span class='line'>  heartWrap: {
</span><span class='line'>      position: 'absolute',
</span><span class='line'>      bottom: 30,
</span><span class='line'>      backgroundColor: 'transparent'
</span><span class='line'>  },
</span><span class='line'>  heart: {
</span><span class='line'>    width: 50,
</span><span class='line'>    height: 50,
</span><span class='line'>    backgroundColor: 'transparent'
</span><span class='line'>  },
</span><span class='line'>  heartShape: {
</span><span class='line'>    width: 30,
</span><span class='line'>    height: 45,
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    borderTopLeftRadius: 15,
</span><span class='line'>    borderTopRightRadius: 15,
</span><span class='line'>    backgroundColor: '#6427d1',
</span><span class='line'>  },
</span><span class='line'>  leftHeart: {
</span><span class='line'>    transform: [
</span><span class='line'>        {rotate: '-45deg'}
</span><span class='line'>    ],
</span><span class='line'>    left: 5
</span><span class='line'>  },
</span><span class='line'>  rightHeart: {
</span><span class='line'>    transform: [
</span><span class='line'>        {rotate: '45deg'}
</span><span class='line'>    ],
</span><span class='line'>    right: 5
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>AppRegistry.registerComponent('animate_slide', () =&gt; HeartFloater);
</span></code></pre></td></tr></table></div></figure>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React Native Youtube Animated Video Slide]]></title>
		
		<link href="http://browniefed.com/blog/react-native-youtube-animated-video-slide/"/>
		<updated>2015-08-31T08:58:00-07:00</updated>
		<id>http://browniefed.com/blog/react-native-youtube-animated-video-slide</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h1>Introduciton</h1>

<p>I was going to spend some time digging into <a href="https://github.com/ProjectSeptemberInc/gl-react-native">gl-react-native</a> when someone asked in the slack channel how to achieve youtube like video sliding navigation. Now I won&rsquo;t get into the navigation portion, just the animation part. The navigation portion can be solved by basically treating video routes as a modal. Thus they are always over the top of whatever the previous route was.</p>

<h1>What are we building?</h1>

<p>If you haven&rsquo;t seen it, YouTube allows you to drag the current playing video down to the bottom right corner and have it continue to play while you browse the rest of the app.</p>

<p>Something like this.</p>

<p><img src="http://i.imgur.com/gwbkw5f.gif" title="YouTube demo clone" ></p>

<!-- more -->


<h1>Setup</h1>

<p>React native doesn&rsquo;t have a <code>Video</code> component but Brent Vatne created a fantastic video component called <a href="https://github.com/brentvatne/react-native-video">react-native-video</a>. This allows you to use videos added to your app bundle, or external video urls.</p>

<p>So unlike a normal project you will need to run <code>npm install react-native-video --save</code>. Then follow the instructions on the <code>README</code> in <code>react-native-video</code> on how to add the library in XCode.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var Video = require('react-native-video');
</span><span class='line'>
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>var {width: deviceWidth, height: deviceHeight} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var videoWidth = deviceWidth,
</span><span class='line'>    videoHeight = Math.round((deviceWidth/16)*9);
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  View,
</span><span class='line'>  Text,
</span><span class='line'>  Animated, 
</span><span class='line'>  PanResponder,
</span><span class='line'>  ScrollView
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var AnimatedVideo = Animated.createAnimatedComponent(Video);
</span><span class='line'>var AnimatedScrollView = Animated.createAnimatedComponent(ScrollView);
</span></code></pre></td></tr></table></div></figure>


<p>So a few things to call out here.</p>

<p>We pull in dimensions of the screen and name them <code>deviceHeight</code> and <code>deviceWidth</code>. This is so we can calculate <code>videoWidth</code> and <code>videoHeight</code>. We use a simple calculation to create a video that is in the <code>16:9</code> aspect ratio.</p>

<p>Then we use <code>createAnimatedComponent</code> to create an animated <code>ScrollView</code> and <code>AnimatedVideo</code> element.</p>

<h1>Basic Component</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var YoutubeVideoSlide = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      scale: new Animated.Value(1),
</span><span class='line'>      position: new Animated.ValueXY(),
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>              &lt;AnimatedVideo 
</span><span class='line'>                  source={{uri: "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4"}}
</span><span class='line'>                  style={styles.videoSizing}
</span><span class='line'>                  rate={1}
</span><span class='line'>                  paused={false}
</span><span class='line'>                  volume={1}
</span><span class='line'>                  resizeMode={'stretch'}
</span><span class='line'>                  repeat={true} 
</span><span class='line'>              /&gt;
</span><span class='line'>            &lt;AnimatedScrollView style={styles.container}&gt;
</span><span class='line'>              &lt;View style={styles.comment}&gt;
</span><span class='line'>                &lt;Text&gt;Video Comment&lt;/Text&gt;
</span><span class='line'>              &lt;/View&gt;
</span><span class='line'>            &lt;/AnimatedScrollView&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1
</span><span class='line'>  },
</span><span class='line'>  videoSizing: {
</span><span class='line'>    width: videoWidth,
</span><span class='line'>    height: videoHeight
</span><span class='line'>  },
</span><span class='line'>  comment: {
</span><span class='line'>    height: 100
</span><span class='line'>  }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>We setup <code>flex:1</code> on the <code>View</code> so that the <code>ScrollView</code> will size correctly. We set the <code>width</code> and <code>height</code> on the <code>AnimatedVideo</code> to our <code>16:9</code> ratio. In the state we setup the initial scale to <code>1</code>, and an <code>X,Y</code> position for the moving video.</p>

<h1>Setup the PanResponder</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>this._panResponder = PanResponder.create({
</span><span class='line'>  onStartShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>  onStartShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>  onMoveShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>  onMoveShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>  onPanResponderMove: Animated.event([
</span><span class='line'>      null, 
</span><span class='line'>      {
</span><span class='line'>          dy: this.state.position.y
</span><span class='line'>      }
</span><span class='line'>  ])
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll do the normal &ldquo;say yes to allowing us to touch things&rdquo;, and then we&rsquo;ll setup an <code>Animated.event</code>. This is a helper function to traverse the arguments from <code>onPanResponderMove</code> and update an Animated value.</p>

<p><code>onPanResponderMove</code> gets called with an <code>event</code> as the first argument, and <code>gestureState</code> as the second. The <code>null</code> tells <code>Animated.event</code> to ignore the first argument, but to grab the <code>dy</code> from the <code>gestureState</code> and update the <code>y</code> value on our <code>Animated.ValueXY</code> we created.</p>

<h1>Interpolate and Animate</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>this._scale = this.state.position.y.interpolate({
</span><span class='line'>  inputRange: [0, deviceHeight ],
</span><span class='line'>  outputRange: [1, .71],
</span><span class='line'>  extrapolate: 'clamp'
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>this._translateY = this.state.position.y.interpolate({
</span><span class='line'>  inputRange: [0, deviceHeight],
</span><span class='line'>  outputRange: [0, deviceHeight],
</span><span class='line'>  extrapolate: 'clamp'
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>this.state.position.y.addListener((value) =&gt; {
</span><span class='line'>  this._y = value.value;
</span><span class='line'>  var scaleValue = this._scale.__getAnimatedValue();
</span><span class='line'>  var currentVideoWidth = scaleValue * videoWidth;
</span><span class='line'>  var buffer = ((videoWidth - currentVideoWidth)/2);
</span><span class='line'>  this.state.position.x.setValue(buffer);
</span><span class='line'>}.bind(this));
</span><span class='line'>
</span><span class='line'>this._opacity = this.state.position.y.interpolate({
</span><span class='line'>  inputRange: [0, deviceHeight ],
</span><span class='line'>  outputRange: [1, .1]
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Now we need to setup a few more things in the <code>componentWillMount</code>. The <code>this._scale</code> will be set on a scale transform. This is directly tied to the <code>y</code> position of us dragging. So we setup an interpolate, which goes from <code>0</code> to the <code>deviceHeight</code> and map that to an output range of <code>1</code> to <code>.71</code>. The <code>.71</code> was a trial and error number, I&rsquo;m sure there is math to calculate this but I guessed till I got it right.</p>

<p>The <code>clamp</code> is to say that this value cannot go above or below these values.</p>

<p>You may be wondering why we setup <code>translateY</code> when the <code>inputRange</code> and <code>outputRange</code> are exactly the same. The <code>clamp</code> is the key part. This means that if a user tries to slide the video up it will not grow in scale, or slide the video upwards. It can only go down.</p>

<p>We setup the listener so we can keep track of our <code>y</code> value, we&rsquo;ll get into that later. We&rsquo;ll use <code>__getAnimatedValue</code> to get the current scale. <strong>THIS WILL NOT WORK IN .11-rc</strong> and above. You cannot currently listen on interpolated values, and we need the interpolated value for our math.</p>

<p>We get the original <code>videoWidth</code> and multiply it times the scale value so we can get the current <code>videoWidth</code>. We subtract the <code>currentVideoWidth</code> from the <code>videoWidth</code> and divide it by <code>2</code> to get the current buffer. That buffer is the space between the right side of the video and the current scaled video. If we don&rsquo;t do this then the X/Y scaling on the video will just squish it to the middle of the screen. What we want to do is have it slide down the right side of the screen.</p>

<p>Finally we setup the opacity, this is for the <code>scrollView</code> to slowly fade as we swipe down.</p>

<h1>Setup the styling</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getScalePosition: function() {
</span><span class='line'>    return {
</span><span class='line'>      transform: [
</span><span class='line'>        {scale: this._scale},
</span><span class='line'>        {translateX: this.state.position.x},
</span><span class='line'>        {translateY: this._translateY}
</span><span class='line'>      ]
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  getScrollOffset: function() {
</span><span class='line'>    return {
</span><span class='line'>      transform: [
</span><span class='line'>        {translateY: this._translateY},
</span><span class='line'>      ],
</span><span class='line'>      opacity: this._opacity
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>    &lt;AnimatedVideo 
</span><span class='line'>      {...this._panResponder.panHandlers}
</span><span class='line'>      source=
</span><span class='line'>      style={[styles.videoSizing, this.getScalePosition()]}
</span><span class='line'>      rate={this.state.rate}
</span><span class='line'>      paused={this.state.paused}
</span><span class='line'>      volume={this.state.volume}
</span><span class='line'>      muted={this.state.muted}
</span><span class='line'>      resizeMode={this.state.resizeMode}
</span><span class='line'>      repeat={true}
</span><span class='line'>    /&gt;
</span><span class='line'>    &lt;AnimatedScrollView style={[styles.container, this.getScrollOffset()]}&gt;
</span><span class='line'>    &lt;/AnimatedScrollView&gt;</span></code></pre></td></tr></table></div></figure>


<p>Here we set default styling, and then make our calls to get the style objects with our animated values. For our video scale position we pass our <code>this._scale</code> to <code>scale</code> to transform both <code>scaleX</code>, and <code>scaleY</code>. We pass in our position x, and our <code>this._translateY</code> that is clamped.</p>

<p>For our <code>ScrollView</code> , we setup <code>translateY</code>, and pass in the opacity we created.</p>

<h1>Set Offset and Animate the Release</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>this._panResponder = PanResponder.create({
</span><span class='line'>  onStartShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>  onStartShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>  onMoveShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>  onMoveShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>  onPanResponderGrant: function() {
</span><span class='line'>    this.state.position.y.setOffset(this._y)
</span><span class='line'>  }.bind(this),
</span><span class='line'>  onPanResponderMove: Animated.event([
</span><span class='line'>      null, 
</span><span class='line'>      {
</span><span class='line'>          dy: this.state.position.y
</span><span class='line'>      }
</span><span class='line'>  ]),
</span><span class='line'>  onPanResponderRelease: (e, gestureState) =&gt; {
</span><span class='line'>    this.state.position.flattenOffset();
</span><span class='line'>
</span><span class='line'>    if (gestureState.dy &gt;= 40) {
</span><span class='line'>      Animated.timing(this.state.position.y, {
</span><span class='line'>        duration: 200,
</span><span class='line'>        toValue: deviceHeight
</span><span class='line'>      }).start();
</span><span class='line'>    } else {
</span><span class='line'>      Animated.timing(this.state.position.y, {
</span><span class='line'>        duration: 200,
</span><span class='line'>        toValue: 0
</span><span class='line'>      }).start();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  }.bind(this)
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>When I said we&rsquo;d get to why we kept track of the <code>y</code> this is why. This is so we can set the offset of the initial press and prevent the video from jumping. It will work for sliding down, but with <code>dy</code> it is always the delta. So on the slide up from the bottom it would immediately jump to the top, and we don&rsquo;t want that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  onPanResponderGrant: function() {
</span><span class='line'>    this.state.position.y.setOffset(this._y)
</span><span class='line'>  }.bind(this),</span></code></pre></td></tr></table></div></figure>


<p>This code sets the initial offset when you first touch to whatever the current y value is.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  onPanResponderRelease: (e, gestureState) =&gt; {
</span><span class='line'>    this.state.position.flattenOffset();
</span><span class='line'>
</span><span class='line'>    if (gestureState.dy &gt;= 100) {
</span><span class='line'>      Animated.timing(this.state.position.y, {
</span><span class='line'>        duration: 200,
</span><span class='line'>        toValue: deviceHeight
</span><span class='line'>      }).start();
</span><span class='line'>    } else {
</span><span class='line'>      Animated.timing(this.state.position.y, {
</span><span class='line'>        duration: 200,
</span><span class='line'>        toValue: 0
</span><span class='line'>      }).start();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  }.bind(this)</span></code></pre></td></tr></table></div></figure>


<p>On release we flatten the offset. Which just squashes the current value and offset together.
If the user has moved greater than <code>100</code> pixels then we&rsquo;ll animate the video to the bottom of the screen. If not we&rsquo;ll animate it back to the top.</p>

<h1>Final</h1>

<p>As always check it out on RNPlay at <a href="https://rnplay.org/apps/Cp_SSA">https://rnplay.org/apps/Cp_SSA</a>.
The video source comes from <a href="http://camendesign.com/code/video_for_everybody/test.html">http://camendesign.com/code/video_for_everybody/test.html</a>. It&rsquo;s a wonderfully open sourced mp4 video that we can link to test out.</p>

<h1>Full Code</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>var {width: deviceWidth, height: deviceHeight} = Dimensions.get('window');
</span><span class='line'>var Video = require('react-native-video');
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var videoWidth = deviceWidth,
</span><span class='line'>    videoHeight = Math.round((deviceWidth/16)*9);
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  View,
</span><span class='line'>  Text,
</span><span class='line'>  Animated, 
</span><span class='line'>  PanResponder,
</span><span class='line'>  ScrollView
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>var AnimatedVideo = Animated.createAnimatedComponent(Video);
</span><span class='line'>var AnimatedScrollView = Animated.createAnimatedComponent(ScrollView);
</span><span class='line'>
</span><span class='line'>var YoutubeVideoSlide = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      rate: 1,
</span><span class='line'>      volume: 1,
</span><span class='line'>      muted: true,
</span><span class='line'>      resizeMode: 'stretch',
</span><span class='line'>      duration: 0.0,
</span><span class='line'>      currentTime: 0.0,
</span><span class='line'>      scale: new Animated.Value(1),
</span><span class='line'>      position: new Animated.ValueXY(),
</span><span class='line'>
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  _y: 0,
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._panResponder = PanResponder.create({
</span><span class='line'>      onStartShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onStartShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponder: (evt, gestureState) =&gt; true,
</span><span class='line'>      onMoveShouldSetPanResponderCapture: (evt, gestureState) =&gt; true,
</span><span class='line'>      onPanResponderGrant: function() {
</span><span class='line'>        this.state.position.y.setOffset(this._y)
</span><span class='line'>      }.bind(this),
</span><span class='line'>      onPanResponderMove: Animated.event([
</span><span class='line'>          null, 
</span><span class='line'>          {
</span><span class='line'>              dy: this.state.position.y
</span><span class='line'>          }
</span><span class='line'>      ]),
</span><span class='line'>      onPanResponderRelease: (e, gestureState) =&gt; {
</span><span class='line'>        this.state.position.flattenOffset();
</span><span class='line'>
</span><span class='line'>        if (gestureState.dy &gt;= 100) {
</span><span class='line'>          Animated.timing(this.state.position.y, {
</span><span class='line'>            duration: 200,
</span><span class='line'>            toValue: deviceHeight
</span><span class='line'>          }).start();
</span><span class='line'>        } else {
</span><span class='line'>          Animated.timing(this.state.position.y, {
</span><span class='line'>            duration: 200,
</span><span class='line'>            toValue: 0
</span><span class='line'>          }).start();
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>      }.bind(this)
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._scale = this.state.position.y.interpolate({
</span><span class='line'>      inputRange: [0, deviceHeight ],
</span><span class='line'>      outputRange: [1, .71],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this._translateY = this.state.position.y.interpolate({
</span><span class='line'>      inputRange: [0, deviceHeight],
</span><span class='line'>      outputRange: [0, deviceHeight],
</span><span class='line'>      extrapolate: 'clamp'
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    this.state.position.y.addListener((value) =&gt; {
</span><span class='line'>      this._y = value.value;
</span><span class='line'>      var scaleValue = this._scale.__getAnimatedValue();
</span><span class='line'>      var currentVideoWidth = scaleValue * videoWidth;
</span><span class='line'>      var buffer = ((videoWidth - currentVideoWidth)/2);
</span><span class='line'>      this.state.position.x.setValue(buffer);
</span><span class='line'>    }.bind(this));
</span><span class='line'>
</span><span class='line'>    this._opacity = this.state.position.y.interpolate({
</span><span class='line'>      inputRange: [0, deviceHeight ],
</span><span class='line'>      outputRange: [1, .1]
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>  },
</span><span class='line'>  getScalePosition: function() {
</span><span class='line'>    return {
</span><span class='line'>      transform: [
</span><span class='line'>        {scale: this._scale},
</span><span class='line'>        {translateX: this.state.position.x},
</span><span class='line'>        {translateY: this._translateY}
</span><span class='line'>      ]
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  getScrollOffset: function() {
</span><span class='line'>    return {
</span><span class='line'>      transform: [
</span><span class='line'>        {translateY: this._translateY},
</span><span class='line'>      ],
</span><span class='line'>      opacity: this._opacity
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>              &lt;AnimatedVideo 
</span><span class='line'>                  {...this._panResponder.panHandlers}
</span><span class='line'>                  source={{uri: "http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4"}}
</span><span class='line'>                  style={[styles.videoSizing, this.getScalePosition()]}
</span><span class='line'>                  rate={this.state.rate}
</span><span class='line'>                  paused={this.state.paused}
</span><span class='line'>                  volume={this.state.volume}
</span><span class='line'>                  muted={this.state.muted}
</span><span class='line'>                  resizeMode={this.state.resizeMode}
</span><span class='line'>                  repeat={true} 
</span><span class='line'>              /&gt;
</span><span class='line'>            &lt;AnimatedScrollView style={[styles.container, this.getScrollOffset()]}&gt;
</span><span class='line'>              &lt;View style={styles.comment}&gt;
</span><span class='line'>                &lt;Text&gt;Video Comment&lt;/Text&gt;
</span><span class='line'>              &lt;/View&gt;
</span><span class='line'>              &lt;View style={styles.comment}&gt;
</span><span class='line'>                &lt;Text&gt;Video Comment&lt;/Text&gt;
</span><span class='line'>              &lt;/View&gt;
</span><span class='line'>              &lt;View style={styles.comment}&gt;
</span><span class='line'>                &lt;Text&gt;Video Comment&lt;/Text&gt;
</span><span class='line'>              &lt;/View&gt;
</span><span class='line'>              &lt;View style={styles.comment}&gt;
</span><span class='line'>                &lt;Text&gt;Video Comment&lt;/Text&gt;
</span><span class='line'>              &lt;/View&gt;
</span><span class='line'>              &lt;View style={styles.comment}&gt;
</span><span class='line'>                &lt;Text&gt;Video Comment&lt;/Text&gt;
</span><span class='line'>              &lt;/View&gt;
</span><span class='line'>              &lt;View style={styles.comment}&gt;
</span><span class='line'>                &lt;Text&gt;Video Comment&lt;/Text&gt;
</span><span class='line'>              &lt;/View&gt;
</span><span class='line'>              &lt;View style={styles.comment}&gt;
</span><span class='line'>                &lt;Text&gt;Video Comment&lt;/Text&gt;
</span><span class='line'>              &lt;/View&gt;
</span><span class='line'>            &lt;/AnimatedScrollView&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1
</span><span class='line'>  },
</span><span class='line'>  videoSizing: {
</span><span class='line'>    width: videoWidth,
</span><span class='line'>    height: videoHeight
</span><span class='line'>  },
</span><span class='line'>  comment: {
</span><span class='line'>    height: 100
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React-Native Animated with React-Art - Firework Tap To Shoot]]></title>
		
		<link href="http://browniefed.com/blog/react-native-animated-with-react-art-firework-show/"/>
		<updated>2015-08-29T22:12:00-07:00</updated>
		<id>http://browniefed.com/blog/react-native-animated-with-react-art-firework-show</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h1>Introduction</h1>

<p>This actually could be built with out react-art, but we&rsquo;ll use react-art just for good measure.
What are we building? A firework show. Nothing fancy. Just tap on the screen and a firework will be shot to that point and explode.</p>

<h1>What?</h1>

<p>This is what we&rsquo;re building</p>

<p><img src="http://i.imgur.com/Dj60a6e.gif" title="Firework Shooter" ></p>

<!-- more -->


<h1>Setup</h1>

<p>Just like normal, lets set the scene. A blank app with everything imported, etc.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>var ReactNativeART = require('ReactNativeART');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width,
</span><span class='line'>  height
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Animated,
</span><span class='line'>  View,
</span><span class='line'>  TouchableWithoutFeedback
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>    Surface,
</span><span class='line'>    Shape,
</span><span class='line'>    Path,
</span><span class='line'>    Group,
</span><span class='line'>    Transform
</span><span class='line'>} = ReactNativeART;
</span><span class='line'>
</span><span class='line'>var AnimatedShape = Animated.createAnimatedComponent(Shape);
</span><span class='line'>var AnimatedGroup = Animated.createAnimatedComponent(Group);</span></code></pre></td></tr></table></div></figure>


<p>We bring in the <code>Animated</code> API, <code>ReactNativeART</code>, some components from <code>ART</code>.
The thing that we have done before is creating <code>AnimatedShape</code>, and <code>AnimatedGroup</code>. What these do is allow us to set props like <code>fill</code>, <code>opacity</code>, <code>x</code>, <code>y</code>, that are Animated values. This will cause updates in our native world correctly and efficiently.</p>

<p>Now our styles</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    flexDirection: 'column'
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Yep that is it. Most of our stuff will take place in the <code>react-art</code> world.</p>

<p>Now our basic class</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var FireworkShooter = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      fireworks: []
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;TouchableWithoutFeedback&gt;
</span><span class='line'>          &lt;View&gt;
</span><span class='line'>            &lt;Surface width={width} height={height}&gt;
</span><span class='line'>            &lt;/Surface&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>        &lt;/TouchableWithoutFeedback&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>So we have a simple setup. A full container view, with a <code>TouchableWithoutFeedback</code> so we can get the press coordinates. Then a wrapping <code>View</code> since <code>Touchable</code> stuff needs a native view below it. Then finally our <code>react-art</code> <code>Surface</code>. This takes a <code>width</code> and <code>height</code> prop. In our case we want the full screen, so we get the dimensions of the phone that we extracted up above and set it.</p>

<h1>Shoot a mortar</h1>

<p>Lets think about this.
We want a mortar (a small glowing ball) to shoot from the bottom center of the screen to where we&rsquo;ve tapped.</p>

<p>That means with <code>react-art</code> we&rsquo;ll have to create a closed <code>Path</code> that is a circle. It just so happens that <code>react-art</code> ships with a <code>Circle</code> shape for us to use.</p>

<p>Okay so our list of needs</p>

<ul>
<li>A press handler to get where we tapped</li>
<li>A <code>Circle</code> that can take Animated API props</li>
<li>A way to animate that <code>Circle</code> aka mortar to the tap</li>
<li>Render a mortar on the <code>Surface</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;TouchableWithoutFeedback onPress={this._handleAddFirework}&gt;</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll use the <code>TouchableWithoutFeedback</code> to call out to a function to queue up adding a firework.
Check that off the list.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//React-Art ships with this component however not react-native-art implementation we'll just grab it and
</span><span class='line'>//modify this to use the AnimatedShape we create up above. Thanks Facebook :)
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Copyright 2013-2014 Facebook, Inc.
</span><span class='line'> * All rights reserved.
</span><span class='line'> *
</span><span class='line'> * This source code is licensed under the BSD-style license found in the
</span><span class='line'> * LICENSE file in the root directory of this source tree. An additional grant
</span><span class='line'> * of patent rights can be found in the PATENTS file in the same directory.
</span><span class='line'> *
</span><span class='line'> * @providesModule Circle.art
</span><span class='line'> * @typechecks
</span><span class='line'> *
</span><span class='line'> * Example usage:
</span><span class='line'> * &lt;Circle
</span><span class='line'> *   radius={10}
</span><span class='line'> *   stroke="green"
</span><span class='line'> *   strokeWidth={3}
</span><span class='line'> *   fill="blue"
</span><span class='line'> * /&gt;
</span><span class='line'> *
</span><span class='line'> */
</span><span class='line'>var AnimatedCircle = React.createClass({displayName: "Circle",
</span><span class='line'>  render: function() {
</span><span class='line'>    var radius = this.props.radius;
</span><span class='line'>
</span><span class='line'>    var path = Path().moveTo(0, -radius)
</span><span class='line'>        .arc(0, radius * 2, radius)
</span><span class='line'>        .arc(0, radius * -2, radius)
</span><span class='line'>        .close();
</span><span class='line'>    return React.createElement(AnimatedShape, React.__spread({},  this.props, {d: path}));
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Hey look we just grabbed it and changed <code>Shape</code> to <code>AnimatedShape</code>. Yaye for React and reusable code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var MORTAR_RADIUS = 5;
</span><span class='line'>///...
</span><span class='line'>_handleAddFirework: function(e) {
</span><span class='line'>    var _shootingPosition = new Animated.ValueXY({x: width/2, y: height - MORTAR_RADIUS});
</span><span class='line'>
</span><span class='line'>    this.state.fireworks.push({
</span><span class='line'>      shootingPosition: _shootingPosition,
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    Animated.timing(_shootingPosition, {
</span><span class='line'>        duration: 300,
</span><span class='line'>        toValue: {
</span><span class='line'>          y: e.nativeEvent.locationY,
</span><span class='line'>          x: e.nativeEvent.locationX
</span><span class='line'>        }
</span><span class='line'>    }).start()
</span><span class='line'>    
</span><span class='line'>    this.setState(this.state);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Alright. Pause and lets analyze this code.</p>

<p>First line <code>_shootingPosition</code>, we create a new <code>Animated.ValueXY</code> and set our defaults. These defaults are the starting position of the animation. Usually these would default to <code>x: 0, y:0</code> but we have other plans.</p>

<p>We set our <code>x</code> to <code>width/2</code> which is the middle of the phone. Then our <code>y</code> is going to the <code>height</code> of the device minus a <code>MORTAR_RADIUS</code>. We put a constant at the top of the code to say our mortar radius is going to be 5.</p>

<p>Next we add it to an array of fireworks we&rsquo;ll shoot later.</p>

<p>Then we create the animation.
We want the mortar to take <code>300</code> milliseconds to reach the spot the user pressed. We set the <code>toValue</code> to where our users pressed.
Then we start the animation. Yeah we haven&rsquo;t even rendered anything yet but it&rsquo;ll all be okay trust me.</p>

<p>Finally we set our state and thus it&rsquo;ll cause a re-render and we can render our firework.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Surface width={width} height={height}&gt;
</span><span class='line'>{
</span><span class='line'>    this.state.fireworks.map((firework) =&gt; {
</span><span class='line'>        return &lt;AnimatedCircle 
</span><span class='line'>                    radius={MORTAR_RADIUS} 
</span><span class='line'>                    x={firework.shootingPosition.x} 
</span><span class='line'>                    y={firework.shootingPosition.y}
</span><span class='line'>                    fill="#000"
</span><span class='line'>                /&gt;
</span><span class='line'>    })
</span><span class='line'>}
</span><span class='line'>&lt;/Surface&gt;</span></code></pre></td></tr></table></div></figure>


<p>So we map over each firework, return the <code>AnimatedCircle</code> and set the appropriate properties, which 2 of those <code>x</code>, and <code>y</code> are animated properties. In our case we&rsquo;re going to fill the cirlcle with black to start.</p>

<p>So what does that all look like? Something like this</p>

<p><img src="http://i.imgur.com/arIjyoz.gif" title="Black Shooting Circles" ></p>

<h1>Shoot multiple mortars that disappear</h1>

<p>Well mortars don&rsquo;t stick like that. So lets make them disappear.
The <code>start()</code> function takes a callback that is called when the animation completes.</p>

<p>To identify the firework in the array we&rsquo;ll just use the <code>shootingPosition</code> animation to identify it and filter it out.</p>

<p>Something like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  removeSelf: function(_shootingPosition) {
</span><span class='line'>    this.state.fireworks = this.state.fireworks.filter((firework) =&gt; firework.shootingPosition !== _shootingPosition);
</span><span class='line'>    this.setState(this.state);
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  ///
</span><span class='line'>    Animated.timing(_shootingPosition, {
</span><span class='line'>        duration: 300,
</span><span class='line'>        toValue: {
</span><span class='line'>          y: e.nativeEvent.locationY,
</span><span class='line'>          x: e.nativeEvent.locationX
</span><span class='line'>        }
</span><span class='line'>    ]).start(this.removeSelf.bind(this, _shootingPosition));</span></code></pre></td></tr></table></div></figure>


<p>Not the most elegant of solutions but hey it works. It runs through each firework, removes our _shootingPosition, and then refreshes the UI.</p>

<h1>Animate the color</h1>

<p>Lets make the mortar more than just a black dot. Lets pretend it&rsquo;s a fire ball, and we want it to alternate between yellow and orange.</p>

<p>We&rsquo;ll use these 2 colors and pop them at the top</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var SHOOTING_COLORS = [
</span><span class='line'>  'rgb(234,238,112)', //Yellow
</span><span class='line'>  'rgb(245,137,12)' //Orange
</span><span class='line'>];</span></code></pre></td></tr></table></div></figure>


<p>The <code>interpolate</code> function we&rsquo;re going to call only works with <code>rgb</code> hence the use of <code>rgb</code> instead of hex.</p>

<p>Next we&rsquo;ll need to create another Animated value.</p>

<p>Our code will look like so</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var _shootingPosition = new Animated.ValueXY({x: width/2, y: height - MORTAR_RADIUS});
</span><span class='line'>var _shootingColor = new Animated.Value(0);
</span><span class='line'>
</span><span class='line'>this.state.fireworks.push({
</span><span class='line'>  shootingPosition: _shootingPosition,
</span><span class='line'>  shootingColor: _shootingColor,
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>//
</span><span class='line'>
</span><span class='line'>_shootingPosition.addListener(this.adjustShootingFill.bind(null, _shootingColor));
</span><span class='line'>  
</span><span class='line'>adjustShootingFill: function(_shootingColor, value) {
</span><span class='line'>    Animated.timing(_shootingColor, {
</span><span class='line'>      duration: 16,
</span><span class='line'>      toValue: _shootingColor.__getAnimatedValue() == 0 ? 1 : 0
</span><span class='line'>    }).start()
</span><span class='line'>},
</span></code></pre></td></tr></table></div></figure>


<p>We start off by adding a new <code>Animated.Value</code>, and set it to 0. We add it to our firework object.</p>

<p>Then we add a listener to it. What <code>addListener</code> does is provides a callback that will be called each time the mortar position is updated.
The bind is just so it&rsquo;ll pass in our <code>_shootingColor</code> Animated value as the first argument.</p>

<p>We&rsquo;ll use the <code>Animated.timing</code> function again to transition it between colors over 16ms. We call <code>__getAnimatedValue()</code> and do the inverse of it.</p>

<p>So every <code>16ms</code> the mortar will transition from yellow => orange => yellow => orange, etc.</p>

<p>Now what does that look like in our render?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Surface width={width} height={height}&gt;
</span><span class='line'>{
</span><span class='line'>    this.state.fireworks.map((firework) =&gt; {
</span><span class='line'>        
</span><span class='line'>        var _shootingFill = firework.shootingColor.interpolate({
</span><span class='line'>          inputRange: [0,1],
</span><span class='line'>          outputRange: SHOOTING_COLORS
</span><span class='line'>        });
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        return &lt;AnimatedCircle 
</span><span class='line'>                    radius={MORTAR_RADIUS} 
</span><span class='line'>                    x={firework.shootingPosition.x} 
</span><span class='line'>                    y={firework.shootingPosition.y}
</span><span class='line'>                    fill={_shootingFill}
</span><span class='line'>                /&gt;
</span><span class='line'>    })
</span><span class='line'>}
</span><span class='line'>&lt;/Surface&gt;</span></code></pre></td></tr></table></div></figure>


<p>We need to create an interpolator. This interpolate will encapsulate the logic that picks the color when we change the value of <code>shootingColor</code> up above in our <code>adjustShootingFill</code> function.</p>

<p>It maps to</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0 =&gt; yellow
</span><span class='line'>1 =&gt; orange</span></code></pre></td></tr></table></div></figure>


<p>Then we pass that into our fill property and we&rsquo;re done.</p>

<p><img src="http://i.imgur.com/r69Ba6r.gif" title="Orange Yellow Moratrs" ></p>

<h1>Make those mortars explode</h1>

<p>Now for the fun part. Lets make our mortars explode.</p>

<p>Our mortar concept will be pretty simplistic, we&rsquo;ll create 20 circles that explode outwards and expand.
We could create all sorts of tails that fly around and do cool things but that is a tutorial for another time.</p>

<p>First lets setup some variables</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var PARTICLE_RADIUS = 30; // How big should the explosions be
</span><span class='line'>var PARTICLE_COUNT = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]; // How many particles per explosion, this is the lazy persons range call
</span><span class='line'>
</span><span class='line'>var PARTICLE_COLORS = [
</span><span class='line'>    'rgba(54, 17, 52, 100)',
</span><span class='line'>    'rgba(176, 34, 140, 100)',
</span><span class='line'>    'rgba(234, 55, 136, 100)',
</span><span class='line'>    'rgba(229, 107, 112, 100)',
</span><span class='line'>    'rgba(243, 145, 160, 100)'
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>We the <code>PARTICLE_RADIUS</code> which will determine how large each explosion is. We setup <code>PARTICLE_COUNT</code> which is the amount of particles we&rsquo;ll use.
Finally we want our firework show to be 5 different colors. So each explosion will change between each of these colors.</p>

<p>For the sake of simplicity we&rsquo;ll make each particle the same exact color meaning we only need 1 <code>Animated.Value</code> for it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var _particleColor = new Animated.Value(0);
</span><span class='line'>var _particleRadius = new Animated.Value(0);
</span><span class='line'>var _coreOpacity = new Animated.Value(1);
</span></code></pre></td></tr></table></div></figure>


<p>We also need an <code>Animated.Value</code> for our radius, we put it at 0 so it starts hidden. The other <code>Animated.Value</code> is our core opacity animation.
That is the value for hiding our core mortar once it explodes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var _particlePositions = PARTICLE_COUNT.map(() =&gt; new Animated.ValueXY({x: 0, y: 0}));</span></code></pre></td></tr></table></div></figure>


<p>Each particle will have to go to a different position so in this case we&rsquo;ll need 20 <code>Animated.ValueXY</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>this.state.fireworks.push({
</span><span class='line'>      shootingPosition: _shootingPosition,
</span><span class='line'>      shootingColor: _shootingColor,
</span><span class='line'>      particleColor: _particleColor,
</span><span class='line'>      particleRadius: _particleRadius,
</span><span class='line'>      coreOpacity: _coreOpacity,
</span><span class='line'>      particlePositions: _particlePositions
</span><span class='line'>    });</span></code></pre></td></tr></table></div></figure>


<p>Add them to our firework so we can access them later in our render.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var _animatedParticles = [
</span><span class='line'>    Animated.timing(_particleRadius, {
</span><span class='line'>      duration: 700,
</span><span class='line'>      toValue: 1
</span><span class='line'>    }),
</span><span class='line'>    Animated.timing(_coreOpacity, {
</span><span class='line'>      duration: 200,
</span><span class='line'>      toValue: 0
</span><span class='line'>    })
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>_movingParticles = _particlePositions.map((particle, i) =&gt; {
</span><span class='line'>  var _xy = getXYParticle(PARTICLE_COUNT.length, i, PARTICLE_RADIUS);
</span><span class='line'>  return Animated.timing(particle, {
</span><span class='line'>    duration: 250,
</span><span class='line'>    toValue: _xy
</span><span class='line'>  })
</span><span class='line'>})
</span><span class='line'>
</span><span class='line'>//At the bottom of the file
</span><span class='line'>function getXYParticle(total, i, radius) {
</span><span class='line'>  var angle = 360/total*i;
</span><span class='line'>
</span><span class='line'>  var x = Math.round((radius*2) * Math.cos(angle - (Math.PI/2)));
</span><span class='line'>  var y = Math.round((radius*2) * Math.sin(angle - (Math.PI/2)));
</span><span class='line'>
</span><span class='line'>  return {
</span><span class='line'>    x: x,
</span><span class='line'>    y: y
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>_animatedParticles = _animatedParticles.concat(_movingParticles);</span></code></pre></td></tr></table></div></figure>


<p>This whole animation mapping is setting us up for what we are going to do next. Which is queue up our animations.</p>

<p>We create an array of animations that need to happen. The first is expanding each <code>_particleRadius</code>. We have determine that it will take 700 milliseconds to fully expand the explosion. The <code>_particleRadius</code> will actually be the particle scale. We&rsquo;ll just scale up the circle so it looks like it&rsquo;s exploding outwards, but that will be shown off in our render function.</p>

<p>We set our <code>_coreOpacity</code> aka our mortar ball to fade out and disappear over 200 milliseconds.</p>

<p>We need to create the animations for each particle. It needs to shoot out from our current mortar location to different points on the circle.
After googling around I found a function below, and deleted a bunch of stuff to basically get down to a rough position algorithim to return <code>x,y</code> positions.</p>

<p>We once again use <code>Animated.timing</code> to say that the particle should take 250 milliseconds to get into it&rsquo;s position.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Animated.sequence([
</span><span class='line'>  Animated.timing(_shootingPosition, {
</span><span class='line'>    duration: 300,
</span><span class='line'>    toValue: {
</span><span class='line'>      y: e.nativeEvent.locationY,
</span><span class='line'>      x: e.nativeEvent.locationX
</span><span class='line'>    }
</span><span class='line'>  }),
</span><span class='line'>  Animated.parallel(_animatedParticles)
</span><span class='line'>]).start(this.removeSelf.bind(this, _shootingPosition));</span></code></pre></td></tr></table></div></figure>


<p>Now to queue up our animations. We want our mortar shooting to happen first, then the explosion.
We do that using <code>Animated.sequence</code>.</p>

<p>We first have our mortar go up to the location of the users touch.
The next piece is wrapping all of our explosion animations in an <code>Animated.parallel</code>. This is the opposite of sequence, which it says execute all of these animations at the same time.</p>

<p>So our mortar fading out and disappearing, our particles expanding, changing color, and exploding outward will all happen at the same time.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_shootingPosition.addListener(this.adjustShootingFill.bind(null, _shootingColor));
</span><span class='line'>_particleRadius.addListener(this.adjustParticleFill.bind(null, _particleColor));
</span><span class='line'>
</span><span class='line'>///
</span><span class='line'>  adjustParticleFill: function(_particleColor, value) {
</span><span class='line'>    var _currentFill = _particleColor.__getAnimatedValue(),
</span><span class='line'>        _particleFill = _currentFill === 5 ? 0 : _currentFill + 1;
</span><span class='line'>
</span><span class='line'>    Animated.timing(_particleColor, {
</span><span class='line'>      duration: 16,
</span><span class='line'>      toValue: _particleFill
</span><span class='line'>    }).start()
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>Finally we need to change our color of our particle. So like before we&rsquo;ll attach to the expanding of our particle and make it call a function to change the fill color.
In our new case we have five colors to choose from so the logic is a little different but mostly the same.</p>

<p>Now for our rendering of this all. We&rsquo;ll move it out to a different function to deal with.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;Surface width={width} height={height}&gt;
</span><span class='line'>    {this.getFireworks()}
</span><span class='line'>  &lt;/Surface&gt;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getFireworks: function() {
</span><span class='line'>    return this.state.fireworks.map((firework, i) =&gt; {
</span><span class='line'>
</span><span class='line'>      var _shootingFill = firework.shootingColor.interpolate({
</span><span class='line'>        inputRange: [0,1],
</span><span class='line'>        outputRange: SHOOTING_COLORS
</span><span class='line'>      });
</span><span class='line'>
</span><span class='line'>      var _particleFill = firework.particleColor.interpolate({
</span><span class='line'>        inputRange: [0,1,2,3,4],
</span><span class='line'>        outputRange: PARTICLE_COLORS
</span><span class='line'>      });
</span><span class='line'>
</span><span class='line'>      return (
</span><span class='line'>          &lt;AnimatedGroup 
</span><span class='line'>            x={firework.shootingPosition.x}
</span><span class='line'>            y={firework.shootingPosition.y}
</span><span class='line'>          &gt;
</span><span class='line'>                &lt;AnimatedCircle
</span><span class='line'>                  opacity={firework.coreOpacity}
</span><span class='line'>                  radius={MORTAR_RADIUS}
</span><span class='line'>                  fill={_shootingFill}
</span><span class='line'>                /&gt;
</span><span class='line'>                &lt;Group&gt;
</span><span class='line'>                {
</span><span class='line'>                  PARTICLE_COUNT.map((v, j) =&gt; {
</span><span class='line'>                    return &lt;AnimatedCircle
</span><span class='line'>                      x={firework.particlePositions[j].x}
</span><span class='line'>                      y={firework.particlePositions[j].y}
</span><span class='line'>                      scaleX={firework.particleRadius}
</span><span class='line'>                      scaleY={firework.particleRadius}
</span><span class='line'>                      radius={PARTICLE_RADIUS}
</span><span class='line'>                      fill={_particleFill}
</span><span class='line'>                    /&gt;
</span><span class='line'>                  })
</span><span class='line'>                }
</span><span class='line'>                &lt;/Group&gt;
</span><span class='line'>          &lt;/AnimatedGroup&gt;
</span><span class='line'>      );
</span><span class='line'>    })
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>There is a lot going on here. We have our same <code>_shootingFill</code> like we did before, that causes the yellow => orange interpolation.
We add another interpolation for the particleFill. Same concept as the <code>_shootingFill</code> just with 5 colors now.</p>

<p>What is much different here is the <code>AnimatedGroup</code>. We have moved our <code>x,y</code> from the <code>AnimatedCircle</code> to the <code>AnimatedGroup</code>.</p>

<p>This will bundle our mortar, and our particles all in the same coordinate area. That way we can have our particles start at <code>0,0</code> and move outwards and the <code>AnimatedGroup</code> will make sure all the coordinates are handled correctly.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;AnimatedCircle
</span><span class='line'>  opacity={firework.coreOpacity}
</span><span class='line'>  radius={MORTAR_RADIUS}
</span><span class='line'>  fill={_shootingFill}
</span><span class='line'>/&gt;</span></code></pre></td></tr></table></div></figure>


<p>You can see here we put out <code>coreOpacity</code> animation in there. So it&rsquo;ll fade from <code>1</code> opacity down to <code>0</code> over that 200 milliseconds we setup.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;Group&gt;
</span><span class='line'>    {
</span><span class='line'>      PARTICLE_COUNT.map((v, j) =&gt; {
</span><span class='line'>        return &lt;AnimatedCircle
</span><span class='line'>          x={firework.particlePositions[j].x}
</span><span class='line'>          y={firework.particlePositions[j].y}
</span><span class='line'>          scaleX={firework.particleRadius}
</span><span class='line'>          scaleY={firework.particleRadius}
</span><span class='line'>          radius={PARTICLE_RADIUS}
</span><span class='line'>          fill={_particleFill}
</span><span class='line'>        /&gt;
</span><span class='line'>      })
</span><span class='line'>    }
</span><span class='line'>  &lt;/Group&gt;</span></code></pre></td></tr></table></div></figure>


<p>We group the Particles with a <code>Group</code> component but that&rsquo;s just arbitrary.</p>

<p>We map over our 20 particles, and set the <code>x</code> and <code>y</code> to the points we had determined with our <code>getXYParticle</code> function.</p>

<p>You&rsquo;ll notice we are passing in <code>particleRadius</code> to the <code>scaleX</code> and <code>scaleY</code> properties.
This is because while writing this I realized that the <code>AnimatedCircle</code> takes the radius property and creates a path out of it. That is not animateable in this particular way, so the solution I came up was to scale each particle to 0. Basically making it completely hidden.</p>

<p>That then allows us to expand it out to it&rsquo;s full scale and make it look like an explosion. It actually works better.</p>

<p>Finally we add in our <code>PARTICLE_RADIUS</code> we defined at the top, aka size of each explosion, and put in our <code>_particleFill</code> which is the color interpolation between those 5 colors.</p>

<h1>Play with it</h1>

<p>That is all! We have a firework shooter!</p>

<p>Check it out on RNPlay as per usual <a href="https://rnplay.org/apps/ysm12A">https://rnplay.org/apps/ysm12A</a>.</p>

<p>Tap to your hearts content and watch all the explosive animation goodness appear on screen.</p>

<p><img src="http://i.imgur.com/Dj60a6e.gif" title="Firework Shooter" ></p>

<h1>Final Code</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>var Dimensions = require('Dimensions');
</span><span class='line'>var ReactNativeART = require('ReactNativeART');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  width,
</span><span class='line'>  height
</span><span class='line'>} = Dimensions.get('window');
</span><span class='line'>
</span><span class='line'>var MORTAR_RADIUS = 5;
</span><span class='line'>var PARTICLE_RADIUS = 30;
</span><span class='line'>var PARTICLE_COUNT = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Animated,
</span><span class='line'>  View,
</span><span class='line'>  TouchableWithoutFeedback
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>    Surface,
</span><span class='line'>    Shape,
</span><span class='line'>    Path,
</span><span class='line'>    Group,
</span><span class='line'>    Transform
</span><span class='line'>} = ReactNativeART;
</span><span class='line'>
</span><span class='line'>var SHOOTING_COLORS = [
</span><span class='line'>  'rgb(234,238,112)',
</span><span class='line'>  'rgb(245,137,12)'
</span><span class='line'>];
</span><span class='line'>
</span><span class='line'>var PARTICLE_COLORS = [
</span><span class='line'>    'rgba(54, 17, 52, 100)',
</span><span class='line'>    'rgba(176, 34, 140, 100)',
</span><span class='line'>    'rgba(234, 55, 136, 100)',
</span><span class='line'>    'rgba(229, 107, 112, 100)',
</span><span class='line'>    'rgba(243, 145, 160, 100)'
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>var AnimatedShape = Animated.createAnimatedComponent(Shape);
</span><span class='line'>var AnimatedGroup = Animated.createAnimatedComponent(Group);
</span><span class='line'>
</span><span class='line'>var FireworkShooter = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>      fireworks: []
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  adjustShootingFill: function(_shootingColor, value) {
</span><span class='line'>    Animated.timing(_shootingColor, {
</span><span class='line'>      duration: 16,
</span><span class='line'>      toValue: _shootingColor.__getAnimatedValue() == 0 ? 1 : 0
</span><span class='line'>    }).start()
</span><span class='line'>  },
</span><span class='line'>  adjustParticleFill: function(_particleColor, value) {
</span><span class='line'>    var _currentFill = _particleColor.__getAnimatedValue(),
</span><span class='line'>        _particleFill = _currentFill === 5 ? 0 : _currentFill + 1;
</span><span class='line'>
</span><span class='line'>    Animated.timing(_particleColor, {
</span><span class='line'>      duration: 16,
</span><span class='line'>      toValue: _particleFill
</span><span class='line'>    }).start()
</span><span class='line'>  },
</span><span class='line'>  removeSelf: function(_shootingPosition) {
</span><span class='line'>    this.state.fireworks = this.state.fireworks.filter((firework) =&gt; firework.shootingPosition !== _shootingPosition);
</span><span class='line'>    this.setState(this.state);
</span><span class='line'>  },
</span><span class='line'>  _handleAddFirework: function(e) {
</span><span class='line'>    var _shootingPosition = new Animated.ValueXY({x: width/2, y: height - MORTAR_RADIUS});
</span><span class='line'>    var _shootingColor = new Animated.Value(0);
</span><span class='line'>
</span><span class='line'>    var _particleColor = new Animated.Value(0);
</span><span class='line'>    var _particleRadius = new Animated.Value(0);
</span><span class='line'>    var _coreOpacity = new Animated.Value(1);
</span><span class='line'>
</span><span class='line'>    var _particlePositions = PARTICLE_COUNT.map(() =&gt; new Animated.ValueXY({x: 0, y: 0}));
</span><span class='line'>
</span><span class='line'>    this.state.fireworks.push({
</span><span class='line'>      shootingPosition: _shootingPosition,
</span><span class='line'>      shootingColor: _shootingColor,
</span><span class='line'>      particleColor: _particleColor,
</span><span class='line'>      particleRadius: _particleRadius,
</span><span class='line'>      coreOpacity: _coreOpacity,
</span><span class='line'>      particlePositions: _particlePositions
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>    var _animatedParticles = [
</span><span class='line'>        Animated.timing(_particleRadius, {
</span><span class='line'>          duration: 700,
</span><span class='line'>          toValue: 1
</span><span class='line'>        }),
</span><span class='line'>        Animated.timing(_coreOpacity, {
</span><span class='line'>          duration: 200,
</span><span class='line'>          toValue: 0
</span><span class='line'>        })
</span><span class='line'>    ]
</span><span class='line'>
</span><span class='line'>    _movingParticles = _particlePositions.map((particle, i) =&gt; {
</span><span class='line'>      var _xy = getXYParticle(PARTICLE_COUNT.length, i, PARTICLE_RADIUS);
</span><span class='line'>      return Animated.timing(particle, {
</span><span class='line'>        duration: 250,
</span><span class='line'>        toValue: _xy
</span><span class='line'>      })
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>    _animatedParticles = _animatedParticles.concat(_movingParticles);
</span><span class='line'>
</span><span class='line'>    Animated.sequence([
</span><span class='line'>      Animated.timing(_shootingPosition, {
</span><span class='line'>        duration: 300,
</span><span class='line'>        toValue: {
</span><span class='line'>          y: e.nativeEvent.locationY,
</span><span class='line'>          x: e.nativeEvent.locationX
</span><span class='line'>        }
</span><span class='line'>      }),
</span><span class='line'>      Animated.parallel(_animatedParticles)
</span><span class='line'>    ]).start(this.removeSelf.bind(this, _shootingPosition));
</span><span class='line'>
</span><span class='line'>    _shootingPosition.addListener(this.adjustShootingFill.bind(null, _shootingColor));
</span><span class='line'>    _particleRadius.addListener(this.adjustParticleFill.bind(null, _particleColor));
</span><span class='line'>
</span><span class='line'>    this.setState(this.state);
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  getFireworks: function() {
</span><span class='line'>    return this.state.fireworks.map((firework, i) =&gt; {
</span><span class='line'>
</span><span class='line'>      var _shootingFill = firework.shootingColor.interpolate({
</span><span class='line'>        inputRange: [0,1],
</span><span class='line'>        outputRange: SHOOTING_COLORS
</span><span class='line'>      });
</span><span class='line'>
</span><span class='line'>      var _particleFill = firework.particleColor.interpolate({
</span><span class='line'>        inputRange: [0,1,2,3,4],
</span><span class='line'>        outputRange: PARTICLE_COLORS
</span><span class='line'>      });
</span><span class='line'>
</span><span class='line'>      return (
</span><span class='line'>          &lt;AnimatedGroup 
</span><span class='line'>            x={firework.shootingPosition.x}
</span><span class='line'>            y={firework.shootingPosition.y}
</span><span class='line'>          &gt;
</span><span class='line'>                &lt;AnimatedCircle
</span><span class='line'>                  key={i}
</span><span class='line'>                  opacity={firework.coreOpacity}
</span><span class='line'>                  radius={MORTAR_RADIUS}
</span><span class='line'>                  fill={_shootingFill}
</span><span class='line'>                /&gt;
</span><span class='line'>                &lt;Group&gt;
</span><span class='line'>                {
</span><span class='line'>                  PARTICLE_COUNT.map((v, j) =&gt; {
</span><span class='line'>                    return &lt;AnimatedCircle
</span><span class='line'>                      x={firework.particlePositions[j].x}
</span><span class='line'>                      y={firework.particlePositions[j].y}
</span><span class='line'>                      scaleX={firework.particleRadius}
</span><span class='line'>                      scaleY={firework.particleRadius}
</span><span class='line'>                      radius={PARTICLE_RADIUS}
</span><span class='line'>                      fill={_particleFill}
</span><span class='line'>                    /&gt;
</span><span class='line'>                  })
</span><span class='line'>                }
</span><span class='line'>                &lt;/Group&gt;
</span><span class='line'>          &lt;/AnimatedGroup&gt;
</span><span class='line'>      );
</span><span class='line'>    })
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>      &lt;View style={styles.container}&gt;
</span><span class='line'>        &lt;TouchableWithoutFeedback onPress={this._handleAddFirework}&gt;
</span><span class='line'>          &lt;View&gt;
</span><span class='line'>            &lt;Surface width={width} height={height}&gt;
</span><span class='line'>              {this.getFireworks()}
</span><span class='line'>            &lt;/Surface&gt;
</span><span class='line'>          &lt;/View&gt;
</span><span class='line'>        &lt;/TouchableWithoutFeedback&gt;
</span><span class='line'>      &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    flexDirection: 'column'
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>function getXYParticle(total, i, radius) {
</span><span class='line'>  var angle = 360/total*i;
</span><span class='line'>
</span><span class='line'>  var x = Math.round((radius*2) * Math.cos(angle - (Math.PI/2)));
</span><span class='line'>  var y = Math.round((radius*2) * Math.sin(angle - (Math.PI/2)));
</span><span class='line'>
</span><span class='line'>  return {
</span><span class='line'>    x: x,
</span><span class='line'>    y: y
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//Modified this to use the AnimatedShape we create up above. Thanks Facebook :)
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Copyright 2013-2014 Facebook, Inc.
</span><span class='line'> * All rights reserved.
</span><span class='line'> *
</span><span class='line'> * This source code is licensed under the BSD-style license found in the
</span><span class='line'> * LICENSE file in the root directory of this source tree. An additional grant
</span><span class='line'> * of patent rights can be found in the PATENTS file in the same directory.
</span><span class='line'> *
</span><span class='line'> * @providesModule Circle.art
</span><span class='line'> * @typechecks
</span><span class='line'> *
</span><span class='line'> * Example usage:
</span><span class='line'> * &lt;Circle
</span><span class='line'> *   radius={10}
</span><span class='line'> *   stroke="green"
</span><span class='line'> *   strokeWidth={3}
</span><span class='line'> *   fill="blue"
</span><span class='line'> * /&gt;
</span><span class='line'> *
</span><span class='line'> */
</span><span class='line'>var AnimatedCircle = React.createClass({displayName: "Circle",
</span><span class='line'>  render: function() {
</span><span class='line'>    var radius = this.props.radius;
</span><span class='line'>
</span><span class='line'>    var path = Path().moveTo(0, -radius)
</span><span class='line'>        .arc(0, radius * 2, radius)
</span><span class='line'>        .arc(0, radius * -2, radius)
</span><span class='line'>        .close();
</span><span class='line'>    return React.createElement(AnimatedShape, React.__spread({},  this.props, {d: path}));
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>AppRegistry.registerComponent('FireworkShooter', () =&gt; FireworkShooter);</span></code></pre></td></tr></table></div></figure>

]]>
		</content>
	</entry>
	
	<entry>
		
			<title type="html"><![CDATA[React-native press and hold button actions]]></title>
		
		<link href="http://browniefed.com/blog/react-native-press-and-hold-button-actions/"/>
		<updated>2015-08-22T11:55:00-07:00</updated>
		<id>http://browniefed.com/blog/react-native-press-and-hold-button-actions</id>
		<content type="html">
			<![CDATA[
				
					<p></p>
				
			]]>
			<![CDATA[<h1>Introduction</h1>

<p>Another common interaction is the press and hold to fire an action. Sometimes it&rsquo;s delete, sometimes it&rsquo;s save, but whatever it is you want to provide feedback to your user. React Native ships with a few Touchable components like <code>TouchableOpacity</code>, <code>TouchableHighlight</code> and also <code>TouchableBounce</code> that provide feedback to users but we&rsquo;ll build a button that fills up over a set period of time then triggers an action.</p>

<p><img src="http://i.imgur.com/aVeaXMc.gif" title="Final Press And Hold" ></p>

<!-- more -->


<h1>Setup</h1>

<p>Lets do some code setup.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Animated,
</span><span class='line'>  View,
</span><span class='line'>  Text,
</span><span class='line'>  TouchableWithoutFeedback
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var ACTION_TIMER = 400;
</span><span class='line'>var COLORS = ['rgb(255,255,255)', 'rgb(111,235,62)'];</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll pull in the normal components from React Native and additionally setup some variables to use later. <code>ACTION_TIMER</code> will be how long the animation will take before it fires the action, the <code>COLORS</code> will be the start and end colors. This animtion will transition from white to a brightish green. Remember that animated interpolations do not work with hex.</p>

<h1>Base Component With StyleSheet</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var AnimatedButtonPress = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>        textComplete: ''
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>       &lt;View style={styles.container}&gt;
</span><span class='line'>            &lt;TouchableWithoutFeedback&gt;
</span><span class='line'>                &lt;View style={styles.button} &gt;
</span><span class='line'>                    &lt;Animated.View style={styles.bgFill} /&gt;
</span><span class='line'>                    &lt;Text style={styles.text}&gt;Press And Hold Me&lt;/Text&gt;
</span><span class='line'>                &lt;/View&gt;
</span><span class='line'>            &lt;/TouchableWithoutFeedback&gt;
</span><span class='line'>            &lt;View&gt;
</span><span class='line'>                &lt;Text&gt;{this.state.textComplete}&lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>       &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    flexDirection: 'column',
</span><span class='line'>    alignItems: 'center',
</span><span class='line'>    justifyContent: 'center'
</span><span class='line'>  },
</span><span class='line'>  button: {
</span><span class='line'>    padding: 10,
</span><span class='line'>    borderWidth: 3,
</span><span class='line'>    borderColor: '#111'
</span><span class='line'>  },
</span><span class='line'>  text: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    color: '#111'
</span><span class='line'>  },
</span><span class='line'>  bgFill: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>To start out, for this to work we obviously don&rsquo;t need the <code>textComplete</code> but that&rsquo;s just going to be our visual feedback to let us know when the action completes.</p>

<p>We setup a <code>TouchableWithoutFeedback</code> so we can get access to a few press handlers without directly using the <code>PanResponder</code>. Next we create a wrapping button view, add some text, and most importantly we create an <code>Animated.View</code>.</p>

<p>We set it to be position absolute so it doesn&rsquo;t effect layout and sits behind the text, and set it to the <code>top: 0</code> and <code>left: 0</code> so it is position at the furthest top and left of the component. I&rsquo;ll explain later why we don&rsquo;t set <code>bottom:0</code> here as well.</p>

<h1>Create The Animated</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>        pressAction: new Animated.Value(0),
</span><span class='line'>        textComplete: ''
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._value = 0;
</span><span class='line'>    this.state.pressAction.addListener((v) =&gt; this._value = v.value);
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>UPDATE: <code>getAnimatedValue</code> is no longer accessable in the Animated API.
We need to attach a listener so that we can save off the value to use later. This allows us to track the value of the animation so we can confirm the user has held it for an appropriate length of time.</p>

<h1>Handle The Presses</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>handlePressIn: function() {
</span><span class='line'>    Animated.timing(this.state.pressAction, {
</span><span class='line'>        duration: ACTION_TIMER,
</span><span class='line'>        toValue: 1
</span><span class='line'>    }).start(this.animationActionComplete);
</span><span class='line'>},
</span><span class='line'>handlePressOut: function() {
</span><span class='line'>    Animated.timing(this.state.pressAction, {
</span><span class='line'>        duration: this._value * ACTION_TIMER,
</span><span class='line'>        toValue: 0
</span><span class='line'>    }).start();
</span><span class='line'>},
</span><span class='line'>animationActionComplete: function() {
</span><span class='line'>    var message = '';
</span><span class='line'>    if (this._value === 1) {
</span><span class='line'>        message = 'You held it long enough to fire the action!';
</span><span class='line'>    }
</span><span class='line'>    this.setState({
</span><span class='line'>        textComplete: message
</span><span class='line'>    });
</span><span class='line'>},
</span><span class='line'>render: function() {
</span><span class='line'>    return (
</span><span class='line'>       &lt;View style={styles.container}&gt;
</span><span class='line'>            &lt;TouchableWithoutFeedback 
</span><span class='line'>                onPressIn={this.handlePressIn} 
</span><span class='line'>                onPressOut={this.handlePressOut}
</span><span class='line'>            &gt;
</span><span class='line'>                &lt;View style={styles.button} &gt;
</span><span class='line'>                    &lt;Animated.View style={styles.bgFill} /&gt;
</span><span class='line'>                    &lt;Text style={styles.text}&gt;Press And Hold Me&lt;/Text&gt;
</span><span class='line'>                &lt;/View&gt;
</span><span class='line'>            &lt;/TouchableWithoutFeedback&gt;
</span><span class='line'>            &lt;View&gt;
</span><span class='line'>                &lt;Text&gt;{this.state.textComplete}&lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>       &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>Here we use the <code>onPressIn</code> and <code>onPressOut</code> callbacks. These will trigger timed animations. We&rsquo;ll use the <code>ACTION_TIMER</code> variable we setup at the top, and <code>onPressIn</code> we&rsquo;ll animate our <code>pressAction</code> animated value to <code>1</code> over <code>400ms</code>.</p>

<p><code>onPressOut</code> we&rsquo;ll animate it from <code>1</code> back down to <code>0</code>. However if a user lifts their finger before the <code>400ms</code> threshold is reached then it will animated down from that value. For example holding it down for <code>200ms</code> would mean our <code>pressAction</code> animated value was at <code>.5</code> so it would then animated down from <code>.5</code> to <code>0</code> over <code>400ms</code>.</p>

<p>Animating down over the full <code>400ms</code> is not ideal, so what we&rsquo;ll do is get the current animated value with <code>this._value</code> and multiply it times the full <code>ACTION_TIMER</code> which means out <code>.5</code> animated value would yield us the correct <code>200ms</code> to transition back to <code>0</code>.</p>

<p>Finally we pass in a callback to our <code>start</code> of <code>handlePressIn</code> which if our <code>pressAction</code> animated value gets to <code>1</code> aka being compelte then we will tell the user their action happened.</p>

<h1>Measure the button</h1>

<p>Due to absolute layout we&rsquo;ll need to use specific widths and heights. That means we&rsquo;ll have to get the layout of the button so we know how much to fill.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>        pressAction: new Animated.Value(0),
</span><span class='line'>        textComplete: '',
</span><span class='line'>        buttonWidth: 0,
</span><span class='line'>        buttonHeight: 0
</span><span class='line'>    };
</span><span class='line'>  },</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll setup the <code>buttonWidth</code> and <code>buttonHeight</code> on our initial state.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getButtonWidthLayout: function(e) {
</span><span class='line'>    this.setState({
</span><span class='line'>        buttonWidth: e.nativeEvent.layout.width - 6,
</span><span class='line'>        buttonHeight: e.nativeEvent.layout.height - 6
</span><span class='line'>    });
</span><span class='line'>  },
</span><span class='line'>
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>       &lt;View style={styles.container}&gt;
</span><span class='line'>            &lt;TouchableWithoutFeedback 
</span><span class='line'>                onPressIn={this.handlePressIn} 
</span><span class='line'>                onPressOut={this.handlePressOut}
</span><span class='line'>            &gt;
</span><span class='line'>                &lt;View style={styles.button} onLayout={this.getButtonWidthLayout}&gt;
</span><span class='line'>                    &lt;Animated.View style={styles.bgFill} /&gt;
</span><span class='line'>                    &lt;Text style={styles.text}&gt;Press And Hold Me&lt;/Text&gt;
</span><span class='line'>                &lt;/View&gt;
</span><span class='line'>            &lt;/TouchableWithoutFeedback&gt;
</span><span class='line'>            &lt;View&gt;
</span><span class='line'>                &lt;Text&gt;{this.state.textComplete}&lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>       &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll use the <code>onLayout</code> callback for views and set the state of our buttons width and height. Why can&rsquo;t we use <code>bottom: 0</code>? Well because of the padding we set on the button it would only show the animated background where the text ends, so we&rsquo;ll explicitily set the height.</p>

<p>Why the <code>-6</code>? Well the same things happens for <code>top: 0</code> and <code>left: 0</code>. It will sit inside the border, so if we animated to the full width and set the full height then it would extend the progress bar past the borders which we don&rsquo;t want.</p>

<h1>Aniamte The Background and Width of our Fill</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  getProgressStyles: function() {
</span><span class='line'>    var width = this.state.pressAction.interpolate({
</span><span class='line'>        inputRange: [0, 1],
</span><span class='line'>        outputRange: [0, this.state.buttonWidth]
</span><span class='line'>    });
</span><span class='line'>    var bgColor = this.state.pressAction.interpolate({
</span><span class='line'>        inputRange: [0, 1],
</span><span class='line'>        outputRange: COLORS
</span><span class='line'>    })
</span><span class='line'>    return {
</span><span class='line'>        width: width,
</span><span class='line'>        height: this.state.buttonHeight,
</span><span class='line'>        backgroundColor: bgColor
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>       &lt;View style={styles.container}&gt;
</span><span class='line'>            &lt;TouchableWithoutFeedback 
</span><span class='line'>                onPressIn={this.handlePressIn} 
</span><span class='line'>                onPressOut={this.handlePressOut}
</span><span class='line'>            &gt;
</span><span class='line'>                &lt;View style={styles.button} onLayout={this.getButtonWidthLayout}&gt;
</span><span class='line'>                    &lt;Animated.View style={[styles.bgFill, this.getProgressStyles()]} /&gt;
</span><span class='line'>                    &lt;Text style={styles.text}&gt;Press And Hold Me&lt;/Text&gt;
</span><span class='line'>                &lt;/View&gt;
</span><span class='line'>            &lt;/TouchableWithoutFeedback&gt;
</span><span class='line'>            &lt;View&gt;
</span><span class='line'>                &lt;Text&gt;{this.state.textComplete}&lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>       &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>We use the array syntax for style to combine our pre-set styles and our generated styles. We call <code>getProgressStyles</code> to return a new object with our dynamic styling. In our <code>getProgressStyles</code> we&rsquo;ll use the <code>interpolate</code> function on our <code>pressAction</code> animated value to setup animated values.</p>

<p>So for the width we&rsquo;ll take an input of <code>[0,1]</code> and it will interpolate from <code>0</code> to the width of our button that we set in the <code>getButtonWidthLayout</code>.</p>

<p>Same thing goes for the <code>bgColor</code> interpolation. It takes the same <code>[0,1]</code> inputRange and interpolates to the <code>rgb</code> colors we setup in the top.</p>

<p>Finally we return our new style object with our animated values, and also the heigth of the button (minus the 6 border pixels).</p>

<h1>Final</h1>

<p>And just like that you have the ability to press and hold a button and execute an action when it&rsquo;s done, all while providing feedback to the user.</p>

<p>As always checkout the live code <a href="https://rnplay.org/apps/umzv6g">https://rnplay.org/apps/umzv6g</a>.</p>

<p><img src="http://i.imgur.com/aVeaXMc.gif" title="Final Press And Hold" ></p>

<h1>Final Code</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var React = require('react-native');
</span><span class='line'>
</span><span class='line'>var {
</span><span class='line'>  AppRegistry,
</span><span class='line'>  StyleSheet,
</span><span class='line'>  Animated,
</span><span class='line'>  View,
</span><span class='line'>  Text,
</span><span class='line'>  TouchableWithoutFeedback
</span><span class='line'>} = React;
</span><span class='line'>
</span><span class='line'>var ACTION_TIMER = 400;
</span><span class='line'>var COLORS = ['rgb(255,255,255)', 'rgb(111,235,62)'];
</span><span class='line'>
</span><span class='line'>var AnimatedButtonPress = React.createClass({
</span><span class='line'>  getInitialState: function() {
</span><span class='line'>    return {
</span><span class='line'>        pressAction: new Animated.Value(0),
</span><span class='line'>        textComplete: '',
</span><span class='line'>        buttonWidth: 0,
</span><span class='line'>        buttonHeight: 0
</span><span class='line'>    };
</span><span class='line'>  },
</span><span class='line'>  componentWillMount: function() {
</span><span class='line'>    this._value = 0;
</span><span class='line'>    this.state.pressAction.addListener((v) =&gt; this._value = v.value);
</span><span class='line'>  },
</span><span class='line'>  handlePressIn: function() {
</span><span class='line'>    Animated.timing(this.state.pressAction, {
</span><span class='line'>        duration: ACTION_TIMER,
</span><span class='line'>        toValue: 1
</span><span class='line'>    }).start(this.animationActionComplete);
</span><span class='line'>  },
</span><span class='line'>  handlePressOut: function() {
</span><span class='line'>    Animated.timing(this.state.pressAction, {
</span><span class='line'>            duration: this._value * ACTION_TIMER,
</span><span class='line'>            toValue: 0
</span><span class='line'>    }).start();
</span><span class='line'>  },
</span><span class='line'>  animationActionComplete: function() {
</span><span class='line'>    var message = '';
</span><span class='line'>    if (this._value === 1) {
</span><span class='line'>        message = 'You held it long enough to fire the action!';
</span><span class='line'>    }
</span><span class='line'>    this.setState({
</span><span class='line'>        textComplete: message
</span><span class='line'>    });
</span><span class='line'>  },
</span><span class='line'>  getButtonWidthLayout: function(e) {
</span><span class='line'>    this.setState({
</span><span class='line'>        buttonWidth: e.nativeEvent.layout.width - 6,
</span><span class='line'>        buttonHeight: e.nativeEvent.layout.height - 6
</span><span class='line'>    });
</span><span class='line'>  },
</span><span class='line'>  getProgressStyles: function() {
</span><span class='line'>    var width = this.state.pressAction.interpolate({
</span><span class='line'>        inputRange: [0, 1],
</span><span class='line'>        outputRange: [0, this.state.buttonWidth]
</span><span class='line'>    });
</span><span class='line'>    var bgColor = this.state.pressAction.interpolate({
</span><span class='line'>        inputRange: [0, 1],
</span><span class='line'>        outputRange: COLORS
</span><span class='line'>    })
</span><span class='line'>    return {
</span><span class='line'>        width: width,
</span><span class='line'>        height: this.state.buttonHeight,
</span><span class='line'>        backgroundColor: bgColor
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  render: function() {
</span><span class='line'>    return (
</span><span class='line'>       &lt;View style={styles.container}&gt;
</span><span class='line'>            &lt;TouchableWithoutFeedback 
</span><span class='line'>                onPressIn={this.handlePressIn} 
</span><span class='line'>                onPressOut={this.handlePressOut}
</span><span class='line'>            &gt;
</span><span class='line'>                &lt;View style={styles.button} onLayout={this.getButtonWidthLayout}&gt;
</span><span class='line'>                    &lt;Animated.View style={[styles.bgFill, this.getProgressStyles()]} /&gt;
</span><span class='line'>                    &lt;Text style={styles.text}&gt;Press And Hold Me&lt;/Text&gt;
</span><span class='line'>                &lt;/View&gt;
</span><span class='line'>            &lt;/TouchableWithoutFeedback&gt;
</span><span class='line'>            &lt;View&gt;
</span><span class='line'>                &lt;Text&gt;{this.state.textComplete}&lt;/Text&gt;
</span><span class='line'>            &lt;/View&gt;
</span><span class='line'>       &lt;/View&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>var styles = StyleSheet.create({
</span><span class='line'>  container: {
</span><span class='line'>    flex: 1,
</span><span class='line'>    flexDirection: 'column',
</span><span class='line'>    alignItems: 'center',
</span><span class='line'>    justifyContent: 'center'
</span><span class='line'>  },
</span><span class='line'>  button: {
</span><span class='line'>    padding: 10,
</span><span class='line'>    borderWidth: 3,
</span><span class='line'>    borderColor: '#111'
</span><span class='line'>  },
</span><span class='line'>  text: {
</span><span class='line'>    backgroundColor: 'transparent',
</span><span class='line'>    color: '#111'
</span><span class='line'>  },
</span><span class='line'>  bgFill: {
</span><span class='line'>    position: 'absolute',
</span><span class='line'>    top: 0,
</span><span class='line'>    left: 0
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>AppRegistry.registerComponent('SampleApp', () =&gt; AnimatedButtonPress);
</span></code></pre></td></tr></table></div></figure>

]]>
		</content>
	</entry>
	
</feed>
